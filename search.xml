<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>测试</title>
      <link href="/2022/04/30/ce-shi/"/>
      <url>/2022/04/30/ce-shi/</url>
      
        <content type="html"><![CDATA[<h1 id="diyiceng"><a href="#diyiceng" class="headerlink" title="diyiceng"></a>diyiceng</h1><p>afmksaklfaf</p><p>sfokaf</p><h2 id="dierceng"><a href="#dierceng" class="headerlink" title="dierceng"></a>dierceng</h2><p>alkjal</p><p>aslal</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>高响应比优先</title>
      <link href="/2022/04/29/gao-xiang-ying-bi-you-xian/"/>
      <url>/2022/04/29/gao-xiang-ying-bi-you-xian/</url>
      
        <content type="html"><![CDATA[<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#include&lt;bits/stdc++.h&gt;</span>using namespace std<span class="token punctuation">;</span>class PCB<span class="token punctuation">{</span>public:    int <span class="token function">id</span><span class="token punctuation">;</span>int reachTime<span class="token punctuation">;</span>int needTime<span class="token punctuation">;</span>int startTime<span class="token punctuation">;</span>int finishTime<span class="token punctuation">;</span>double rp<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>bool cmp<span class="token punctuation">(</span> PCB a,PCB b <span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token builtin class-name">return</span> a.reachTime<span class="token operator">&lt;</span>b.reachTime<span class="token punctuation">;</span><span class="token punctuation">}</span>bool cmp2<span class="token punctuation">(</span> PCB a,PCB b <span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token builtin class-name">return</span> a.startTime<span class="token operator">&lt;</span>b.startTime<span class="token punctuation">;</span><span class="token punctuation">}</span>//核心思想：先看当前时刻有几个进程到达，再计算这几个进程的优先权<span class="token operator">=</span> <span class="token punctuation">(</span>等待时间/要求服务时间<span class="token punctuation">)</span>+1,优先权最大的先运行，//等这个运行完后再次判断当前有几个进程到达再计算优先权进行比对直到所有进程结束 int <span class="token function-name function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    cout<span class="token operator">&lt;&lt;</span><span class="token string">"请输入进程数:"</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>int num<span class="token punctuation">;</span>//cin<span class="token operator">&gt;&gt;</span>num<span class="token punctuation">;</span>srand<span class="token punctuation">(</span>time<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">))</span><span class="token punctuation">;</span><span class="token assign-left variable">num</span><span class="token operator">=</span>rand<span class="token punctuation">(</span><span class="token punctuation">)</span>%1000<span class="token punctuation">;</span>cout<span class="token operator">&lt;&lt;</span>num<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>PCB* arr <span class="token operator">=</span> new PCB<span class="token punctuation">[</span>num<span class="token punctuation">]</span><span class="token punctuation">;</span>cout<span class="token operator">&lt;&lt;</span><span class="token string">"请依次输入进程ID,进程到达时间,进程运行时间"</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>bool quchong<span class="token punctuation">[</span><span class="token number">1001</span><span class="token punctuation">]</span><span class="token punctuation">;</span>memset<span class="token punctuation">(</span>quchong,0,sizeof quchong<span class="token punctuation">)</span><span class="token punctuation">;</span>for<span class="token punctuation">(</span> int i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> num<span class="token punctuation">;</span> i++ <span class="token punctuation">)</span> <span class="token punctuation">{</span>//cin<span class="token operator">&gt;&gt;</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span>.id<span class="token operator">&gt;&gt;</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span>.reachTime<span class="token operator">&gt;&gt;</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span>.needTime<span class="token punctuation">;</span>int <span class="token assign-left variable">k</span><span class="token operator">=</span>rand<span class="token punctuation">(</span><span class="token punctuation">)</span>%1000<span class="token punctuation">;</span>int <span class="token assign-left variable">j</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>if<span class="token punctuation">(</span>quchong<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span>       <span class="token assign-left variable">k</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>while<span class="token punctuation">(</span>quchong<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>for<span class="token punctuation">(</span>int <span class="token assign-left variable">q</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>q<span class="token operator">&lt;</span>j+1<span class="token punctuation">;</span>q++<span class="token punctuation">)</span><span class="token punctuation">{</span>if<span class="token punctuation">(</span>quchong<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>k++<span class="token punctuation">;</span><span class="token builtin class-name">break</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span>quchong<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>j++<span class="token punctuation">;</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span>.id<span class="token operator">=</span>k<span class="token punctuation">;</span>//随机生成1000个以内的id arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span>.reachTime<span class="token operator">=</span>rand<span class="token punctuation">(</span><span class="token punctuation">)</span>%1000<span class="token punctuation">;</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span>.needTime<span class="token operator">=</span>rand<span class="token punctuation">(</span><span class="token punctuation">)</span>%1000+1<span class="token punctuation">;</span>cout<span class="token operator">&lt;&lt;</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span>.id<span class="token operator">&lt;&lt;</span><span class="token string">"  "</span><span class="token operator">&lt;&lt;</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span>.reachTime<span class="token operator">&lt;&lt;</span><span class="token string">"  "</span><span class="token operator">&lt;&lt;</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span>.needTime<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span><span class="token punctuation">}</span>sort<span class="token punctuation">(</span>arr,arr+num,cmp<span class="token punctuation">)</span><span class="token punctuation">;</span>// 使进程按reachTime<span class="token punctuation">(</span>到达时间<span class="token punctuation">)</span>排序bool start<span class="token punctuation">[</span>num<span class="token punctuation">]</span>,end<span class="token punctuation">[</span>num<span class="token punctuation">]</span><span class="token punctuation">;</span>memset<span class="token punctuation">(</span>start,0,sizeof start<span class="token punctuation">)</span><span class="token punctuation">;</span>memset<span class="token punctuation">(</span>end,0,sizeof end<span class="token punctuation">)</span><span class="token punctuation">;</span>for<span class="token punctuation">(</span>int <span class="token assign-left variable">i</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>num<span class="token punctuation">;</span>i++<span class="token punctuation">)</span><span class="token punctuation">{</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span>.rp<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span>.finishTime<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span>int <span class="token assign-left variable">s</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>int dinge<span class="token punctuation">[</span>num<span class="token punctuation">]</span><span class="token punctuation">;</span> //const int <span class="token assign-left variable">N</span><span class="token operator">=</span>1e9+10<span class="token punctuation">;</span> for<span class="token punctuation">(</span>int <span class="token assign-left variable">idx</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">;</span>idx++<span class="token punctuation">)</span><span class="token punctuation">{</span>for<span class="token punctuation">(</span>int <span class="token assign-left variable">i</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>num<span class="token punctuation">;</span>i++<span class="token punctuation">)</span><span class="token punctuation">{</span>if<span class="token punctuation">(</span>idx<span class="token operator">&gt;=</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span>.reachTime<span class="token punctuation">)</span><span class="token punctuation">{</span>start<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>true<span class="token punctuation">;</span>//如果一个进程的到达时间大于等于当前时间，就把这个进程加入到比对序列<span class="token punctuation">}</span><span class="token punctuation">}</span>   //当前时间idx，等待时间等于当前时间-到达时间    double <span class="token assign-left variable">maxt</span><span class="token operator">=</span>-1<span class="token punctuation">;</span>for<span class="token punctuation">(</span>int <span class="token assign-left variable">i</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>num<span class="token punctuation">;</span>i++<span class="token punctuation">)</span><span class="token punctuation">{</span>if<span class="token punctuation">(</span>start<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span>true<span class="token operator">&amp;&amp;</span>end<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span>false<span class="token punctuation">)</span><span class="token punctuation">{</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span>.rp<span class="token operator">=</span><span class="token punctuation">(</span>idx-arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span>.reachTime<span class="token punctuation">)</span>/arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span>.needTime+1<span class="token punctuation">;</span><span class="token assign-left variable">maxt</span><span class="token operator">=</span>max<span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span>.rp,maxt<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span>    int <span class="token assign-left variable">get</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>for<span class="token punctuation">(</span>int <span class="token assign-left variable">i</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>num<span class="token punctuation">;</span>i++<span class="token punctuation">)</span><span class="token punctuation">{</span>if<span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span>.rp<span class="token operator">==</span>maxt<span class="token operator">&amp;&amp;</span>start<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span>true<span class="token operator">&amp;&amp;</span>end<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span>false<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token assign-left variable">get</span><span class="token operator">=</span>i<span class="token punctuation">;</span><span class="token builtin class-name">break</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span>   if<span class="token punctuation">(</span>start<span class="token punctuation">[</span>get<span class="token punctuation">]</span><span class="token operator">==</span>true<span class="token operator">&amp;&amp;</span>end<span class="token punctuation">[</span>get<span class="token punctuation">]</span><span class="token operator">==</span>false<span class="token punctuation">)</span><span class="token punctuation">{</span>    arr<span class="token punctuation">[</span>get<span class="token punctuation">]</span>.startTime<span class="token operator">=</span>idx<span class="token punctuation">;</span><span class="token assign-left variable">idx</span><span class="token operator">+=</span>arr<span class="token punctuation">[</span>get<span class="token punctuation">]</span>.needTime<span class="token punctuation">;</span>arr<span class="token punctuation">[</span>get<span class="token punctuation">]</span>.finishTime<span class="token operator">=</span>idx<span class="token punctuation">;</span> end<span class="token punctuation">[</span>get<span class="token punctuation">]</span><span class="token operator">=</span>true<span class="token punctuation">;</span><span class="token punctuation">}</span>  int f<span class="token punctuation">;</span>//结束条件  for<span class="token punctuation">(</span> <span class="token assign-left variable">f</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>f<span class="token operator">&lt;</span>num<span class="token punctuation">;</span>f++<span class="token punctuation">)</span><span class="token punctuation">{</span> if<span class="token punctuation">(</span>end<span class="token punctuation">[</span>f<span class="token punctuation">]</span><span class="token operator">==</span>false<span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token builtin class-name">break</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span> if<span class="token punctuation">(</span>f<span class="token operator">==</span><span class="token punctuation">(</span>num<span class="token punctuation">))</span> <span class="token punctuation">{</span> cout<span class="token operator">&lt;&lt;</span><span class="token string">"ok111111111"</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span> <span class="token builtin class-name">break</span><span class="token punctuation">;</span><span class="token punctuation">}</span> //if<span class="token punctuation">(</span>idx<span class="token operator">==</span><span class="token number">25999</span><span class="token punctuation">)</span>cout<span class="token operator">&lt;&lt;</span><span class="token string">"false"</span><span class="token operator">&lt;&lt;</span>endl<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span><span class="token punctuation">}</span>float <span class="token assign-left variable">sum1</span><span class="token operator">=</span><span class="token number">0</span>, <span class="token assign-left variable">sum2</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>cout<span class="token operator">&lt;&lt;</span><span class="token string">"进程  到达时间  运行时间  开始时间  完成时间  周转时间  带权周转时间"</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>sort<span class="token punctuation">(</span>arr,arr+num,cmp2<span class="token punctuation">)</span><span class="token punctuation">;</span>for<span class="token punctuation">(</span> int <span class="token assign-left variable">i</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>num<span class="token punctuation">;</span>i++<span class="token punctuation">)</span><span class="token punctuation">{</span>  cout<span class="token operator">&lt;&lt;</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span>.id<span class="token operator">&lt;&lt;</span><span class="token string">"  "</span><span class="token punctuation">;</span>printf<span class="token punctuation">(</span> <span class="token string">"%8d  %8d  "</span>, arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span>.reachTime, arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span>.needTime <span class="token punctuation">)</span><span class="token punctuation">;</span>printf<span class="token punctuation">(</span> <span class="token string">"%8d  %8d  "</span>, arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span>.startTime, arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span>.finishTime <span class="token punctuation">)</span><span class="token punctuation">;</span>printf<span class="token punctuation">(</span> <span class="token string">"%8d  "</span>, arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span>.finishTime-arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span>.reachTime <span class="token punctuation">)</span><span class="token punctuation">;</span>//周转时间等于完成时间-到达时间     printf<span class="token punctuation">(</span> <span class="token string">"%8.2f<span class="token entity" title="\n">\n</span>"</span>,<span class="token punctuation">(</span>float<span class="token punctuation">)</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span>.finishTime-arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span>.reachTime<span class="token punctuation">)</span>/arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span>.needTime <span class="token punctuation">)</span><span class="token punctuation">;</span>//带权周转时间<span class="token operator">=</span>周转时间/运行时间             sum1 <span class="token operator">+=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span>.finishTime-arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span>.reachTime<span class="token punctuation">;</span>            sum2 <span class="token operator">+=</span> <span class="token punctuation">(</span>float<span class="token punctuation">)</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span>.finishTime-arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span>.reachTime<span class="token punctuation">)</span>/arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span>.needTime<span class="token punctuation">;</span> <span class="token punctuation">}</span>     printf<span class="token punctuation">(</span> <span class="token string">"平均周转时间: %.2f<span class="token entity" title="\n">\n</span>"</span>, sum1/num<span class="token punctuation">)</span><span class="token punctuation">;</span>     printf<span class="token punctuation">(</span> <span class="token string">"平均带权周转时间: %.2f<span class="token entity" title="\n">\n</span>"</span>, sum2/num<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token builtin class-name">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 操作系统 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>时间片轮转</title>
      <link href="/2022/04/25/shi-jian-pian-lun-zhuan/"/>
      <url>/2022/04/25/shi-jian-pian-lun-zhuan/</url>
      
        <content type="html"><![CDATA[<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#include&lt;bits/stdc++.h&gt;</span>using namespace std<span class="token punctuation">;</span>class PCB<span class="token punctuation">{</span>public:    int <span class="token function">id</span><span class="token punctuation">;</span>int reachTime<span class="token punctuation">;</span>int needTime<span class="token punctuation">;</span>int startTime<span class="token punctuation">;</span>int finishTime<span class="token punctuation">;</span>     <span class="token punctuation">}</span><span class="token punctuation">;</span>bool cmp<span class="token punctuation">(</span> PCB a,PCB b <span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token builtin class-name">return</span> a.reachTime<span class="token operator">&lt;</span>b.reachTime<span class="token punctuation">;</span><span class="token punctuation">}</span>bool cmp2<span class="token punctuation">(</span> PCB a,PCB b <span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token builtin class-name">return</span> a.finishTime<span class="token operator">&lt;</span>b.finishTime<span class="token punctuation">;</span><span class="token punctuation">}</span>//char ch<span class="token punctuation">[</span><span class="token number">26</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">'a'</span>,<span class="token string">'b'</span>,<span class="token string">'c'</span>,<span class="token string">'d'</span>,<span class="token string">'e'</span>,<span class="token string">'f'</span>,<span class="token string">'g'</span>,<span class="token string">'h'</span>,<span class="token string">'i'</span>,<span class="token string">'j'</span>,<span class="token string">'k'</span>,<span class="token string">'l'</span>,<span class="token string">'m'</span>,<span class="token string">'n'</span>,<span class="token string">'o'</span>,<span class="token string">'p'</span>,<span class="token string">'q'</span>,<span class="token string">'r'</span>,<span class="token string">'s'</span>,<span class="token string">'t'</span>,<span class="token string">'u'</span>,<span class="token string">'v'</span>,<span class="token string">'w'</span>,<span class="token string">'x'</span>,<span class="token string">'y'</span>,<span class="token string">'z'</span><span class="token punctuation">}</span><span class="token punctuation">;</span>int <span class="token function-name function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    cout<span class="token operator">&lt;&lt;</span><span class="token string">"请输入进程数:"</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>int num<span class="token punctuation">;</span>//cin<span class="token operator">&gt;&gt;</span>num<span class="token punctuation">;</span>srand<span class="token punctuation">(</span>time<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">))</span><span class="token punctuation">;</span><span class="token assign-left variable">num</span><span class="token operator">=</span>rand<span class="token punctuation">(</span><span class="token punctuation">)</span>%1000<span class="token punctuation">;</span>//num<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span>cout<span class="token operator">&lt;&lt;</span>num<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>PCB* arr <span class="token operator">=</span> new PCB<span class="token punctuation">[</span>num<span class="token punctuation">]</span><span class="token punctuation">;</span>cout<span class="token operator">&lt;&lt;</span><span class="token string">"请依次输入进程ID,进程到达时间,进程运行时间"</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>bool quchong<span class="token punctuation">[</span><span class="token number">1001</span><span class="token punctuation">]</span><span class="token punctuation">;</span>memset<span class="token punctuation">(</span>quchong,0,sizeof quchong<span class="token punctuation">)</span><span class="token punctuation">;</span>for<span class="token punctuation">(</span> int i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> num<span class="token punctuation">;</span> i++ <span class="token punctuation">)</span> <span class="token punctuation">{</span>//cin<span class="token operator">&gt;&gt;</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span>.id<span class="token operator">&gt;&gt;</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span>.reachTime<span class="token operator">&gt;&gt;</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span>.needTime<span class="token punctuation">;</span>int <span class="token assign-left variable">k</span><span class="token operator">=</span>rand<span class="token punctuation">(</span><span class="token punctuation">)</span>%1000<span class="token punctuation">;</span>int <span class="token assign-left variable">j</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>if<span class="token punctuation">(</span>quchong<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span>       <span class="token assign-left variable">k</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>while<span class="token punctuation">(</span>quchong<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>for<span class="token punctuation">(</span>int <span class="token assign-left variable">q</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>q<span class="token operator">&lt;</span>j+1<span class="token punctuation">;</span>q++<span class="token punctuation">)</span><span class="token punctuation">{</span>if<span class="token punctuation">(</span>quchong<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>k++<span class="token punctuation">;</span><span class="token builtin class-name">break</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span>quchong<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>j++<span class="token punctuation">;</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span>.id<span class="token operator">=</span>k<span class="token punctuation">;</span>//随机生成1000个以内不同的id  arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span>.reachTime<span class="token operator">=</span>rand<span class="token punctuation">(</span><span class="token punctuation">)</span>%1000<span class="token punctuation">;</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span>.startTime<span class="token operator">=</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span>.reachTime<span class="token punctuation">;</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span>.needTime<span class="token operator">=</span>rand<span class="token punctuation">(</span><span class="token punctuation">)</span>%1000+1<span class="token punctuation">;</span>cout<span class="token operator">&lt;&lt;</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span>.id<span class="token operator">&lt;&lt;</span><span class="token string">"  "</span><span class="token operator">&lt;&lt;</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span>.reachTime<span class="token operator">&lt;&lt;</span><span class="token string">"  "</span><span class="token operator">&lt;&lt;</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span>.needTime<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span><span class="token punctuation">}</span>sort<span class="token punctuation">(</span>arr,arr+num,cmp<span class="token punctuation">)</span><span class="token punctuation">;</span>// 使进程按reachTime<span class="token punctuation">(</span>到达时间<span class="token punctuation">)</span>排序int needTime<span class="token punctuation">[</span>num<span class="token punctuation">]</span><span class="token punctuation">;</span>for<span class="token punctuation">(</span>int <span class="token assign-left variable">i</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>num<span class="token punctuation">;</span>i++<span class="token punctuation">)</span><span class="token punctuation">{</span>needTime<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span>.needTime<span class="token punctuation">;</span><span class="token punctuation">}</span>bool start<span class="token punctuation">[</span>num<span class="token punctuation">]</span>,flag<span class="token punctuation">[</span>num<span class="token punctuation">]</span>,flag1<span class="token punctuation">[</span>num<span class="token punctuation">]</span><span class="token punctuation">;</span>memset<span class="token punctuation">(</span>start,0,sizeof start<span class="token punctuation">)</span><span class="token punctuation">;</span>memset<span class="token punctuation">(</span>flag,0,sizeof flag<span class="token punctuation">)</span><span class="token punctuation">;</span>memset<span class="token punctuation">(</span>flag1,0,sizeof flag1<span class="token punctuation">)</span><span class="token punctuation">;</span>for<span class="token punctuation">(</span>int <span class="token assign-left variable">i</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>num<span class="token punctuation">;</span>i++<span class="token punctuation">)</span><span class="token punctuation">{</span>//arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span>.startTime<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span>.finishTime<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span>queue<span class="token operator">&lt;</span>int<span class="token operator">&gt;</span> q<span class="token punctuation">;</span>int <span class="token assign-left variable">s</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>int dinge<span class="token punctuation">[</span>num<span class="token punctuation">]</span><span class="token punctuation">;</span> for<span class="token punctuation">(</span>int <span class="token assign-left variable">idx</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token assign-left variable">idx</span><span class="token operator">=</span>idx+s<span class="token punctuation">)</span><span class="token punctuation">{</span>for<span class="token punctuation">(</span>int <span class="token assign-left variable">i</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>num<span class="token punctuation">;</span>i++<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">if</span><span class="token variable"><span class="token punctuation">((</span>idx<span class="token operator">&gt;=</span>arr[i].reachTime<span class="token punctuation">)</span><span class="token operator">&amp;&amp;</span>flag[i]<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span>{start[i]<span class="token operator">=</span>true<span class="token punctuation">;</span><span class="token operator">/</span><span class="token operator">/</span>如果一个进程的到达时间大于等于当前时间，就把这个进程加入到时间片轮转序列 flag[i]<span class="token operator">=</span>true<span class="token punctuation">;</span><span class="token operator">/</span><span class="token operator">/</span>保证只把一个进程加入时间片序列一次直到结束 }}  <span class="token operator">/</span><span class="token operator">/</span>轮流让就绪队列中的进程依次执行一个时间片，每次选择从是排在就绪队列队头的进程，默认先到达的进程先进入就绪队列，可抢占 for<span class="token punctuation">(</span>int i<span class="token operator">=</span>num<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&gt;=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">--</span><span class="token punctuation">)</span>{if<span class="token punctuation">(</span>start[i]<span class="token operator">==</span>true<span class="token punctuation">)</span>{q.push<span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span> }}s<span class="token operator">=</span>q.size<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">/</span><span class="token operator">/</span>时间片轮转队列的长度 if<span class="token punctuation">(</span>q.empty<span class="token punctuation">(</span><span class="token punctuation">))</span></span> <span class="token assign-left variable">s</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>int <span class="token assign-left variable">j</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>while<span class="token punctuation">(</span><span class="token operator">!</span>q.empty<span class="token punctuation">(</span><span class="token punctuation">))</span><span class="token punctuation">{</span>//开始一次时间片轮转，依次将队列里的每个进程所需要时间减一 int <span class="token assign-left variable">t</span><span class="token operator">=</span>q.front<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>q.pop<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>needTime<span class="token punctuation">[</span>t<span class="token punctuation">]</span>--<span class="token punctuation">;</span>dinge<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span>t<span class="token punctuation">;</span>j++<span class="token punctuation">;</span><span class="token punctuation">}</span>              int n<span class="token punctuation">;</span> for<span class="token punctuation">(</span>int <span class="token assign-left variable">i</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>num<span class="token punctuation">;</span>i++<span class="token punctuation">)</span><span class="token punctuation">{</span>if<span class="token punctuation">(</span>needTime<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">&lt;=</span><span class="token number">0</span><span class="token operator">&amp;&amp;</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span>.finishTime<span class="token operator">&lt;=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>for<span class="token punctuation">(</span>int <span class="token assign-left variable">k</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>k<span class="token operator">&lt;</span>num<span class="token punctuation">;</span>k++<span class="token punctuation">)</span><span class="token punctuation">{</span>if<span class="token punctuation">(</span>dinge<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token operator">==</span>i<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token assign-left variable">n</span><span class="token operator">=</span>k<span class="token punctuation">;</span><span class="token builtin class-name">break</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span>.finishTime<span class="token operator">=</span>idx+n<span class="token punctuation">;</span>//当前时间加上这个进程是当前队列的第几个完成的 start<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span>//把这个进程移出时间片轮转队列并更新完成时间 <span class="token punctuation">}</span> int f<span class="token punctuation">;</span>//结束条件  for<span class="token punctuation">(</span> <span class="token assign-left variable">f</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>f<span class="token operator">&lt;</span>num<span class="token punctuation">;</span>f++<span class="token punctuation">)</span><span class="token punctuation">{</span> if<span class="token punctuation">(</span>needTime<span class="token punctuation">[</span>f<span class="token punctuation">]</span><span class="token operator">&gt;</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token builtin class-name">break</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span> if<span class="token punctuation">(</span>f<span class="token operator">==</span><span class="token punctuation">(</span>num<span class="token punctuation">))</span> <span class="token punctuation">{</span> cout<span class="token operator">&lt;&lt;</span><span class="token string">"ok111111111"</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span> <span class="token builtin class-name">break</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span>sort<span class="token punctuation">(</span>arr,arr+num,cmp2<span class="token punctuation">)</span><span class="token punctuation">;</span>float <span class="token assign-left variable">sum1</span><span class="token operator">=</span><span class="token number">0</span>, <span class="token assign-left variable">sum2</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>cout<span class="token operator">&lt;&lt;</span><span class="token string">"进程  到达时间  运行时间  开始时间  完成时间  周转时间  带权周转时间"</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>for<span class="token punctuation">(</span> int <span class="token assign-left variable">i</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>num<span class="token punctuation">;</span>i++<span class="token punctuation">)</span><span class="token punctuation">{</span>  cout<span class="token operator">&lt;&lt;</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span>.id<span class="token operator">&lt;&lt;</span><span class="token string">"  "</span><span class="token punctuation">;</span>printf<span class="token punctuation">(</span> <span class="token string">"%8d  %8d  "</span>, arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span>.reachTime, arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span>.needTime <span class="token punctuation">)</span><span class="token punctuation">;</span>printf<span class="token punctuation">(</span> <span class="token string">"%8d  %8d  "</span>, arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span>.startTime, arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span>.finishTime <span class="token punctuation">)</span><span class="token punctuation">;</span>printf<span class="token punctuation">(</span> <span class="token string">"%8d  "</span>, arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span>.finishTime-arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span>.reachTime <span class="token punctuation">)</span><span class="token punctuation">;</span>//周转时间等于完成时间-到达时间     printf<span class="token punctuation">(</span> <span class="token string">"%8.2f<span class="token entity" title="\n">\n</span>"</span>,<span class="token punctuation">(</span>float<span class="token punctuation">)</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span>.finishTime-arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span>.reachTime<span class="token punctuation">)</span>/arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span>.needTime <span class="token punctuation">)</span><span class="token punctuation">;</span>//带权周转时间<span class="token operator">=</span>周转时间/运行时间             sum1 <span class="token operator">+=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span>.finishTime-arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span>.reachTime<span class="token punctuation">;</span>            sum2 <span class="token operator">+=</span> <span class="token punctuation">(</span>float<span class="token punctuation">)</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span>.finishTime-arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span>.reachTime<span class="token punctuation">)</span>/arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span>.needTime<span class="token punctuation">;</span> <span class="token punctuation">}</span>     printf<span class="token punctuation">(</span> <span class="token string">"平均周转时间: %.2f<span class="token entity" title="\n">\n</span>"</span>, sum1/num<span class="token punctuation">)</span><span class="token punctuation">;</span>     printf<span class="token punctuation">(</span> <span class="token string">"平均带权周转时间: %.2f<span class="token entity" title="\n">\n</span>"</span>, sum2/num<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token builtin class-name">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 操作系统 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>先来先服务</title>
      <link href="/2022/04/23/xian-lai-xian-fu-wu/"/>
      <url>/2022/04/23/xian-lai-xian-fu-wu/</url>
      
        <content type="html"><![CDATA[<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#include&lt;bits/stdc++.h&gt;</span>using namespace std<span class="token punctuation">;</span>class PCB<span class="token punctuation">{</span>public:    int <span class="token function">id</span><span class="token punctuation">;</span>float reachTime<span class="token punctuation">;</span>float needTime<span class="token punctuation">;</span>float startTime<span class="token punctuation">;</span>float finishTime<span class="token punctuation">;</span>     <span class="token punctuation">}</span><span class="token punctuation">;</span>bool cmp<span class="token punctuation">(</span> PCB a,PCB b <span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token builtin class-name">return</span> a.reachTime<span class="token operator">&lt;</span>b.reachTime<span class="token punctuation">;</span><span class="token punctuation">}</span>//char ch<span class="token punctuation">[</span><span class="token number">26</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">'a'</span>,<span class="token string">'b'</span>,<span class="token string">'c'</span>,<span class="token string">'d'</span>,<span class="token string">'e'</span>,<span class="token string">'f'</span>,<span class="token string">'g'</span>,<span class="token string">'h'</span>,<span class="token string">'i'</span>,<span class="token string">'j'</span>,<span class="token string">'k'</span>,<span class="token string">'l'</span>,<span class="token string">'m'</span>,<span class="token string">'n'</span>,<span class="token string">'o'</span>,<span class="token string">'p'</span>,<span class="token string">'q'</span>,<span class="token string">'r'</span>,<span class="token string">'s'</span>,<span class="token string">'t'</span>,<span class="token string">'u'</span>,<span class="token string">'v'</span>,<span class="token string">'w'</span>,<span class="token string">'x'</span>,<span class="token string">'y'</span>,<span class="token string">'z'</span><span class="token punctuation">}</span><span class="token punctuation">;</span>int <span class="token function-name function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    cout<span class="token operator">&lt;&lt;</span><span class="token string">"请输入进程数:"</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>int num<span class="token punctuation">;</span>//cin<span class="token operator">&gt;&gt;</span>num<span class="token punctuation">;</span>srand<span class="token punctuation">(</span>time<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">))</span><span class="token punctuation">;</span><span class="token assign-left variable">num</span><span class="token operator">=</span>rand<span class="token punctuation">(</span><span class="token punctuation">)</span>%1000<span class="token punctuation">;</span>//num<span class="token operator">=</span><span class="token number">1000</span><span class="token punctuation">;</span>cout<span class="token operator">&lt;&lt;</span>num<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>PCB* arr <span class="token operator">=</span> new PCB<span class="token punctuation">[</span>num<span class="token punctuation">]</span><span class="token punctuation">;</span>cout<span class="token operator">&lt;&lt;</span><span class="token string">"请依次输入进程ID,进程到达时间,进程运行时间"</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>         bool quchong<span class="token punctuation">[</span><span class="token number">1001</span><span class="token punctuation">]</span><span class="token punctuation">;</span>memset<span class="token punctuation">(</span>quchong,0,sizeof quchong<span class="token punctuation">)</span><span class="token punctuation">;</span>for<span class="token punctuation">(</span> int i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> num<span class="token punctuation">;</span> i++ <span class="token punctuation">)</span> <span class="token punctuation">{</span>//cin<span class="token operator">&gt;&gt;</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span>.id<span class="token operator">&gt;&gt;</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span>.reachTime<span class="token operator">&gt;&gt;</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span>.needTime<span class="token punctuation">;</span>int <span class="token assign-left variable">k</span><span class="token operator">=</span>rand<span class="token punctuation">(</span><span class="token punctuation">)</span>%1000<span class="token punctuation">;</span>int <span class="token assign-left variable">j</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>if<span class="token punctuation">(</span>quchong<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span>       <span class="token assign-left variable">k</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>while<span class="token punctuation">(</span>quchong<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>for<span class="token punctuation">(</span>int <span class="token assign-left variable">q</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>q<span class="token operator">&lt;</span>j+1<span class="token punctuation">;</span>q++<span class="token punctuation">)</span><span class="token punctuation">{</span>if<span class="token punctuation">(</span>quchong<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>k++<span class="token punctuation">;</span><span class="token builtin class-name">break</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span>quchong<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>j++<span class="token punctuation">;</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span>.id<span class="token operator">=</span>k<span class="token punctuation">;</span>//随机生成1000个以内不同的id   arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span>.reachTime<span class="token operator">=</span>rand<span class="token punctuation">(</span><span class="token punctuation">)</span>%1000+rand<span class="token punctuation">(</span><span class="token punctuation">)</span>/<span class="token punctuation">(</span>RAND_MAX+1.0<span class="token punctuation">)</span><span class="token punctuation">;</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span>.needTime<span class="token operator">=</span>rand<span class="token punctuation">(</span><span class="token punctuation">)</span>%1000+rand<span class="token punctuation">(</span><span class="token punctuation">)</span>/<span class="token punctuation">(</span>RAND_MAX+1.0<span class="token punctuation">)</span><span class="token punctuation">;</span>cout<span class="token operator">&lt;&lt;</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span>.id<span class="token operator">&lt;&lt;</span><span class="token string">"  "</span><span class="token operator">&lt;&lt;</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span>.reachTime<span class="token operator">&lt;&lt;</span><span class="token string">"  "</span><span class="token operator">&lt;&lt;</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span>.needTime<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span><span class="token punctuation">}</span>sort<span class="token punctuation">(</span>arr,arr+num,cmp<span class="token punctuation">)</span><span class="token punctuation">;</span>// 使进程按reachTime<span class="token punctuation">(</span>到达时间<span class="token punctuation">)</span>排序//初始化开始时间，完成时间float <span class="token assign-left variable">lastTime</span><span class="token operator">=</span>arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>.reachTime<span class="token punctuation">;</span>//要是上一个进程的最后完成的时间小于下一个进程的到达时间，就把下一个进程开始时间设置为上一个进程完成时间//否则，把下一个进程开始时间设置为下一个进程的到达时间for<span class="token punctuation">(</span> int <span class="token assign-left variable">i</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>num<span class="token punctuation">;</span> i++ <span class="token punctuation">)</span> <span class="token punctuation">{</span>if<span class="token punctuation">(</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span>.reachTime<span class="token operator">&lt;</span>lastTime <span class="token punctuation">)</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span>.startTime <span class="token operator">=</span> lastTime<span class="token punctuation">;</span> <span class="token keyword">else</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span>.startTime <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span>.reachTime<span class="token punctuation">;</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span>.finishTime <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span>.startTime + arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span>.needTime<span class="token punctuation">;</span>lastTime <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span>.finishTime<span class="token punctuation">;</span>  // 更新lastTime<span class="token punctuation">}</span>float <span class="token assign-left variable">sum1</span><span class="token operator">=</span><span class="token number">0</span>.0f, <span class="token assign-left variable">sum2</span><span class="token operator">=</span><span class="token number">0</span>.0f<span class="token punctuation">;</span>cout<span class="token operator">&lt;&lt;</span><span class="token string">"进程  到达时间  运行时间  开始时间  完成时间  周转时间  带权周转时间"</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>for<span class="token punctuation">(</span> int <span class="token assign-left variable">i</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>num<span class="token punctuation">;</span>i++<span class="token punctuation">)</span><span class="token punctuation">{</span>  cout<span class="token operator">&lt;&lt;</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span>.id<span class="token operator">&lt;&lt;</span><span class="token string">"  "</span><span class="token punctuation">;</span>printf<span class="token punctuation">(</span> <span class="token string">"%8.2f  %8.2f  "</span>, arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span>.reachTime, arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span>.needTime <span class="token punctuation">)</span><span class="token punctuation">;</span>printf<span class="token punctuation">(</span> <span class="token string">"%8.2f  %8.2f  "</span>, arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span>.startTime, arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span>.finishTime <span class="token punctuation">)</span><span class="token punctuation">;</span>printf<span class="token punctuation">(</span> <span class="token string">"%8.2f  "</span>, arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span>.finishTime-arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span>.reachTime <span class="token punctuation">)</span><span class="token punctuation">;</span>//周转时间等于完成时间-到达时间     printf<span class="token punctuation">(</span> <span class="token string">"%8.2f<span class="token entity" title="\n">\n</span>"</span>, <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span>.finishTime-arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span>.reachTime<span class="token punctuation">)</span>/arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span>.needTime <span class="token punctuation">)</span><span class="token punctuation">;</span>//平均带权周转时间<span class="token operator">=</span>周转时间/运行时间             sum1 <span class="token operator">+=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span>.finishTime-arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span>.reachTime<span class="token punctuation">;</span>            sum2 <span class="token operator">+=</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span>.finishTime-arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span>.reachTime<span class="token punctuation">)</span>/arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span>.needTime<span class="token punctuation">;</span><span class="token punctuation">}</span>     printf<span class="token punctuation">(</span> <span class="token string">"平均周转时间: %.4f<span class="token entity" title="\n">\n</span>"</span>, sum1/num<span class="token punctuation">)</span><span class="token punctuation">;</span>     printf<span class="token punctuation">(</span> <span class="token string">"平均带权周转时间: %.4f<span class="token entity" title="\n">\n</span>"</span>, sum2/num<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token builtin class-name">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 操作系统 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>八数码</title>
      <link href="/2022/04/08/ba-shu-ma/"/>
      <url>/2022/04/08/ba-shu-ma/</url>
      
        <content type="html"><![CDATA[<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">题目描述在一个3×3的网格中，1~8这8个数字和一个“x”恰好不重不漏地分布在这3×3的网格中。例如：<span class="token number">1</span> <span class="token number">2</span> <span class="token number">3</span>x <span class="token number">4</span> <span class="token number">6</span><span class="token number">7</span> <span class="token number">5</span> <span class="token number">8</span>在游戏过程中，可以把“x”与其上、下、左、右四个方向之一的数字交换（如果存在）。我们的目的是通过交换，使得网格变为如下排列（称为正确排列）：<span class="token number">1</span> <span class="token number">2</span> <span class="token number">3</span><span class="token number">4</span> <span class="token number">5</span> <span class="token number">6</span><span class="token number">7</span> <span class="token number">8</span> x例如，示例中图形就可以通过让“x”先后与右、下、右三个方向的数字交换成功得到正确排列。交换过程如下：<span class="token number">1</span> <span class="token number">2</span> <span class="token number">3</span>   <span class="token number">1</span> <span class="token number">2</span> <span class="token number">3</span>   <span class="token number">1</span> <span class="token number">2</span> <span class="token number">3</span>   <span class="token number">1</span> <span class="token number">2</span> <span class="token number">3</span>x <span class="token number">4</span> <span class="token number">6</span>   <span class="token number">4</span> x <span class="token number">6</span>   <span class="token number">4</span> <span class="token number">5</span> <span class="token number">6</span>   <span class="token number">4</span> <span class="token number">5</span> <span class="token number">6</span><span class="token number">7</span> <span class="token number">5</span> <span class="token number">8</span>   <span class="token number">7</span> <span class="token number">5</span> <span class="token number">8</span>   <span class="token number">7</span> x <span class="token number">8</span>   <span class="token number">7</span> <span class="token number">8</span> x现在，给你一个初始网格，请你求出得到正确排列至少需要进行多少次交换。输入格式输入占一行，将3×3的初始网格描绘出来。例如，如果初始网格如下所示：<span class="token number">1</span> <span class="token number">2</span> <span class="token number">3</span>x <span class="token number">4</span> <span class="token number">6</span><span class="token number">7</span> <span class="token number">5</span> <span class="token number">8</span>则输入为：1 <span class="token number">2</span> <span class="token number">3</span> x <span class="token number">4</span> <span class="token number">6</span> <span class="token number">7</span> <span class="token number">5</span> <span class="token number">8</span>输出格式输出占一行，包含一个整数，表示最少交换次数。如果不存在解决方案，则输出”-1”。样例输入样例：<span class="token number">2</span>  <span class="token number">3</span>  <span class="token number">4</span>  <span class="token number">1</span>  <span class="token number">5</span>  x  <span class="token number">7</span>  <span class="token number">6</span>  <span class="token number">8</span> 输出样例<span class="token number">19</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#include&lt;bits/stdc++.h&gt;</span>using namespace std<span class="token punctuation">;</span>int bfs<span class="token punctuation">(</span>string s<span class="token punctuation">)</span><span class="token punctuation">{</span>string <span class="token assign-left variable">end</span><span class="token operator">=</span><span class="token string">"12345678x"</span><span class="token punctuation">;</span>queue<span class="token operator">&lt;</span>string<span class="token operator">&gt;</span> q<span class="token punctuation">;</span>//定义队列 unordered_map<span class="token operator">&lt;</span>string,int<span class="token operator">&gt;</span> d<span class="token punctuation">;</span>q.push<span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>//把初始状态入队 d<span class="token punctuation">[</span>s<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>int dx<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">{</span><span class="token number">1</span>,-1,0,0<span class="token punctuation">}</span><span class="token punctuation">;</span>int dy<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">{</span><span class="token number">0,0</span>,1,-1<span class="token punctuation">}</span><span class="token punctuation">;</span>while<span class="token punctuation">(</span>q.size<span class="token punctuation">(</span><span class="token punctuation">))</span><span class="token punctuation">{</span>auto <span class="token assign-left variable">t</span><span class="token operator">=</span>q.front<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>//取队头 q.pop<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>//出队 int <span class="token assign-left variable">dis</span><span class="token operator">=</span>d<span class="token punctuation">[</span>t<span class="token punctuation">]</span><span class="token punctuation">;</span>if<span class="token punctuation">(</span>t<span class="token operator">==</span>end<span class="token punctuation">)</span>return dis<span class="token punctuation">;</span>int <span class="token assign-left variable">k</span><span class="token operator">=</span>t.find<span class="token punctuation">(</span><span class="token string">'x'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>int <span class="token assign-left variable">a</span><span class="token operator">=</span>k/3,b<span class="token operator">=</span>k%3<span class="token punctuation">;</span>for<span class="token punctuation">(</span>int <span class="token assign-left variable">i</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">4</span><span class="token punctuation">;</span>i++<span class="token punctuation">)</span><span class="token punctuation">{</span>//拓展队头 int <span class="token assign-left variable">x</span><span class="token operator">=</span>a+dx<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>int <span class="token assign-left variable">y</span><span class="token operator">=</span>b+dy<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>if<span class="token punctuation">(</span>x<span class="token operator">&gt;=</span><span class="token number">0</span><span class="token operator">&amp;&amp;</span>x<span class="token operator">&lt;</span><span class="token number">3</span><span class="token operator">&amp;&amp;</span>y<span class="token operator">&gt;=</span><span class="token number">0</span><span class="token operator">&amp;&amp;</span>y<span class="token operator">&lt;</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">{</span>//边界判定 swap<span class="token punctuation">(</span>t<span class="token punctuation">[</span>k<span class="token punctuation">]</span>,t<span class="token punctuation">[</span>x*3+y<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>//进行拓展队头 if<span class="token punctuation">(</span><span class="token operator">!</span>d.count<span class="token punctuation">(</span>t<span class="token punctuation">))</span><span class="token punctuation">{</span>//如果这个状态没有被遍历过q.push<span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>//将变更后的状态入队 d<span class="token punctuation">[</span>t<span class="token punctuation">]</span><span class="token operator">=</span>dis+1<span class="token punctuation">;</span><span class="token punctuation">}</span>swap<span class="token punctuation">(</span>t<span class="token punctuation">[</span>k<span class="token punctuation">]</span>,t<span class="token punctuation">[</span>x*3+y<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>//还原队头<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span> <span class="token builtin class-name">return</span> -1<span class="token punctuation">;</span><span class="token punctuation">}</span>int <span class="token function-name function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>string s,c<span class="token punctuation">;</span>for<span class="token punctuation">(</span>int <span class="token assign-left variable">i</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">9</span><span class="token punctuation">;</span>i++<span class="token punctuation">)</span><span class="token punctuation">{</span>cin<span class="token operator">&gt;&gt;</span>c<span class="token punctuation">;</span><span class="token assign-left variable">s</span><span class="token operator">+=</span>c<span class="token punctuation">;</span><span class="token punctuation">}</span>cout<span class="token operator">&lt;&lt;</span>bfs<span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token builtin class-name">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>蓝桥杯赛前必背模板</title>
      <link href="/2022/04/08/lan-qiao-bei-sai-qian-bi-bei-mo-ban/"/>
      <url>/2022/04/08/lan-qiao-bei-sai-qian-bi-bei-mo-ban/</url>
      
        <content type="html"><![CDATA[<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">int gcd<span class="token punctuation">(</span>int a,int b<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token builtin class-name">return</span> b?gcd<span class="token punctuation">(</span>b,a%b<span class="token punctuation">)</span>:a<span class="token punctuation">;</span><span class="token punctuation">}</span>bool isprime<span class="token punctuation">(</span>int n<span class="token punctuation">)</span><span class="token punctuation">{</span>if<span class="token punctuation">(</span>n<span class="token operator">&lt;</span><span class="token number">2</span><span class="token punctuation">)</span>return <span class="token boolean">false</span><span class="token punctuation">;</span>for<span class="token punctuation">(</span>int <span class="token assign-left variable">i</span><span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n/i<span class="token punctuation">;</span>i++<span class="token punctuation">)</span><span class="token punctuation">{</span>if<span class="token punctuation">(</span>n%i<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span>return <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token builtin class-name">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">}</span>void divide<span class="token punctuation">(</span>int n<span class="token punctuation">)</span><span class="token punctuation">{</span>for<span class="token punctuation">(</span>int <span class="token assign-left variable">i</span><span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n/i<span class="token punctuation">;</span>i++<span class="token punctuation">)</span><span class="token punctuation">{</span>if<span class="token punctuation">(</span>n%i<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>int <span class="token assign-left variable">s</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>while<span class="token punctuation">(</span>n%i<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span>n/<span class="token operator">=</span>i,s++<span class="token punctuation">;</span>cout<span class="token operator">&lt;&lt;</span>i<span class="token operator">&lt;&lt;</span><span class="token string">" "</span><span class="token operator">&lt;&lt;</span>s<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span>if<span class="token punctuation">(</span>n<span class="token operator">&gt;</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>cout<span class="token operator">&lt;&lt;</span>n<span class="token operator">&lt;&lt;</span><span class="token string">" "</span><span class="token operator">&lt;&lt;</span><span class="token string">"1"</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span>int prime<span class="token punctuation">[</span>N<span class="token punctuation">]</span>,cnt<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>bool v<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span>void getprime<span class="token punctuation">(</span>int n<span class="token punctuation">)</span><span class="token punctuation">{</span>for<span class="token punctuation">(</span>int <span class="token assign-left variable">i</span><span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i++<span class="token punctuation">)</span><span class="token punctuation">{</span>if<span class="token punctuation">(</span><span class="token operator">!</span>v<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>prime<span class="token punctuation">[</span>cnt++<span class="token punctuation">]</span><span class="token operator">=</span>i<span class="token punctuation">;</span>for<span class="token punctuation">(</span>int <span class="token assign-left variable">j</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>prime<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">&lt;=</span>n/i<span class="token punctuation">;</span>j++<span class="token punctuation">)</span><span class="token punctuation">{</span>v<span class="token punctuation">[</span>prime<span class="token punctuation">[</span>j<span class="token punctuation">]</span>*i<span class="token punctuation">]</span><span class="token operator">=</span>true<span class="token punctuation">;</span>if<span class="token punctuation">(</span>i%prime<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token builtin class-name">break</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span> vector<span class="token operator">&lt;</span>int<span class="token operator">&gt;</span> gety<span class="token punctuation">(</span>int n<span class="token punctuation">)</span><span class="token punctuation">{</span>vector<span class="token operator">&lt;</span>int<span class="token operator">&gt;</span> res<span class="token punctuation">;</span>for<span class="token punctuation">(</span>int <span class="token assign-left variable">i</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n/i<span class="token punctuation">;</span>i++<span class="token punctuation">)</span><span class="token punctuation">{</span>if<span class="token punctuation">(</span>n%i<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>res.push_back<span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>if<span class="token punctuation">(</span>i<span class="token operator">!=</span>n/i<span class="token punctuation">)</span>res.push_back<span class="token punctuation">(</span>n/i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span>sort<span class="token punctuation">(</span>res.begin<span class="token punctuation">(</span><span class="token punctuation">)</span>,res.end<span class="token punctuation">(</span><span class="token punctuation">))</span><span class="token punctuation">;</span><span class="token builtin class-name">return</span> res<span class="token punctuation">;</span><span class="token punctuation">}</span>int qmi<span class="token punctuation">(</span>int n,int k,int p<span class="token punctuation">)</span><span class="token punctuation">{</span>int <span class="token assign-left variable">res</span><span class="token operator">=</span><span class="token number">1</span>%p,t<span class="token operator">=</span>n<span class="token punctuation">;</span>while<span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">{</span>if<span class="token punctuation">(</span>k<span class="token operator">&amp;</span><span class="token number">1</span><span class="token punctuation">)</span>res<span class="token operator">=</span>res*t%p<span class="token punctuation">;</span><span class="token assign-left variable">t</span><span class="token operator">=</span>t*t%p<span class="token punctuation">;</span>k<span class="token operator">&gt;&gt;</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token builtin class-name">return</span> res<span class="token punctuation">;</span><span class="token punctuation">}</span>fact<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span>infact<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>for<span class="token punctuation">(</span>int <span class="token assign-left variable">i</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>N<span class="token punctuation">;</span>i++<span class="token punctuation">)</span><span class="token punctuation">{</span>fact<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">(</span>LL<span class="token punctuation">)</span>fact<span class="token punctuation">[</span>i-1<span class="token punctuation">]</span>*i%mod<span class="token punctuation">;</span>infact<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">(</span>LL<span class="token punctuation">)</span>infact<span class="token punctuation">[</span>i-1<span class="token punctuation">]</span>*qmi<span class="token punctuation">(</span>i,mod-2,mod<span class="token punctuation">)</span>%mod<span class="token punctuation">;</span><span class="token punctuation">}</span>  c<span class="token punctuation">(</span>n,m<span class="token punctuation">)</span><span class="token operator">=</span><span class="token punctuation">(</span>LL<span class="token punctuation">)</span>fact<span class="token punctuation">[</span>m<span class="token punctuation">]</span>*infact<span class="token punctuation">[</span>m-n<span class="token punctuation">]</span>%mod*infact<span class="token punctuation">[</span>m<span class="token punctuation">]</span>%mod<span class="token punctuation">;</span>  卡特兰数:c<span class="token punctuation">(</span>n,2n<span class="token punctuation">)</span>/<span class="token punctuation">(</span>n+1<span class="token punctuation">)</span><span class="token punctuation">;</span>   int dist<span class="token punctuation">[</span>N<span class="token punctuation">]</span>,g<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span>bool v<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span>int djsk<span class="token punctuation">(</span>int n<span class="token punctuation">)</span><span class="token punctuation">{</span>memset<span class="token punctuation">(</span>dist,0x3f,sizeof dist<span class="token punctuation">)</span><span class="token punctuation">;</span>dist<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>for<span class="token punctuation">(</span>int <span class="token assign-left variable">i</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i++<span class="token punctuation">)</span><span class="token punctuation">{</span>   int <span class="token assign-left variable">t</span><span class="token operator">=</span>-1<span class="token punctuation">;</span>   for<span class="token punctuation">(</span>int <span class="token assign-left variable">j</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>j++<span class="token punctuation">)</span>   if<span class="token punctuation">(</span><span class="token operator">!</span>v<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">&amp;&amp;</span><span class="token punctuation">(</span>t<span class="token operator">==</span>-1<span class="token punctuation">)</span><span class="token operator">||</span>dist<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">&lt;</span>dist<span class="token punctuation">[</span>t<span class="token punctuation">]</span><span class="token punctuation">)</span>      <span class="token assign-left variable">t</span><span class="token operator">=</span>j<span class="token punctuation">;</span>      v<span class="token punctuation">[</span>t<span class="token punctuation">]</span><span class="token operator">=</span>true<span class="token punctuation">;</span>      for<span class="token punctuation">(</span>int <span class="token assign-left variable">j</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>j++<span class="token punctuation">)</span><span class="token punctuation">{</span>      dist<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span>min<span class="token punctuation">(</span>dist<span class="token punctuation">[</span>j<span class="token punctuation">]</span>,dist<span class="token punctuation">[</span>t<span class="token punctuation">]</span>+g<span class="token punctuation">[</span>t<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token punctuation">}</span> if<span class="token punctuation">(</span>dist<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token operator">==</span>0x3f3f3f<span class="token punctuation">)</span>return -1<span class="token punctuation">;</span><span class="token builtin class-name">return</span> dist<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span>int dist<span class="token punctuation">[</span>N<span class="token punctuation">]</span>,g<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span>int v<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span>int prim<span class="token punctuation">(</span>int n<span class="token punctuation">)</span><span class="token punctuation">{</span>memset<span class="token punctuation">(</span>dist,0x3f,sizeof dist<span class="token punctuation">)</span><span class="token punctuation">;</span>int <span class="token assign-left variable">res</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>for<span class="token punctuation">(</span>int <span class="token assign-left variable">i</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i++<span class="token punctuation">)</span><span class="token punctuation">{</span>int <span class="token assign-left variable">t</span><span class="token operator">=</span>-1<span class="token punctuation">;</span>for<span class="token punctuation">(</span>int <span class="token assign-left variable">j</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>j++<span class="token punctuation">)</span><span class="token punctuation">{</span>if<span class="token punctuation">(</span><span class="token operator">!</span>v<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">&amp;&amp;</span><span class="token punctuation">(</span>t<span class="token operator">==</span>-1<span class="token punctuation">)</span><span class="token operator">||</span>dist<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">&lt;</span>dist<span class="token punctuation">[</span>t<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>v<span class="token punctuation">[</span>t<span class="token punctuation">]</span><span class="token operator">=</span>true<span class="token punctuation">;</span>if<span class="token punctuation">(</span>i<span class="token operator">&amp;&amp;</span>dist<span class="token punctuation">[</span>t<span class="token punctuation">]</span><span class="token operator">==</span>inf<span class="token punctuation">)</span>return inf<span class="token punctuation">;</span><span class="token assign-left variable">res</span><span class="token operator">+=</span>dist<span class="token punctuation">[</span>t<span class="token punctuation">]</span><span class="token punctuation">;</span>for<span class="token punctuation">(</span>int <span class="token assign-left variable">j</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>j++<span class="token punctuation">)</span><span class="token punctuation">{</span>dist<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span>min<span class="token punctuation">(</span>dist<span class="token punctuation">[</span>j<span class="token punctuation">]</span>,g<span class="token punctuation">[</span>t<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token builtin class-name">return</span> res<span class="token punctuation">;</span><span class="token punctuation">}</span>void <span class="token function-name function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>for<span class="token punctuation">(</span>int <span class="token assign-left variable">i</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i++<span class="token punctuation">)</span>for<span class="token punctuation">(</span>int <span class="token assign-left variable">j</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>j++<span class="token punctuation">)</span><span class="token punctuation">{</span>if<span class="token punctuation">(</span>i<span class="token operator">==</span>j<span class="token punctuation">)</span>d<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">else</span> d<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span>0x3f3f3f3f<span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token punctuation">}</span>void <span class="token function-name function">fyd</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>for<span class="token punctuation">(</span>int <span class="token assign-left variable">k</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>k<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>k++<span class="token punctuation">)</span>for<span class="token punctuation">(</span>int <span class="token assign-left variable">i</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i++<span class="token punctuation">)</span>for<span class="token punctuation">(</span>int <span class="token assign-left variable">j</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>j++<span class="token punctuation">)</span><span class="token punctuation">{</span>d<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span>min<span class="token punctuation">(</span>d<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span>,d<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span>+d<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span>int tr<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span>int lowbit<span class="token punctuation">(</span>int x<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token builtin class-name">return</span> x<span class="token operator">&amp;</span>-x<span class="token punctuation">;</span><span class="token punctuation">}</span>void add<span class="token punctuation">(</span>int x,int <span class="token function">v</span><span class="token punctuation">)</span><span class="token punctuation">{</span>for<span class="token punctuation">(</span>int <span class="token assign-left variable">i</span><span class="token operator">=</span>x<span class="token punctuation">;</span>i<span class="token operator">&lt;</span>N<span class="token punctuation">;</span><span class="token assign-left variable">i</span><span class="token operator">+=</span>lowbit<span class="token punctuation">(</span>x<span class="token punctuation">))</span><span class="token punctuation">{</span>tr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">+=</span>v<span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token punctuation">}</span>int query<span class="token punctuation">(</span>int x<span class="token punctuation">)</span><span class="token punctuation">{</span>int <span class="token assign-left variable">res</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>for<span class="token punctuation">(</span>int <span class="token assign-left variable">i</span><span class="token operator">=</span>x<span class="token punctuation">;</span>i<span class="token operator">&gt;</span><span class="token number">0</span><span class="token punctuation">;</span>i-<span class="token operator">=</span>lowbit<span class="token punctuation">(</span>x<span class="token punctuation">))</span><span class="token punctuation">{</span><span class="token assign-left variable">res</span><span class="token operator">+=</span>tr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token builtin class-name">return</span> res<span class="token punctuation">;</span><span class="token punctuation">}</span>int fa<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span>int find<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token builtin class-name">return</span> fa<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">==</span>x?x:fa<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">=</span>find<span class="token punctuation">(</span>fa<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>void merge<span class="token punctuation">(</span>int x,int y<span class="token punctuation">)</span><span class="token punctuation">{</span>fa<span class="token punctuation">[</span>find<span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token operator">=</span>find<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>int bs1<span class="token punctuation">(</span>int l,int r,int k<span class="token punctuation">)</span><span class="token punctuation">{</span>while<span class="token punctuation">(</span>l<span class="token operator">&lt;</span>r<span class="token punctuation">)</span><span class="token punctuation">{</span>int <span class="token assign-left variable">m</span><span class="token operator">=</span><span class="token punctuation">(</span>l+r<span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token number">1</span><span class="token punctuation">;</span>if<span class="token punctuation">(</span>a<span class="token punctuation">[</span>m<span class="token punctuation">]</span><span class="token operator">&gt;=</span>k<span class="token punctuation">)</span>r<span class="token operator">=</span>m<span class="token punctuation">;</span>//m在a<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">=</span>k的x右边，要求的是x，即m应该向左移动 <span class="token keyword">else</span> <span class="token assign-left variable">l</span><span class="token operator">=</span>m+1<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token builtin class-name">return</span> l<span class="token punctuation">;</span><span class="token punctuation">}</span>int bs2<span class="token punctuation">(</span>int l,int r,int k<span class="token punctuation">)</span><span class="token punctuation">{</span>while<span class="token punctuation">(</span>l<span class="token operator">&lt;</span>r<span class="token punctuation">)</span><span class="token punctuation">{</span>int <span class="token assign-left variable">m</span><span class="token operator">=</span><span class="token punctuation">(</span>l+r+1<span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token number">1</span><span class="token punctuation">;</span>if<span class="token punctuation">(</span>a<span class="token punctuation">[</span>m<span class="token punctuation">]</span><span class="token operator">&lt;=</span>k<span class="token punctuation">)</span>l<span class="token operator">=</span>m<span class="token punctuation">;</span><span class="token keyword">else</span> <span class="token assign-left variable">r</span><span class="token operator">=</span>m-1<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token builtin class-name">return</span> l<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">stl:for<span class="token punctuation">(</span>int <span class="token assign-left variable">i</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i++<span class="token punctuation">)</span>cin<span class="token operator">&gt;&gt;</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>sort<span class="token punctuation">(</span>a,a+n<span class="token punctuation">)</span><span class="token punctuation">;</span>int <span class="token assign-left variable">b</span><span class="token operator">=</span>unique<span class="token punctuation">(</span>a,a+n<span class="token punctuation">)</span>-a<span class="token punctuation">;</span>for<span class="token punctuation">(</span>int <span class="token assign-left variable">i</span><span class="token operator">=</span>b<span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i++<span class="token punctuation">)</span><span class="token punctuation">{</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>//i一定要从开始<span class="token punctuation">}</span>//erase<span class="token punctuation">(</span>unique<span class="token punctuation">(</span>a.begin<span class="token punctuation">(</span><span class="token punctuation">)</span>,a.end<span class="token punctuation">(</span><span class="token punctuation">))</span>,a.end<span class="token punctuation">(</span><span class="token punctuation">))</span><span class="token punctuation">;</span>for<span class="token punctuation">(</span>int <span class="token assign-left variable">i</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>b<span class="token punctuation">;</span>i++<span class="token punctuation">)</span><span class="token punctuation">{</span>cout<span class="token operator">&lt;&lt;</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">&lt;&lt;</span><span class="token string">" "</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#include&lt;bits/stdc++.h&gt;</span>using namespace std<span class="token punctuation">;</span>int bfs<span class="token punctuation">(</span>string s<span class="token punctuation">)</span><span class="token punctuation">{</span>queue<span class="token operator">&lt;</span>string<span class="token operator">&gt;</span> q<span class="token punctuation">;</span>q.push<span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>string <span class="token assign-left variable">end</span><span class="token operator">=</span><span class="token string">"12345678x"</span><span class="token punctuation">;</span>unordered_map<span class="token operator">&lt;</span>string,int<span class="token operator">&gt;</span> d<span class="token punctuation">;</span>d<span class="token punctuation">[</span>s<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>int dx<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">{</span><span class="token number">0</span>,-1,1,0<span class="token punctuation">}</span><span class="token punctuation">;</span>int dy<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">{</span><span class="token number">1,0</span>,0,-1<span class="token punctuation">}</span><span class="token punctuation">;</span>while<span class="token punctuation">(</span>q.size<span class="token punctuation">(</span><span class="token punctuation">))</span><span class="token punctuation">{</span>auto <span class="token assign-left variable">t</span><span class="token operator">=</span>q.front<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>q.pop<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>int <span class="token assign-left variable">dis</span><span class="token operator">=</span>d<span class="token punctuation">[</span>t<span class="token punctuation">]</span><span class="token punctuation">;</span>if<span class="token punctuation">(</span>t<span class="token operator">==</span>end<span class="token punctuation">)</span>return dis<span class="token punctuation">;</span>int <span class="token assign-left variable">k</span><span class="token operator">=</span>t.find<span class="token punctuation">(</span><span class="token string">'x'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>int <span class="token assign-left variable">x</span><span class="token operator">=</span>k/3,y<span class="token operator">=</span>k%3<span class="token punctuation">;</span>for<span class="token punctuation">(</span>int <span class="token assign-left variable">i</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">4</span><span class="token punctuation">;</span>i++<span class="token punctuation">)</span><span class="token punctuation">{</span>    int <span class="token assign-left variable">a</span><span class="token operator">=</span>x+dx<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>int <span class="token assign-left variable">b</span><span class="token operator">=</span>y+dy<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>if<span class="token punctuation">(</span>a<span class="token operator">&gt;=</span><span class="token number">0</span><span class="token operator">&amp;&amp;</span>a<span class="token operator">&lt;</span><span class="token number">3</span><span class="token operator">&amp;&amp;</span>b<span class="token operator">&gt;=</span><span class="token number">0</span><span class="token operator">&amp;&amp;</span>b<span class="token operator">&lt;</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">{</span>swap<span class="token punctuation">(</span>t<span class="token punctuation">[</span>k<span class="token punctuation">]</span>,t<span class="token punctuation">[</span>a*3+b<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>if<span class="token punctuation">(</span><span class="token operator">!</span>d.count<span class="token punctuation">(</span>t<span class="token punctuation">))</span><span class="token punctuation">{</span>q.push<span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>d<span class="token punctuation">[</span>t<span class="token punctuation">]</span><span class="token operator">=</span>dis+1<span class="token punctuation">;</span><span class="token punctuation">}</span>swap<span class="token punctuation">(</span>t<span class="token punctuation">[</span>k<span class="token punctuation">]</span>,t<span class="token punctuation">[</span>a*3+b<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token builtin class-name">return</span> -1<span class="token punctuation">;</span><span class="token punctuation">}</span>int <span class="token function-name function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>string s,c<span class="token punctuation">;</span>for<span class="token punctuation">(</span>int <span class="token assign-left variable">i</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">9</span><span class="token punctuation">;</span>i++<span class="token punctuation">)</span><span class="token punctuation">{</span>cin<span class="token operator">&gt;&gt;</span>c<span class="token punctuation">;</span><span class="token assign-left variable">s</span><span class="token operator">+=</span>c<span class="token punctuation">;</span><span class="token punctuation">}</span> cout<span class="token operator">&lt;&lt;</span>bfs<span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token builtin class-name">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#include&lt;bits/stdc++.h&gt;</span>using namespace std<span class="token punctuation">;</span>typedef pair<span class="token operator">&lt;</span>int,int<span class="token operator">&gt;</span> pii<span class="token punctuation">;</span>queue<span class="token operator">&lt;</span>pii<span class="token operator">&gt;</span> q<span class="token punctuation">;</span>int m<span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">;</span>int d<span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">;</span>string p<span class="token punctuation">[</span><span class="token number">500</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">500</span><span class="token punctuation">]</span><span class="token punctuation">;</span>char ch<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">'D'</span>,<span class="token string">'L'</span>,<span class="token string">'R'</span>,<span class="token string">'U'</span><span class="token punctuation">}</span><span class="token punctuation">;</span>int n,b<span class="token punctuation">;</span>string <span class="token function-name function">bfs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>q.push<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token number">0,0</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>memset<span class="token punctuation">(</span>d,-1,sizeof d<span class="token punctuation">)</span><span class="token punctuation">;</span>d<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>int dx<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">{</span><span class="token number">1,0</span>,0,-1<span class="token punctuation">}</span><span class="token punctuation">;</span>int dy<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">{</span><span class="token number">0</span>,-1,1,0<span class="token punctuation">}</span><span class="token punctuation">;</span>p<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">""</span><span class="token punctuation">;</span>while<span class="token punctuation">(</span><span class="token operator">!</span>q.empty<span class="token punctuation">(</span><span class="token punctuation">))</span><span class="token punctuation">{</span>auto <span class="token assign-left variable">t</span><span class="token operator">=</span>q.front<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>q.pop<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>for<span class="token punctuation">(</span>int <span class="token assign-left variable">i</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">4</span><span class="token punctuation">;</span>i++<span class="token punctuation">)</span><span class="token punctuation">{</span>int <span class="token assign-left variable">x</span><span class="token operator">=</span>t.first+dx<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>int <span class="token assign-left variable">y</span><span class="token operator">=</span>t.second+dy<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>if<span class="token punctuation">(</span>x<span class="token operator">&gt;=</span><span class="token number">0</span><span class="token operator">&amp;&amp;</span>x<span class="token operator">&lt;</span>n<span class="token operator">&amp;&amp;</span>y<span class="token operator">&gt;=</span><span class="token number">0</span><span class="token operator">&amp;&amp;</span>y<span class="token operator">&lt;</span>n<span class="token punctuation">)</span><span class="token punctuation">{</span>d<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token operator">=</span>d<span class="token punctuation">[</span>t.first<span class="token punctuation">]</span><span class="token punctuation">[</span>t.second<span class="token punctuation">]</span>+1<span class="token punctuation">;</span>p<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token operator">=</span>p<span class="token punctuation">[</span>t.first<span class="token punctuation">]</span><span class="token punctuation">[</span>t.second<span class="token punctuation">]</span>+ch<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>q.push<span class="token punctuation">(</span><span class="token punctuation">{</span>x,y<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token builtin class-name">return</span> p<span class="token punctuation">[</span>n-1<span class="token punctuation">]</span><span class="token punctuation">[</span>b-1<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span>int <span class="token function-name function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>cin<span class="token operator">&gt;&gt;</span>n<span class="token operator">&gt;&gt;</span>b<span class="token punctuation">;</span>char s<span class="token punctuation">[</span>b-1<span class="token punctuation">]</span><span class="token punctuation">;</span>freopen<span class="token punctuation">(</span><span class="token string">"12.txt"</span>,<span class="token string">"r"</span>,stdin<span class="token punctuation">)</span><span class="token punctuation">;</span>for<span class="token punctuation">(</span>int <span class="token assign-left variable">i</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i++<span class="token punctuation">)</span><span class="token punctuation">{</span>gets<span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>for<span class="token punctuation">(</span>int <span class="token assign-left variable">j</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>b<span class="token punctuation">;</span>i++<span class="token punctuation">)</span><span class="token punctuation">{</span>m<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span>s<span class="token punctuation">[</span>j<span class="token punctuation">]</span>-<span class="token string">'0'</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span>cout<span class="token operator">&lt;&lt;</span>bfs<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span><span class="token builtin class-name">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>分组背包动态规划</title>
      <link href="/2022/04/07/fen-zu-bei-bao-dong-tai-gui-hua/"/>
      <url>/2022/04/07/fen-zu-bei-bao-dong-tai-gui-hua/</url>
      
        <content type="html"><![CDATA[<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">有 N 组物品和一个容量是 V 的背包。每组物品有若干个，同一组内的物品最多只能选一个。每件物品的体积是 vij，价值是 wij，其中 i 是组号，j 是组内编号。求解将哪些物品装入背包，可使物品总体积不超过背包容量，且总价值最大。输出最大价值。输入格式第一行有两个整数 N，V，用空格隔开，分别表示物品组数和背包容量。接下来有 N 组数据：每组数据第一行有一个整数 Si，表示第 i 个物品组的物品数量；每组数据接下来有 Si 行，每行有两个整数 vij,wij，用空格隔开，分别表示第 i 个物品组的第 j 个物品的体积和价值；输出格式输出一个整数，表示最大价值。数据范围<span class="token operator"><span class="token file-descriptor important">0</span>&lt;</span>N,V≤100<span class="token operator"><span class="token file-descriptor important">0</span>&lt;</span>Si≤100<span class="token operator"><span class="token file-descriptor important">0</span>&lt;</span>vij,wij≤100输入样例<span class="token number">3</span> <span class="token number">5</span><span class="token number">2</span><span class="token number">1</span> <span class="token number">2</span><span class="token number">2</span> <span class="token number">4</span><span class="token number">1</span><span class="token number">3</span> <span class="token number">4</span><span class="token number">1</span><span class="token number">4</span> <span class="token number">5</span>输出样例：<span class="token number">8</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#include&lt;bits/stdc++.h&gt;</span>using namespace std<span class="token punctuation">;</span>const int <span class="token assign-left variable">N</span><span class="token operator">=</span><span class="token number">110</span><span class="token punctuation">;</span>int n,m<span class="token punctuation">;</span>int f<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span>//从前i组物品中选且总体积不超过i的集合int v<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">[</span>N<span class="token punctuation">]</span>,w<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">[</span>N<span class="token punctuation">]</span>,s<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span> //v<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span>表示第i组第j个体积 int <span class="token function-name function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>cin<span class="token operator">&gt;&gt;</span>n<span class="token operator">&gt;&gt;</span>m<span class="token punctuation">;</span>for<span class="token punctuation">(</span>int <span class="token assign-left variable">i</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i++<span class="token punctuation">)</span><span class="token punctuation">{</span>cin<span class="token operator">&gt;&gt;</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>for<span class="token punctuation">(</span>int <span class="token assign-left variable">j</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>j++<span class="token punctuation">)</span><span class="token punctuation">{</span>cin<span class="token operator">&gt;&gt;</span>v<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">&gt;&gt;</span>w<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span>for<span class="token punctuation">(</span>int <span class="token assign-left variable">i</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i++<span class="token punctuation">)</span>for<span class="token punctuation">(</span>int <span class="token assign-left variable">j</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;=</span>m<span class="token punctuation">;</span>j++<span class="token punctuation">)</span><span class="token punctuation">{</span>f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span>f<span class="token punctuation">[</span>i-1<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>for<span class="token punctuation">(</span>int <span class="token assign-left variable">k</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>k<span class="token operator">&lt;</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>k++<span class="token punctuation">)</span><span class="token punctuation">{</span>if<span class="token punctuation">(</span>j<span class="token operator">&gt;=</span>v<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">)</span>f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span>max<span class="token punctuation">(</span>f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span>,f<span class="token punctuation">[</span>i-1<span class="token punctuation">]</span><span class="token punctuation">[</span>j-v<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">]</span>+w<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span>cout<span class="token operator">&lt;&lt;</span>f<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">[</span>m<span class="token punctuation">]</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span><span class="token builtin class-name">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2022/04/07/fen-zu-bei-bao-dong-tai-gui-hua/7A7E8DE37694290C3DB42856536BBF1C.png" alt="7A7E8DE37694290C3DB42856536BBF1C"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>多重背包动态规划</title>
      <link href="/2022/04/06/duo-chong-bei-bao-dong-tai-gui-hua/"/>
      <url>/2022/04/06/duo-chong-bei-bao-dong-tai-gui-hua/</url>
      
        <content type="html"><![CDATA[<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">有 N 种物品和一个容量是 V 的背包。第 i 种物品最多有 si 件，每件体积是 vi，价值是 wi。求解将哪些物品装入背包，可使物品体积总和不超过背包容量，且价值总和最大。输出最大价值。输入格式第一行两个整数，N，V，用空格隔开，分别表示物品种数和背包容积。接下来有 N 行，每行三个整数 vi,wi,si，用空格隔开，分别表示第 i 种物品的体积、价值和数量。输出格式输出一个整数，表示最大价值。数据范围<span class="token operator"><span class="token file-descriptor important">0</span>&lt;</span>N,V≤100<span class="token operator"><span class="token file-descriptor important">0</span>&lt;</span>vi,wi,si≤100输入样例<span class="token number">4</span> <span class="token number">5</span><span class="token number">1</span> <span class="token number">2</span> <span class="token number">3</span><span class="token number">2</span> <span class="token number">4</span> <span class="token number">1</span><span class="token number">3</span> <span class="token number">4</span> <span class="token number">3</span><span class="token number">4</span> <span class="token number">5</span> <span class="token number">2</span>输出样例：<span class="token number">10</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#include&lt;bits/stdc++.h&gt;</span>using namespace std<span class="token punctuation">;</span>int vi<span class="token punctuation">[</span><span class="token number">110</span><span class="token punctuation">]</span><span class="token punctuation">;</span>int wi<span class="token punctuation">[</span><span class="token number">110</span><span class="token punctuation">]</span><span class="token punctuation">;</span>int si<span class="token punctuation">[</span><span class="token number">110</span><span class="token punctuation">]</span><span class="token punctuation">;</span>int f<span class="token punctuation">[</span><span class="token number">110</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">110</span><span class="token punctuation">]</span><span class="token punctuation">;</span>int <span class="token function-name function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    int n,v<span class="token punctuation">;</span>    cin<span class="token operator">&gt;&gt;</span>n<span class="token operator">&gt;&gt;</span>v<span class="token punctuation">;</span>    for<span class="token punctuation">(</span>int <span class="token assign-left variable">i</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i++<span class="token punctuation">)</span><span class="token punctuation">{</span>        cin<span class="token operator">&gt;&gt;</span>vi<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">&gt;&gt;</span>wi<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">&gt;&gt;</span>si<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    f<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    for<span class="token punctuation">(</span>int <span class="token assign-left variable">i</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i++<span class="token punctuation">)</span>    for<span class="token punctuation">(</span>int <span class="token assign-left variable">j</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;=</span>v<span class="token punctuation">;</span>j++<span class="token punctuation">)</span><span class="token punctuation">{</span>        for<span class="token punctuation">(</span>int <span class="token assign-left variable">k</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>k<span class="token operator">&lt;=</span>si<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">&amp;&amp;</span>k*vi<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">&lt;=</span>j<span class="token punctuation">;</span>k++<span class="token punctuation">)</span>//k是数量        f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span>max<span class="token punctuation">(</span>f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span>,f<span class="token punctuation">[</span>i-1<span class="token punctuation">]</span><span class="token punctuation">[</span>j-k*vi<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span>+k*wi<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        cout<span class="token operator">&lt;&lt;</span>f<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>        <span class="token builtin class-name">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2022/04/06/duo-chong-bei-bao-dong-tai-gui-hua/IMG_0372(20220407-160814).PNG" alt="IMG_0372(20220407-160814)"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>汉诺塔</title>
      <link href="/2022/04/06/han-nuo-ta/"/>
      <url>/2022/04/06/han-nuo-ta/</url>
      
        <content type="html"><![CDATA[<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token number">1</span>.经典只需要三步，第一步把初始柱的n-1个柱子送到中转柱子<span class="token number">2</span>.第二步把初始柱子的最大盘子送到目标柱子<span class="token number">3</span>.第三步把中转柱子当初初始柱子，把初始柱子当做目标柱子，把目标柱子当做中转柱子，把n-1个盘子通过初始柱子送到中转柱子即可<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#define _CRT_SECURE_NO_WARNINGS 1</span><span class="token comment">#include&lt;stdio.h&gt;</span><span class="token comment">#include&lt;stdlib.h&gt; </span>void move<span class="token punctuation">(</span>char pos1,char pos2<span class="token punctuation">)</span><span class="token punctuation">{</span>printf<span class="token punctuation">(</span><span class="token string">" %c-&gt;%c "</span>,pos1,pos2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>/*N:代表盘子的个数pos1:起始位置pos2：中转位置pos3:目的位置*/void Hanoi<span class="token punctuation">(</span>int n,char pos1,char pos2,char pos3<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>move<span class="token punctuation">(</span>pos1,pos3<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>Hanoi<span class="token punctuation">(</span>n-1,pos1,pos3,pos2<span class="token punctuation">)</span><span class="token punctuation">;</span>move<span class="token punctuation">(</span>pos1, pos3<span class="token punctuation">)</span><span class="token punctuation">;</span>Hanoi<span class="token punctuation">(</span>n-1,pos2,pos1,pos3<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span>int <span class="token function-name function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>       int m<span class="token punctuation">;</span>    printf<span class="token punctuation">(</span><span class="token string">"请输入汉诺塔层数："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>scanf<span class="token punctuation">(</span><span class="token string">"%d"</span>, <span class="token operator">&amp;</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span>Hanoi<span class="token punctuation">(</span>m, <span class="token string">'A'</span>, <span class="token string">'B'</span>, <span class="token string">'C'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token builtin class-name">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">题目描述设有 nn 个大小不等的中空圆盘，按从小到大的顺序从 <span class="token number">11</span> 到 nn 编号。将这 nn 个圆盘任意的迭套在三根立柱上，立柱的编号分别为 AA , BB , CC，这个状态称为初始状态。现在要求找到一种步数最少的移动方案，使得从初始状态转变为目标状态。移动时有如下要求：一次只能移一个盘；不允许把大盘移到小盘上面。输入格式第一行一个整数，状态中圆盘总数 nn。接下来三行每行若干个整数，分别代表初始状态下 AA , BB , CC 柱子上的圆盘从上到下的编号，如果只有一个数 00 就代表这根柱子上没有数。接下来三行每行若干个整数，分别代表目标状态下 AA , BB , CC 柱子上的圆盘从上到下的编号，如果只有一个数 00 就代表这根柱子上没有数。输出格式若干行每行一个字符串，格式为 move I from P to Q ，代表一个移动的操作。接下来一行一个整数，代表从初始状态到目标状态的最少步数。输入输出样例输入 <span class="token comment">#1复制</span><span class="token number">5</span><span class="token number">3</span> <span class="token number">3</span> <span class="token number">2</span> <span class="token number">1</span><span class="token number">2</span> <span class="token number">5</span> <span class="token number">4</span><span class="token number">0</span><span class="token number">1</span> <span class="token number">2</span><span class="token number">3</span> <span class="token number">5</span> <span class="token number">4</span> <span class="token number">3</span><span class="token number">1</span> <span class="token number">1</span>输出 <span class="token comment">#1复制</span>move <span class="token number">1</span> from A to Bmove <span class="token number">2</span> from A to Cmove <span class="token number">1</span> from B to Cmove <span class="token number">3</span> from A to Bmove <span class="token number">1</span> from C to Bmove <span class="token number">2</span> from C to Amove <span class="token number">1</span> from B to C<span class="token number">7</span>说明/提示数据规模与约定对于 <span class="token number">100</span><span class="token punctuation">\</span>%100% 的数据，1 <span class="token punctuation">\</span>le n <span class="token punctuation">\</span>le <span class="token number">451</span>≤n≤45 ，1 <span class="token punctuation">\</span>le1≤ 每个圆盘的编号 <span class="token punctuation">\</span>le n≤n 。每行的圆盘描述是从下到上的圆盘编号。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">这道题是建立在P4285 <span class="token punctuation">[</span>SHOI2008<span class="token punctuation">]</span>汉诺塔 之上的，如果没有做过，建议尝试一下。这道题是建立在原版之上的，策略一样，也是要将盘子由初始柱经过中转柱转移至目标柱。那么，这道题的升级在于它规定了初始与目标，还有就是---它的各个柱子上可能都有盘子，而没有一个空柱子供你中转，这个问题等下会提到。另外强调一下：当有大盘子要过时，小盘子统统得滚开这也就是上面呢个问题的难之所在，只有等大的过了，小的才能上。所以只要确定中转柱，问题便迎刃而解了。呢么怎么确定中转柱呢？？暴力枚举？？？？O<span class="token punctuation">(</span>∩_∩<span class="token punctuation">)</span>O~ 呵呵，泽斯不可能的。那怎么办？<span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">=</span>推理开始<span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">=</span>我们设first<span class="token punctuation">[</span>x<span class="token punctuation">]</span>是初始柱，last是目标柱那么我将此时的初始柱标号以下的柱子统统转移到 <span class="token number">6</span>-<span class="token punctuation">(</span>first<span class="token punctuation">[</span>x<span class="token punctuation">]</span>+y<span class="token punctuation">)</span>的地方去为什么呢？？仔细想想：6代表的是3根初始柱，3根目标柱<span class="token number">6</span>-<span class="token punctuation">(</span>first<span class="token punctuation">[</span>x<span class="token punctuation">]</span>+y<span class="token punctuation">)</span> 便是我们的中转柱了，因为到这个位置是最优的。你应该猜到了，这个操作就是把小盘子统统移开接下来只要安心的输出，累加计数器就可以了。 皆大欢喜<span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">=</span>推理结束<span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">=</span>泽是鄙人的代码：<span class="token comment">#include&lt;cstdio&gt;</span>int n,last<span class="token punctuation">[</span><span class="token number">55</span><span class="token punctuation">]</span>,first<span class="token punctuation">[</span><span class="token number">55</span><span class="token punctuation">]</span>,ans<span class="token operator">=</span><span class="token number">0</span>,m,x<span class="token punctuation">;</span>const char ch<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">'0'</span>,<span class="token string">'A'</span>,<span class="token string">'B'</span>,<span class="token string">'C'</span><span class="token punctuation">}</span><span class="token punctuation">;</span>//char数组的第一位要有零占位，调了n久呀，一定要吸取教训。void dfs<span class="token punctuation">(</span>int x,int y<span class="token punctuation">)</span><span class="token punctuation">{</span>    if<span class="token punctuation">(</span>first<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">==</span>y<span class="token punctuation">)</span> <span class="token builtin class-name">return</span><span class="token punctuation">;</span>    for<span class="token punctuation">(</span>int <span class="token assign-left variable">i</span><span class="token operator">=</span>x-1<span class="token punctuation">;</span>i<span class="token operator">&gt;=</span><span class="token number">1</span><span class="token punctuation">;</span>i--<span class="token punctuation">)</span> dfs<span class="token punctuation">(</span>i,6-<span class="token punctuation">(</span>first<span class="token punctuation">[</span>x<span class="token punctuation">]</span>+y<span class="token punctuation">))</span><span class="token punctuation">;</span>    //处理小盘子。    printf<span class="token punctuation">(</span><span class="token string">"move %d from %c to %c<span class="token entity" title="\n">\n</span>"</span>,x,ch<span class="token punctuation">[</span>first<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">]</span>,ch<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    //输出。    first<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">=</span>y<span class="token punctuation">;</span>ans++<span class="token punctuation">;</span>    //类似于并查集，找完就将x,y合并，并且累加答案数。<span class="token punctuation">}</span>int <span class="token function-name function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    scanf<span class="token punctuation">(</span><span class="token string">"%d"</span>,<span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>    for<span class="token punctuation">(</span>int <span class="token assign-left variable">i</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span><span class="token number">3</span><span class="token punctuation">;</span>i++<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        scanf<span class="token punctuation">(</span><span class="token string">"%d"</span>,<span class="token operator">&amp;</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span>        for<span class="token punctuation">(</span>int <span class="token assign-left variable">j</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;=</span>m<span class="token punctuation">;</span>j++<span class="token punctuation">)</span> scanf<span class="token punctuation">(</span><span class="token string">"%d"</span>,<span class="token operator">&amp;</span>x<span class="token punctuation">)</span>,first<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">=</span>i<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    for<span class="token punctuation">(</span>int <span class="token assign-left variable">i</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span><span class="token number">3</span><span class="token punctuation">;</span>i++<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        scanf<span class="token punctuation">(</span><span class="token string">"%d"</span>,<span class="token operator">&amp;</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span>        for<span class="token punctuation">(</span>int <span class="token assign-left variable">j</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;=</span>m<span class="token punctuation">;</span>j++<span class="token punctuation">)</span> scanf<span class="token punctuation">(</span><span class="token string">"%d"</span>,<span class="token operator">&amp;</span>x<span class="token punctuation">)</span>,last<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">=</span>i<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    //将每一个目标与初始柱打上标记    for<span class="token punctuation">(</span>int <span class="token assign-left variable">i</span><span class="token operator">=</span>n<span class="token punctuation">;</span>i<span class="token operator">&gt;=</span><span class="token number">1</span><span class="token punctuation">;</span>i--<span class="token punctuation">)</span> dfs<span class="token punctuation">(</span>i,last<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    //第i个要到目标柱那里去。    printf<span class="token punctuation">(</span><span class="token string">"%d"</span>,ans<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token builtin class-name">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Bfs拓扑序列</title>
      <link href="/2022/04/06/bfs-tuo-bu-xu-lie/"/>
      <url>/2022/04/06/bfs-tuo-bu-xu-lie/</url>
      
        <content type="html"><![CDATA[<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">//拓扑排序 BFS<span class="token comment">#include &lt;cstring&gt;</span><span class="token comment">#include &lt;iostream&gt;</span><span class="token comment">#include &lt;algorithm&gt;</span>using namespace std<span class="token punctuation">;</span>const int N <span class="token operator">=</span> <span class="token number">100010</span><span class="token punctuation">;</span>int n, m<span class="token punctuation">;</span>int h<span class="token punctuation">[</span>N<span class="token punctuation">]</span>, e<span class="token punctuation">[</span>N<span class="token punctuation">]</span>, ne<span class="token punctuation">[</span>N<span class="token punctuation">]</span>, idx<span class="token punctuation">;</span>int d<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span>//存入度int q<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span>//队列void add<span class="token punctuation">(</span>int a, int b<span class="token punctuation">)</span><span class="token punctuation">{</span>    e<span class="token punctuation">[</span>idx<span class="token punctuation">]</span> <span class="token operator">=</span> b, ne<span class="token punctuation">[</span>idx<span class="token punctuation">]</span> <span class="token operator">=</span> h<span class="token punctuation">[</span>a<span class="token punctuation">]</span>, h<span class="token punctuation">[</span>a<span class="token punctuation">]</span> <span class="token operator">=</span> idx ++ <span class="token punctuation">;</span><span class="token punctuation">}</span>bool <span class="token function-name function">topsort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    int hh <span class="token operator">=</span> <span class="token number">0</span>, tt <span class="token operator">=</span> -1<span class="token punctuation">;</span>    //将入度为0的点插入队列    <span class="token keyword">for</span> <span class="token punctuation">(</span>int i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i ++ <span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>d<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>            q<span class="token punctuation">[</span> ++ tt<span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>hh <span class="token operator">&lt;=</span> tt<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        int t <span class="token operator">=</span> q<span class="token punctuation">[</span>hh ++ <span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>int i <span class="token operator">=</span> h<span class="token punctuation">[</span>t<span class="token punctuation">]</span><span class="token punctuation">;</span> i <span class="token operator">!=</span> -1<span class="token punctuation">;</span> i <span class="token operator">=</span> ne<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            int j <span class="token operator">=</span> e<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            d<span class="token punctuation">[</span>j<span class="token punctuation">]</span>--<span class="token punctuation">;</span>//删除点t指向点 j 的边            <span class="token keyword">if</span> <span class="token punctuation">(</span>d<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>//如果点 j 的入度为0，就将点 j 入队                q<span class="token punctuation">[</span> ++ tt<span class="token punctuation">]</span> <span class="token operator">=</span> j<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token builtin class-name">return</span> tt <span class="token operator">==</span> n - <span class="token number">1</span><span class="token punctuation">;</span>//所有数都进队列了    //表示如果n个点都入队了话,那么该图为拓扑图,返回true,否则返回false<span class="token punctuation">}</span>int <span class="token function-name function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    scanf<span class="token punctuation">(</span><span class="token string">"%d%d"</span>, <span class="token operator">&amp;</span>n, <span class="token operator">&amp;</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span>    memset<span class="token punctuation">(</span>h, -1, sizeof h<span class="token punctuation">)</span><span class="token punctuation">;</span>    //如果程序时间溢出，就是没有加上这一句    <span class="token keyword">for</span> <span class="token punctuation">(</span>int i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> m<span class="token punctuation">;</span> i ++ <span class="token punctuation">)</span>    <span class="token punctuation">{</span>        int a, b<span class="token punctuation">;</span>        scanf<span class="token punctuation">(</span><span class="token string">"%d%d"</span>, <span class="token operator">&amp;</span>a, <span class="token operator">&amp;</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>        add<span class="token punctuation">(</span>a, b<span class="token punctuation">)</span><span class="token punctuation">;</span>        //因为是a指向b,所以b点的入度要加1        d<span class="token punctuation">[</span>b<span class="token punctuation">]</span> ++ <span class="token punctuation">;</span>//更新入度    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>topsort<span class="token punctuation">(</span><span class="token punctuation">))</span> puts<span class="token punctuation">(</span><span class="token string">"-1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">else</span>    <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>int i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i ++ <span class="token punctuation">)</span> printf<span class="token punctuation">(</span><span class="token string">"%d "</span>, q<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        //经上方循环可以发现队列中的点的次序就是拓扑序列        puts<span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token builtin class-name">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>蓝桥杯分考场</title>
      <link href="/2022/04/06/lan-qiao-bei-fen-kao-chang/"/>
      <url>/2022/04/06/lan-qiao-bei-fen-kao-chang/</url>
      
        <content type="html"><![CDATA[<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">n个人参加某项特殊考试。为了公平，要求任何两个认识的人不能分在同一个考场。求最少需要分几个考场才能满足条件。输入格式第一行，一个整数n<span class="token punctuation">(</span><span class="token operator"><span class="token file-descriptor important">1</span>&lt;</span>n<span class="token operator">&lt;</span><span class="token number">100</span><span class="token punctuation">)</span>，表示参加考试的人数。第二行，一个整数m，表示接下来有m行数据以下m行每行的格式为：两个整数a，b，用空格分开 <span class="token punctuation">(</span><span class="token operator"><span class="token file-descriptor important">1</span>&lt;</span><span class="token operator">=</span>a,b<span class="token operator">&lt;=</span>n<span class="token punctuation">)</span>  表示第a个人与第b个人认识（编号从1开始）。 输出格式一行一个整数，表示最少分几个考场。输入样例 复制<span class="token number">5</span><span class="token number">8</span><span class="token number">1</span> <span class="token number">2</span><span class="token number">1</span> <span class="token number">3</span><span class="token number">1</span> <span class="token number">4</span><span class="token number">2</span> <span class="token number">3</span><span class="token number">2</span> <span class="token number">4</span><span class="token number">2</span> <span class="token number">5</span><span class="token number">3</span> <span class="token number">4</span><span class="token number">4</span> <span class="token number">5</span>输出样例 复制<span class="token number">4</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-bash'" data-language="bash'"><code class="language-bash'">//首先把问题分解成子问题进行选择使得能够一步一步不漏的解决问题 //其次确定结束条件，根据结束条件确定递归参数，状态的表示 //最后根据题意确定约束条件//再判断是否有重复的解进行剪枝 //子问题：对第一个人，如果第一个考场没有认识的人，就把这个人放入考场，如果有认识的人就放入第二个考场//结束条件：当递归到最后一个人时结束//约束条件：当前考场数不能大于最小方案数 #include&lt;bits/stdc++.h&gt;using namespace std;int a[110][110];int v[110][110];//用于表示第i个考场的第j个人是谁int n,m;int cnt=0;//分的考场数int ans=100;//最小的考场数 bool check(int u,int b){//第u个人，第b个考场 for(int i=1;i&lt;=n;i++){if(a[v[b][i]][u]==1)return false; }return true;}void dfs(int u){if(u&gt;n){ans=min(ans,cnt); return;}if(cnt&gt;=ans)return;for(int i=1;i&lt;=cnt;i++){if(check(u,i)){v[i][u]=u;//如果第一个考场没有认识的人，就把这个人放入考场dfs(u+1);v[i][u]=0;}}cnt++;  v[cnt][u]=u;//如果有认识的人就放入第二个考场      dfs(u+1);     v[cnt][u]=0;     cnt--;     //return;}int main(){cin&gt;&gt;n;cin&gt;&gt;m;for(int i=1;i&lt;=m;i++){a[i][i]=1;}for(int i=1;i&lt;=m;i++){int c,b;cin&gt;&gt;c&gt;&gt;b;a[c][b]=a[b][c]=1;}dfs(1);cout&lt;&lt;ans&lt;&lt;endl;return 0;} <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#include &lt;bits/stdc++.h&gt;</span>using namespace std<span class="token punctuation">;</span>const int <span class="token assign-left variable">N</span><span class="token operator">=</span><span class="token number">105</span><span class="token punctuation">;</span>int n,m<span class="token punctuation">;</span>//n名学生  m种关系int a<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span>//用于表示任意两名同学间的联系int f<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span>//用于表示第i个房间的第j个人是谁 int c<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span>//用于记录当前房间有多少人 int <span class="token assign-left variable">ans</span><span class="token operator">=</span>N<span class="token punctuation">;</span>//ans为所需最少房间数 ，开始时将其标记成较大数（人数最多100人）void dfs<span class="token punctuation">(</span>int x,int <span class="token function">sum</span><span class="token punctuation">)</span><span class="token punctuation">{</span>if<span class="token punctuation">(</span>sum<span class="token operator">&gt;=</span>ans<span class="token punctuation">)</span>//剪枝，很关键，能节省大量时间，ans开始标记成较大数对此语句无影响 <span class="token punctuation">{</span><span class="token builtin class-name">return</span><span class="token punctuation">;</span><span class="token punctuation">}</span>if<span class="token punctuation">(</span>x<span class="token operator">==</span>n+1<span class="token punctuation">)</span>//所有同学安排好房间了<span class="token punctuation">{</span><span class="token assign-left variable">ans</span><span class="token operator">=</span>min<span class="token punctuation">(</span>ans,sum<span class="token punctuation">)</span><span class="token punctuation">;</span>//判断已有的ans和当前sum谁更小 <span class="token builtin class-name">return</span><span class="token punctuation">;</span><span class="token punctuation">}</span> for<span class="token punctuation">(</span>int <span class="token assign-left variable">i</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>sum<span class="token punctuation">;</span>i++<span class="token punctuation">)</span><span class="token punctuation">{</span>int <span class="token assign-left variable">len</span><span class="token operator">=</span>c<span class="token punctuation">[</span>i<span class="token punctuation">]</span>,k<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>//len和c<span class="token punctuation">[</span>i<span class="token punctuation">]</span>为当前房间人数 for<span class="token punctuation">(</span>int <span class="token assign-left variable">j</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;=</span>c<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>j++<span class="token punctuation">)</span><span class="token punctuation">{</span>if<span class="token punctuation">(</span><span class="token operator">!</span>a<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>//不认识，k就++ k++<span class="token punctuation">;</span><span class="token punctuation">}</span>if<span class="token punctuation">(</span>k<span class="token operator">==</span>len<span class="token punctuation">)</span>//当前房间所有人都不认识x时为true，只要有一个人认识x就会有k<span class="token operator">&lt;</span>len <span class="token punctuation">{</span>f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>++c<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">=</span>x<span class="token punctuation">;</span>//房间i的人数c<span class="token punctuation">[</span>i<span class="token punctuation">]</span>++，标号为x号学生 dfs<span class="token punctuation">(</span>x+1,sum<span class="token punctuation">)</span><span class="token punctuation">;</span>//继续深搜，判断下一个学生 ，房间数不用增加 --c<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span> //回溯回来，要把当前所在房间数减一<span class="token punctuation">}</span><span class="token punctuation">}</span>sum++<span class="token punctuation">;</span>//当前同学没有房间能去，新开一个房间 f<span class="token punctuation">[</span>sum<span class="token punctuation">]</span><span class="token punctuation">[</span>++c<span class="token punctuation">[</span>sum<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">=</span>x<span class="token punctuation">;</span>//房间sum的第c<span class="token punctuation">[</span>sum<span class="token punctuation">]</span>为x,c<span class="token punctuation">[</span>sum<span class="token punctuation">]</span>由0变1dfs<span class="token punctuation">(</span>x+1,sum<span class="token punctuation">)</span><span class="token punctuation">;</span>//继续深搜，判断下一个学生，sum是已经增加1的房间数 --c<span class="token punctuation">[</span>sum<span class="token punctuation">]</span><span class="token punctuation">;</span> //回溯回来，要把当前所在房间数减一<span class="token punctuation">}</span>int <span class="token function-name function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>cin<span class="token operator">&gt;&gt;</span>n<span class="token operator">&gt;&gt;</span>m<span class="token punctuation">;</span>//n名学生  m种认识状态 for<span class="token punctuation">(</span>int <span class="token assign-left variable">i</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>m<span class="token punctuation">;</span>i++<span class="token punctuation">)</span><span class="token punctuation">{</span>int x,y<span class="token punctuation">;</span>cin<span class="token operator">&gt;&gt;</span>x<span class="token operator">&gt;&gt;</span>y<span class="token punctuation">;</span>//读入关系 a<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token operator">=</span>a<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">=</span>true<span class="token punctuation">;</span>//x,y互相认识建立联系 <span class="token punctuation">}</span>dfs<span class="token punctuation">(</span><span class="token number">1,0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>//从第一个人，房间数为0开始搜索 cout<span class="token operator">&lt;&lt;</span>ans<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span><span class="token builtin class-name">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#include&lt;bits/stdc++.h&gt;</span>using namespace std<span class="token punctuation">;</span>bool mp<span class="token punctuation">[</span><span class="token number">110</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">110</span><span class="token punctuation">]</span><span class="token punctuation">;</span>int tuan<span class="token punctuation">[</span><span class="token number">110</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">110</span><span class="token punctuation">]</span><span class="token punctuation">;</span>int <span class="token assign-left variable">cnt</span><span class="token operator">=</span><span class="token number">0</span>, <span class="token assign-left variable">ans</span><span class="token operator">=</span>INT_MAX<span class="token punctuation">;</span>int n, m<span class="token punctuation">;</span>bool check<span class="token punctuation">(</span>int p, int b<span class="token punctuation">)</span><span class="token punctuation">{</span>int <span class="token assign-left variable">sz</span><span class="token operator">=</span>tuan<span class="token punctuation">[</span>b<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>for<span class="token punctuation">(</span>int <span class="token assign-left variable">i</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">&lt;=</span>sz<span class="token punctuation">;</span> i++<span class="token punctuation">)</span><span class="token punctuation">{</span>if<span class="token punctuation">(</span><span class="token operator">!</span>mp<span class="token punctuation">[</span>tuan<span class="token punctuation">[</span>b<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token builtin class-name">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token builtin class-name">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">}</span>void dfs<span class="token punctuation">(</span>int p<span class="token punctuation">)</span><span class="token punctuation">{</span>//枚举到第几个学生 if<span class="token punctuation">(</span>p<span class="token operator">==</span>n+1<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token assign-left variable">ans</span><span class="token operator">=</span>min<span class="token punctuation">(</span>ans, cnt<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token builtin class-name">return</span><span class="token punctuation">;</span><span class="token punctuation">}</span>if<span class="token punctuation">(</span>cnt<span class="token operator">&gt;=</span>ans<span class="token punctuation">)</span> <span class="token builtin class-name">return</span><span class="token punctuation">;</span>for<span class="token punctuation">(</span>int <span class="token assign-left variable">i</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">&lt;=</span>cnt<span class="token punctuation">;</span> i++<span class="token punctuation">)</span><span class="token punctuation">{</span>if<span class="token punctuation">(</span>check<span class="token punctuation">(</span>p, i<span class="token punctuation">))</span><span class="token punctuation">{</span>tuan<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>++tuan<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">=</span>p<span class="token punctuation">;</span>dfs<span class="token punctuation">(</span>p+1<span class="token punctuation">)</span><span class="token punctuation">;</span>tuan<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>--<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span>++cnt<span class="token punctuation">;</span>tuan<span class="token punctuation">[</span>cnt<span class="token punctuation">]</span><span class="token punctuation">[</span>++tuan<span class="token punctuation">[</span>cnt<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">=</span>p<span class="token punctuation">;</span>dfs<span class="token punctuation">(</span>p+1<span class="token punctuation">)</span><span class="token punctuation">;</span>tuan<span class="token punctuation">[</span>cnt<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>cnt--<span class="token punctuation">;</span><span class="token builtin class-name">return</span><span class="token punctuation">;</span><span class="token punctuation">}</span>int <span class="token function-name function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>scanf<span class="token punctuation">(</span><span class="token string">"%d%d"</span>, <span class="token operator">&amp;</span>n, <span class="token operator">&amp;</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span>memset<span class="token punctuation">(</span>mp, true, sizeof mp<span class="token punctuation">)</span><span class="token punctuation">;</span>memset<span class="token punctuation">(</span>tuan, <span class="token number">0</span>, sizeof tuan<span class="token punctuation">)</span><span class="token punctuation">;</span>for<span class="token punctuation">(</span>int <span class="token assign-left variable">i</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">&lt;=</span>m<span class="token punctuation">;</span> i++<span class="token punctuation">)</span><span class="token punctuation">{</span>int u, <span class="token function">v</span><span class="token punctuation">;</span>scanf<span class="token punctuation">(</span><span class="token string">"%d%d"</span>, <span class="token operator">&amp;</span>u, <span class="token operator">&amp;</span><span class="token function">v</span><span class="token punctuation">)</span><span class="token punctuation">;</span>mp<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token operator">=</span>mp<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token operator">=</span>false<span class="token punctuation">;</span><span class="token punctuation">}</span>dfs<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>printf<span class="token punctuation">(</span><span class="token string">"%d<span class="token entity" title="\n">\n</span>"</span>, ans<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token builtin class-name">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>组合数学</title>
      <link href="/2022/04/05/zu-he-shu-xue/"/>
      <url>/2022/04/05/zu-he-shu-xue/</url>
      
        <content type="html"><![CDATA[<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">c<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span>c<span class="token punctuation">[</span>i-1<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span>+c<span class="token punctuation">[</span>i-1<span class="token punctuation">]</span><span class="token punctuation">[</span>j-1<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">#include&lt;bits/stdc++.h&gt;</span>using namespace std<span class="token punctuation">;</span>const int <span class="token assign-left variable">N</span><span class="token operator">=</span><span class="token number">3000</span><span class="token punctuation">;</span>int c<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span>void <span class="token function-name function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>for<span class="token punctuation">(</span>int <span class="token assign-left variable">i</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>N<span class="token punctuation">;</span>i++<span class="token punctuation">)</span>for<span class="token punctuation">(</span>int <span class="token assign-left variable">j</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;=</span>i<span class="token punctuation">;</span>j++<span class="token punctuation">)</span><span class="token punctuation">{</span>if<span class="token punctuation">(</span><span class="token operator">!</span>j<span class="token punctuation">)</span>c<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">else</span> c<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span>c<span class="token punctuation">[</span>i-1<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span>+c<span class="token punctuation">[</span>i-1<span class="token punctuation">]</span><span class="token punctuation">[</span>j-1<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span>int <span class="token function-name function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>init<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>cout<span class="token operator">&lt;&lt;</span>c<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span><span class="token builtin class-name">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">首先预处理出所有阶乘取模的余数fact<span class="token punctuation">[</span>N<span class="token punctuation">]</span>，以及所有阶乘取模的逆元infact<span class="token punctuation">[</span>N<span class="token punctuation">]</span>//费马小定理求逆元：inv<span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token operator">=</span>b^<span class="token punctuation">(</span>p-2<span class="token punctuation">)</span>%p//<span class="token punctuation">(</span>a/b<span class="token punctuation">)</span>%p<span class="token operator">=</span><span class="token variable"><span class="token punctuation">((</span>a<span class="token operator">%</span>p<span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span>inv<span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token operator">%</span>p<span class="token punctuation">))</span></span>%p如果取模的数是质数，可以用费马小定理求逆元int qmi<span class="token punctuation">(</span>int a, int k, int p<span class="token punctuation">)</span>    // 快速幂模板<span class="token punctuation">{</span>    int res <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>k<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>k <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">)</span> res <span class="token operator">=</span> <span class="token punctuation">(</span>LL<span class="token punctuation">)</span>res * a % p<span class="token punctuation">;</span>        a <span class="token operator">=</span> <span class="token punctuation">(</span>LL<span class="token punctuation">)</span>a * a % p<span class="token punctuation">;</span>        k <span class="token operator">&gt;&gt;</span><span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token builtin class-name">return</span> res<span class="token punctuation">;</span><span class="token punctuation">}</span>c<span class="token punctuation">(</span>n,m<span class="token punctuation">)</span><span class="token operator">=</span>n<span class="token operator">!</span>/<span class="token punctuation">(</span>m-n<span class="token punctuation">)</span><span class="token operator">!</span>*m<span class="token operator">!</span>// 预处理阶乘的余数和阶乘逆元的余数fact<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> infact<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span>int i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> N<span class="token punctuation">;</span> i ++ <span class="token punctuation">)</span><span class="token punctuation">{</span>    fact<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>LL<span class="token punctuation">)</span>fact<span class="token punctuation">[</span>i - <span class="token number">1</span><span class="token punctuation">]</span> * i % mod<span class="token punctuation">;</span>//阶乘取模的余数    infact<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>LL<span class="token punctuation">)</span>infact<span class="token punctuation">[</span>i - <span class="token number">1</span><span class="token punctuation">]</span> * qmi<span class="token punctuation">(</span>i, mod - <span class="token number">2</span>, mod<span class="token punctuation">)</span> % mod<span class="token punctuation">;</span>//对于阶乘的每个数取模就是阶乘取模的逆元<span class="token punctuation">}</span><span class="token comment">#include&lt;bits/stdc++.h&gt;</span>using namespace std<span class="token punctuation">;</span>typedef long long LL<span class="token punctuation">;</span>const int <span class="token assign-left variable">N</span><span class="token operator">=</span><span class="token number">3000</span><span class="token punctuation">;</span>int fact<span class="token punctuation">[</span>N<span class="token punctuation">]</span>,infact<span class="token punctuation">[</span>N<span class="token punctuation">]</span>,mod<span class="token operator">=</span>1e9+7<span class="token punctuation">;</span>int qmi<span class="token punctuation">(</span>int a, int k, int p<span class="token punctuation">)</span>    // 快速幂模板<span class="token punctuation">{</span>    int res <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>k<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>k <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">)</span> res <span class="token operator">=</span> <span class="token punctuation">(</span>LL<span class="token punctuation">)</span>res * a % p<span class="token punctuation">;</span>        a <span class="token operator">=</span> <span class="token punctuation">(</span>LL<span class="token punctuation">)</span>a * a % p<span class="token punctuation">;</span>        k <span class="token operator">&gt;&gt;</span><span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token builtin class-name">return</span> res<span class="token punctuation">;</span><span class="token punctuation">}</span>int <span class="token function-name function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>// 预处理阶乘的余数和阶乘逆元的余数fact<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> infact<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span>int i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> N<span class="token punctuation">;</span> i ++ <span class="token punctuation">)</span><span class="token punctuation">{</span>    fact<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>LL<span class="token punctuation">)</span>fact<span class="token punctuation">[</span>i - <span class="token number">1</span><span class="token punctuation">]</span> * i % mod<span class="token punctuation">;</span>    infact<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>LL<span class="token punctuation">)</span>infact<span class="token punctuation">[</span>i - <span class="token number">1</span><span class="token punctuation">]</span> * qmi<span class="token punctuation">(</span>i, mod - <span class="token number">2</span>, mod<span class="token punctuation">)</span> % mod<span class="token punctuation">;</span><span class="token punctuation">}</span>//c<span class="token punctuation">(</span>n,m<span class="token punctuation">)</span><span class="token operator">=</span><span class="token punctuation">(</span>LL<span class="token punctuation">)</span>fact<span class="token punctuation">[</span>m<span class="token punctuation">]</span>*infact<span class="token punctuation">[</span>m-n<span class="token punctuation">]</span>*infact<span class="token punctuation">[</span>m<span class="token punctuation">]</span>int <span class="token assign-left variable">a</span><span class="token operator">=</span><span class="token number">5</span>,b<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">;</span>cout<span class="token operator">&lt;&lt;</span><span class="token punctuation">(</span>LL<span class="token punctuation">)</span>fact<span class="token punctuation">[</span>a<span class="token punctuation">]</span>*infact<span class="token punctuation">[</span>a-b<span class="token punctuation">]</span>%mod*infact<span class="token punctuation">[</span>b<span class="token punctuation">]</span>%mod<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span><span class="token builtin class-name">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">//卡特兰数,把排列转化为路径，合法括号问题，给定二叉树叶节点数问题等C<span class="token punctuation">(</span>n,2n<span class="token punctuation">)</span>-C<span class="token punctuation">(</span>n-1,2n<span class="token punctuation">)</span><span class="token operator">=</span><span class="token punctuation">(</span>C<span class="token punctuation">(</span>n,2n<span class="token punctuation">))</span>/<span class="token punctuation">(</span>n+1<span class="token punctuation">)</span><span class="token punctuation">;</span>给定 n个 <span class="token number">0</span>和 n 个 <span class="token number">1</span>，它们将按照某种顺序排成长度为 2n 的序列，求它们能排列成的所有序列中，能够满足任意前缀序列中 <span class="token number">0</span> 的个数都不少于 <span class="token number">1</span> 的个数的序列有多少个。答案对 <span class="token number">10</span>^9+7取模<span class="token comment">#include&lt;bits/stdc++.h&gt;</span>using namespace std<span class="token punctuation">;</span>typedef long long LL<span class="token punctuation">;</span>const int <span class="token assign-left variable">N</span><span class="token operator">=</span><span class="token number">3000</span><span class="token punctuation">;</span>int <span class="token assign-left variable">mod</span><span class="token operator">=</span>1e9+7<span class="token punctuation">;</span>int qmi<span class="token punctuation">(</span>int a,int k,int p<span class="token punctuation">)</span><span class="token punctuation">{</span>int <span class="token assign-left variable">res</span><span class="token operator">=</span><span class="token number">1</span>%p<span class="token punctuation">;</span>while<span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">{</span>if<span class="token punctuation">(</span>k<span class="token operator">&amp;</span><span class="token number">1</span><span class="token punctuation">)</span>res<span class="token operator">=</span><span class="token punctuation">(</span>LL<span class="token punctuation">)</span>res*a%p<span class="token punctuation">;</span><span class="token assign-left variable">a</span><span class="token operator">=</span><span class="token punctuation">(</span>LL<span class="token punctuation">)</span>a*a%p<span class="token punctuation">;</span>k<span class="token operator">&gt;&gt;</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token builtin class-name">return</span> res<span class="token punctuation">;</span><span class="token punctuation">}</span>int fact<span class="token punctuation">[</span>N<span class="token punctuation">]</span>,infact<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span>int <span class="token function-name function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>int n<span class="token punctuation">;</span>cin<span class="token operator">&gt;&gt;</span>n<span class="token punctuation">;</span>fact<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span>infact<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>for<span class="token punctuation">(</span>int <span class="token assign-left variable">i</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>N<span class="token punctuation">;</span>i++<span class="token punctuation">)</span><span class="token punctuation">{</span>fact<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">(</span>LL<span class="token punctuation">)</span>fact<span class="token punctuation">[</span>i-1<span class="token punctuation">]</span>*i%mod<span class="token punctuation">;</span>infact<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">(</span>LL<span class="token punctuation">)</span>infact<span class="token punctuation">[</span>i-1<span class="token punctuation">]</span>*qmi<span class="token punctuation">(</span>i,mod-2,mod<span class="token punctuation">)</span>%mod<span class="token punctuation">;</span><span class="token punctuation">}</span>cout<span class="token operator">&lt;&lt;</span><span class="token punctuation">((</span>LL<span class="token punctuation">)</span>fact<span class="token punctuation">[</span><span class="token number">2</span>*n<span class="token punctuation">]</span>*infact<span class="token punctuation">[</span><span class="token number">2</span>*n-n<span class="token punctuation">]</span>%mod*infact<span class="token punctuation">[</span>n<span class="token punctuation">]</span>%mod<span class="token punctuation">)</span>/<span class="token punctuation">(</span>n+1<span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span><span class="token builtin class-name">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">lucas定理：若p是质数，则对于任意整数 <span class="token number">1</span> <span class="token operator">&lt;=</span> m <span class="token operator">&lt;=</span> n，有：    C<span class="token punctuation">(</span>n, m<span class="token punctuation">)</span> <span class="token operator">=</span> C<span class="token punctuation">(</span>n % p, m % p<span class="token punctuation">)</span> * C<span class="token punctuation">(</span>n / p, m / p<span class="token punctuation">)</span> <span class="token punctuation">(</span>mod p<span class="token punctuation">)</span>int qmi<span class="token punctuation">(</span>int a, int k, int p<span class="token punctuation">)</span>  // 快速幂模板<span class="token punctuation">{</span>    int res <span class="token operator">=</span> <span class="token number">1</span> % p<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>k<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>k <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">)</span> res <span class="token operator">=</span> <span class="token punctuation">(</span>LL<span class="token punctuation">)</span>res * a % p<span class="token punctuation">;</span>        a <span class="token operator">=</span> <span class="token punctuation">(</span>LL<span class="token punctuation">)</span>a * a % p<span class="token punctuation">;</span>        k <span class="token operator">&gt;&gt;</span><span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token builtin class-name">return</span> res<span class="token punctuation">;</span><span class="token punctuation">}</span>int C<span class="token punctuation">(</span>int a, int b, int p<span class="token punctuation">)</span>  // 通过定理求组合数C<span class="token punctuation">(</span>a, b<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>a <span class="token operator">&lt;</span> b<span class="token punctuation">)</span> <span class="token builtin class-name">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    LL x <span class="token operator">=</span> <span class="token number">1</span>, y <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>  // x是分子，y是分母    <span class="token keyword">for</span> <span class="token punctuation">(</span>int i <span class="token operator">=</span> a, j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> b<span class="token punctuation">;</span> i --, j ++ <span class="token punctuation">)</span>    <span class="token punctuation">{</span>        x <span class="token operator">=</span> <span class="token punctuation">(</span>LL<span class="token punctuation">)</span>x * i % p<span class="token punctuation">;</span>        y <span class="token operator">=</span> <span class="token punctuation">(</span>LL<span class="token punctuation">)</span> y * j % p<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token builtin class-name">return</span> x * <span class="token punctuation">(</span>LL<span class="token punctuation">)</span>qmi<span class="token punctuation">(</span>y, p - <span class="token number">2</span>, p<span class="token punctuation">)</span> % p<span class="token punctuation">;</span><span class="token punctuation">}</span>int lucas<span class="token punctuation">(</span>LL a, LL b, int p<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>a <span class="token operator">&lt;</span> p <span class="token operator">&amp;&amp;</span> b <span class="token operator">&lt;</span> p<span class="token punctuation">)</span> <span class="token builtin class-name">return</span> C<span class="token punctuation">(</span>a, b, p<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token builtin class-name">return</span> <span class="token punctuation">(</span>LL<span class="token punctuation">)</span>C<span class="token punctuation">(</span>a % p, b % p, p<span class="token punctuation">)</span> * lucas<span class="token punctuation">(</span>a / p, b / p, p<span class="token punctuation">)</span> % p<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>哈希表四平方和</title>
      <link href="/2022/04/04/ha-xi-biao-si-ping-fang-he/"/>
      <url>/2022/04/04/ha-xi-biao-si-ping-fang-he/</url>
      
        <content type="html"><![CDATA[<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">四平方和定理，又称为拉格朗日定理：每个正整数都可以表示为至多4个正整数的平方和。如果把0包括进去，就正好可以表示为4个数的平方和。比如：<span class="token number">5</span> <span class="token operator">=</span> <span class="token number">0</span>^2 + <span class="token number">0</span>^2 + <span class="token number">1</span>^2 + <span class="token number">2</span>^2<span class="token number">7</span> <span class="token operator">=</span> <span class="token number">1</span>^2 + <span class="token number">1</span>^2 + <span class="token number">1</span>^2 + <span class="token number">2</span>^2（^符号表示乘方的意思）对于一个给定的正整数N，可能存在多种平方和的表示法。要求你对4个数排序：0 <span class="token operator">&lt;=</span> a <span class="token operator">&lt;=</span> b <span class="token operator">&lt;=</span> c <span class="token operator">&lt;=</span> d并对所有的可能表示法按 a,b,c,d 为联合主键升序排列，最后输出第一个表示法输入格式输入存在多组测试数据，每组测试数据输入一行为一个正整数N <span class="token punctuation">(</span>N<span class="token operator">&lt;</span><span class="token number">5000000</span><span class="token punctuation">)</span>输出格式对于每组测试数据，要求输出4个非负整数，按从小到大排序，中间用空格分开输入样例 复制<span class="token number">5</span><span class="token number">12</span><span class="token number">773535</span>输出样例 复制<span class="token number">0</span> <span class="token number">0</span> <span class="token number">1</span> <span class="token number">2</span><span class="token number">0</span> <span class="token number">2</span> <span class="token number">2</span> <span class="token number">2</span><span class="token number">1</span> <span class="token number">1</span> <span class="token number">267</span> <span class="token number">838</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#include&lt;bits/stdc++.h&gt;</span>using namespace std<span class="token punctuation">;</span>int <span class="token function-name function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>int f<span class="token punctuation">;</span>unordered_map<span class="token operator">&lt;</span>int ,int<span class="token operator">&gt;</span> map<span class="token punctuation">;</span>int a, b, c, d, n<span class="token punctuation">;</span>//cin <span class="token operator">&gt;&gt;</span> n<span class="token punctuation">;</span>//next://map.clear<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>while<span class="token punctuation">(</span>scanf<span class="token punctuation">(</span><span class="token string">"%d"</span>,<span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token operator">!=</span>EOF<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token assign-left variable">f</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>for<span class="token punctuation">(</span>c <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> c*c <span class="token operator">&lt;=</span> n / <span class="token number">2</span><span class="token punctuation">;</span> c++<span class="token punctuation">)</span> //枚举c,d  for<span class="token punctuation">(</span>d <span class="token operator">=</span> c <span class="token punctuation">;</span> d*d <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> d++<span class="token punctuation">)</span>  <span class="token punctuation">{</span>    if<span class="token punctuation">(</span>map.find<span class="token punctuation">(</span>c*c + d*d<span class="token punctuation">)</span> <span class="token operator">==</span> map.end<span class="token punctuation">(</span><span class="token punctuation">))</span> //若哈希表中没有c,d的平方和这个值，就将它存入，并用c标记map<span class="token punctuation">[</span>c*c + d*d<span class="token punctuation">]</span> <span class="token operator">=</span> c<span class="token punctuation">;</span>    // 每个平方和就对应一个c值，注意这里的c值可对应多个平方和  <span class="token punctuation">}</span>       //利用c先代替c*C+d*d表示c,d能找到，再求出c，d for<span class="token punctuation">(</span>a <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token number">4</span>*a*a <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> a++<span class="token punctuation">)</span><span class="token punctuation">{</span>    for<span class="token punctuation">(</span>b <span class="token operator">=</span> a<span class="token punctuation">;</span> <span class="token number">3</span>*b*b <span class="token operator">&lt;=</span> n <span class="token punctuation">;</span> b++<span class="token punctuation">)</span>    <span class="token punctuation">{</span>//if<span class="token punctuation">(</span>map.find<span class="token punctuation">(</span>n - a*a - b*b<span class="token punctuation">)</span> <span class="token operator">!=</span> map.end<span class="token punctuation">(</span><span class="token punctuation">))</span> //如果n - 较小的前两项平方和 的值可在哈希表中找到，就将对应的值赋给c//<span class="token punctuation">{</span>// c <span class="token operator">=</span> map<span class="token punctuation">[</span>n - a*a -b*b<span class="token punctuation">]</span><span class="token punctuation">;</span>// d <span class="token operator">=</span> int<span class="token punctuation">(</span>sqrt<span class="token punctuation">(</span>n - a*a - b*b - c*c<span class="token punctuation">)</span> + 1e-3<span class="token punctuation">)</span><span class="token punctuation">;</span> //cout <span class="token operator">&lt;&lt;</span> a <span class="token operator">&lt;&lt;</span> <span class="token string">' '</span> <span class="token operator">&lt;&lt;</span> b <span class="token operator">&lt;&lt;</span> <span class="token string">' '</span> <span class="token operator">&lt;&lt;</span> c <span class="token operator">&lt;&lt;</span> <span class="token string">' '</span> <span class="token operator">&lt;&lt;</span> d <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>//return <span class="token number">0</span><span class="token punctuation">;</span> //跳出两个循环int <span class="token assign-left variable">e</span><span class="token operator">=</span>n-a*a-b*b<span class="token punctuation">;</span>int <span class="token assign-left variable">l</span><span class="token operator">=</span><span class="token number">0</span>,r<span class="token operator">=</span>n<span class="token punctuation">;</span>while<span class="token punctuation">(</span>l<span class="token operator">&lt;</span>r<span class="token punctuation">)</span><span class="token punctuation">{</span>int <span class="token assign-left variable">m</span><span class="token operator">=</span><span class="token punctuation">(</span>l+r<span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token number">1</span><span class="token punctuation">;</span>if<span class="token punctuation">(</span>map<span class="token punctuation">[</span>m<span class="token punctuation">]</span><span class="token operator">&gt;=</span>e<span class="token punctuation">)</span> <span class="token assign-left variable">r</span><span class="token operator">=</span>m<span class="token punctuation">;</span><span class="token keyword">else</span> <span class="token assign-left variable">l</span><span class="token operator">=</span>m+1<span class="token punctuation">;</span><span class="token punctuation">}</span>if<span class="token punctuation">(</span>map<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token operator">==</span>e<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token assign-left variable">c</span><span class="token operator">=</span>map<span class="token punctuation">[</span>e<span class="token punctuation">]</span><span class="token punctuation">;</span>d <span class="token operator">=</span> int<span class="token punctuation">(</span>sqrt<span class="token punctuation">(</span>e- c*c<span class="token punctuation">)</span> + 1e-3<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token assign-left variable">f</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span>if<span class="token punctuation">(</span>f<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span>break<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    if<span class="token punctuation">(</span>f<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span>break<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span>   <span class="token builtin class-name">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>剪邮票Dfs判断连通性</title>
      <link href="/2022/04/04/jian-you-piao-dfs-pan-duan-lian-tong-xing/"/>
      <url>/2022/04/04/jian-you-piao-dfs-pan-duan-lian-tong-xing/</url>
      
        <content type="html"><![CDATA[<p><img src="/2022/04/04/jian-you-piao-dfs-pan-duan-lian-tong-xing/2022-04-04_174445.png" alt="2022-04-04_174445"></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#include&lt;bits/stdc++.h&gt;</span>using namespace std<span class="token punctuation">;</span>int a<span class="token punctuation">[</span><span class="token number">12</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">{</span><span class="token number">0,0</span>,0,0,0,0,0,1,1,1,1,1<span class="token punctuation">}</span><span class="token punctuation">;</span>//因为要求全排列得用一维数组 int <span class="token assign-left variable">cnt</span><span class="token operator">=</span><span class="token number">0</span>,ans<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>//一个计连通数一个计总数 int mp<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span>//状态转移成二维矩阵 int dy<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">{</span><span class="token number">1,0</span>,-1,0<span class="token punctuation">}</span><span class="token punctuation">;</span>int dx<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">{</span><span class="token number">0</span>,-1,0,1<span class="token punctuation">}</span><span class="token punctuation">;</span>void dfs<span class="token punctuation">(</span>int x,int y<span class="token punctuation">)</span><span class="token punctuation">{</span>if<span class="token punctuation">(</span>x<span class="token operator">&gt;</span><span class="token number">2</span><span class="token operator">||</span>x<span class="token operator">&lt;</span><span class="token number">0</span><span class="token operator">||</span>y<span class="token operator">&gt;</span><span class="token number">3</span><span class="token operator">||</span>y<span class="token operator">&lt;</span><span class="token number">0</span><span class="token punctuation">)</span>//边界的判断 <span class="token builtin class-name">return</span><span class="token punctuation">;</span>if<span class="token punctuation">(</span>mp<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span>return<span class="token punctuation">;</span>//结束的条件 <span class="token keyword">else</span> cnt++<span class="token punctuation">;</span>//不等于0就是连通的连通后就加1 if<span class="token punctuation">(</span>cnt<span class="token operator">==</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">{</span>//结束的条件 ans++<span class="token punctuation">;</span><span class="token builtin class-name">return</span><span class="token punctuation">;</span><span class="token punctuation">}</span>mp<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>//防止无穷递归 for<span class="token punctuation">(</span>int <span class="token assign-left variable">i</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">4</span><span class="token punctuation">;</span>i++<span class="token punctuation">)</span><span class="token punctuation">{</span>int<span class="token assign-left variable">ax</span><span class="token operator">=</span>x+dx<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>//必须要设置一个这样的变量因为要恢复因为要从这个点上下左右拓展    int <span class="token assign-left variable">ay</span><span class="token operator">=</span>y+dy<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>dfs<span class="token punctuation">(</span>ax,ay<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">}</span>int <span class="token function-name function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      int px,py<span class="token punctuation">;</span>do<span class="token punctuation">{</span>for<span class="token punctuation">(</span>int <span class="token assign-left variable">i</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">3</span><span class="token punctuation">;</span>i++<span class="token punctuation">)</span>for<span class="token punctuation">(</span>int <span class="token assign-left variable">j</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span><span class="token number">4</span><span class="token punctuation">;</span>j++<span class="token punctuation">)</span><span class="token punctuation">{</span>if<span class="token punctuation">(</span>a<span class="token punctuation">[</span>i*4+j<span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>mp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token assign-left variable">px</span><span class="token operator">=</span>i<span class="token punctuation">;</span>//保存一个点搜索<span class="token assign-left variable">py</span><span class="token operator">=</span>j<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">else</span> mp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span>dfs<span class="token punctuation">(</span>px,py<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token assign-left variable">cnt</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>//状态的恢复 <span class="token punctuation">}</span>while<span class="token punctuation">(</span>next_permutation<span class="token punctuation">(</span>a,a+12<span class="token punctuation">))</span><span class="token punctuation">;</span>cout<span class="token operator">&lt;&lt;</span>ans<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span><span class="token builtin class-name">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>方格填数</title>
      <link href="/2022/04/03/fang-ge-tian-shu/"/>
      <url>/2022/04/03/fang-ge-tian-shu/</url>
      
        <content type="html"><![CDATA[<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">如下的10个格子，填入0~9的数字。要求：连续的两个数字不能相邻。（左右、上下、对角都算相邻）一共有多少种可能的填数方案？<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">//暴力<span class="token comment">#include&lt;bits/stdc++.h&gt;</span>using namespace std<span class="token punctuation">;</span>int <span class="token function-name function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>int <span class="token assign-left variable">ans</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>   int a<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">{</span><span class="token number">0,1</span>,2,3,4,5,6,7,8,9<span class="token punctuation">}</span><span class="token punctuation">;</span>   while<span class="token punctuation">(</span>next_permutation<span class="token punctuation">(</span>a,a+10<span class="token punctuation">))</span><span class="token punctuation">{</span>   if<span class="token punctuation">(</span>abs<span class="token punctuation">(</span>a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>-a<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">!=</span><span class="token number">1</span><span class="token operator">&amp;&amp;</span>abs<span class="token punctuation">(</span>a<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>-a<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">!=</span><span class="token number">1</span><span class="token operator">&amp;&amp;</span>abs<span class="token punctuation">(</span>a<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span>-a<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">!=</span><span class="token number">1</span><span class="token operator">&amp;&amp;</span>   abs<span class="token punctuation">(</span>a<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span>-a<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">!=</span><span class="token number">1</span><span class="token operator">&amp;&amp;</span>abs<span class="token punctuation">(</span>a<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span>-a<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">!=</span><span class="token number">1</span><span class="token operator">&amp;&amp;</span>abs<span class="token punctuation">(</span>a<span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span>-a<span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">!=</span><span class="token number">1</span><span class="token operator">&amp;&amp;</span>abs<span class="token punctuation">(</span>a<span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span>-a<span class="token punctuation">[</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">!=</span><span class="token number">1</span><span class="token operator">&amp;&amp;</span>     abs<span class="token punctuation">(</span>a<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>-a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">!=</span><span class="token number">1</span><span class="token operator">&amp;&amp;</span>abs<span class="token punctuation">(</span>a<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span>-a<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">!=</span><span class="token number">1</span><span class="token operator">&amp;&amp;</span>abs<span class="token punctuation">(</span>a<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span>-a<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">!=</span><span class="token number">1</span><span class="token operator">&amp;&amp;</span>   abs<span class="token punctuation">(</span>a<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span>-a<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">!=</span><span class="token number">1</span><span class="token operator">&amp;&amp;</span>abs<span class="token punctuation">(</span>a<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span>-a<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">!=</span><span class="token number">1</span><span class="token operator">&amp;&amp;</span>abs<span class="token punctuation">(</span>a<span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span>-a<span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">!=</span><span class="token number">1</span><span class="token operator">&amp;&amp;</span>abs<span class="token punctuation">(</span>a<span class="token punctuation">[</span><span class="token number">9</span><span class="token punctuation">]</span>-a<span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">!=</span><span class="token number">1</span><span class="token operator">&amp;&amp;</span>      abs<span class="token punctuation">(</span>a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>-a<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">!=</span><span class="token number">1</span><span class="token operator">&amp;&amp;</span>abs<span class="token punctuation">(</span>a<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>-a<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">!=</span><span class="token number">1</span><span class="token operator">&amp;&amp;</span>abs<span class="token punctuation">(</span>a<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span>-a<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">!=</span><span class="token number">1</span><span class="token operator">&amp;&amp;</span>   abs<span class="token punctuation">(</span>a<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span>-a<span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">!=</span><span class="token number">1</span><span class="token operator">&amp;&amp;</span>abs<span class="token punctuation">(</span>a<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span>-a<span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">!=</span><span class="token number">1</span><span class="token operator">&amp;&amp;</span>abs<span class="token punctuation">(</span>a<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span>-a<span class="token punctuation">[</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">!=</span><span class="token number">1</span><span class="token operator">&amp;&amp;</span>      abs<span class="token punctuation">(</span>a<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span>-a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">!=</span><span class="token number">1</span><span class="token operator">&amp;&amp;</span>abs<span class="token punctuation">(</span>a<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span>-a<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">!=</span><span class="token number">1</span><span class="token operator">&amp;&amp;</span>abs<span class="token punctuation">(</span>a<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span>-a<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">!=</span><span class="token number">1</span><span class="token operator">&amp;&amp;</span>   abs<span class="token punctuation">(</span>a<span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span>-a<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">!=</span><span class="token number">1</span><span class="token operator">&amp;&amp;</span>abs<span class="token punctuation">(</span>a<span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span>-a<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">!=</span><span class="token number">1</span><span class="token operator">&amp;&amp;</span>abs<span class="token punctuation">(</span>a<span class="token punctuation">[</span><span class="token number">9</span><span class="token punctuation">]</span>-a<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">!=</span><span class="token number">1</span><span class="token operator">&amp;&amp;</span>      abs<span class="token punctuation">(</span>a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>-a<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">!=</span><span class="token number">1</span><span class="token operator">&amp;&amp;</span>abs<span class="token punctuation">(</span>a<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>-a<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">!=</span><span class="token number">1</span><span class="token operator">&amp;&amp;</span>abs<span class="token punctuation">(</span>a<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span>-a<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">!=</span><span class="token number">1</span><span class="token operator">&amp;&amp;</span>   abs<span class="token punctuation">(</span>a<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span>-a<span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">!=</span><span class="token number">1</span><span class="token operator">&amp;&amp;</span>abs<span class="token punctuation">(</span>a<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span>-a<span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">!=</span><span class="token number">1</span><span class="token operator">&amp;&amp;</span>abs<span class="token punctuation">(</span>a<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span>-a<span class="token punctuation">[</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">!=</span><span class="token number">1</span><span class="token operator">&amp;&amp;</span>         abs<span class="token punctuation">(</span>a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>-a<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">!=</span><span class="token number">1</span><span class="token operator">&amp;&amp;</span>abs<span class="token punctuation">(</span>a<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>-a<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">!=</span><span class="token number">1</span><span class="token operator">&amp;&amp;</span>abs<span class="token punctuation">(</span>a<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span>-a<span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">!=</span><span class="token number">1</span><span class="token operator">&amp;&amp;</span>   abs<span class="token punctuation">(</span>a<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span>-a<span class="token punctuation">[</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">!=</span><span class="token number">1</span>   <span class="token punctuation">)</span>   ans++<span class="token punctuation">;</span>   <span class="token punctuation">}</span>   cout<span class="token operator">&lt;&lt;</span>ans<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>   <span class="token builtin class-name">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">//递归<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>日期问题</title>
      <link href="/2022/04/03/ri-qi-wen-ti/"/>
      <url>/2022/04/03/ri-qi-wen-ti/</url>
      
        <content type="html"><![CDATA[<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">小明正在整理一批历史文献。这些历史文献中出现了很多日期。小明知道这些日期都在1960年1月1日至2059年12月31日。令小明头疼的是，这些日期采用的格式非常不统一，有采用年/月/日的，有采用月/日/年的，还有采用日/月/年的。更加麻烦的是，年份也都省略了前两位，使得文献上的一个日期，存在很多可能的日期与其对应。  比如02/03/04，可能是2002年03月04日、2004年02月03日或2004年03月02日。  给出一个文献上的日期，你能帮助小明判断有哪些可能的日期对其对应吗？输入格式一个日期，格式是<span class="token string">"AA/BB/CC"</span>。  <span class="token punctuation">(</span><span class="token number">0</span> <span class="token operator">&lt;=</span> A, B, C <span class="token operator">&lt;=</span> <span class="token number">9</span><span class="token punctuation">)</span>  输出格式输出若干个不相同的日期，每个日期一行，格式是<span class="token string">"yyyy-MM-dd"</span>。多个日期按从早到晚排列。  输入样例 复制02/03/04输出样例 复制<span class="token number">2002</span>-03-04<span class="token number">2004</span>-02-03<span class="token number">2004</span>-03-02<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-bash'" data-language="bash'"><code class="language-bash'">#include&lt;iostream&gt;#include&lt;algorithm&gt;using namespace std;int day[2][13]={{0,31,28,31,30,31,30,31,31,30,31,30,31},{0,31,29,31,30,31,30,31,31,30,31,30,31}};int f(int y)//判断闰年 {if(y%4==0&amp;&amp;y%100!=0||y%400==0) return 1;return 0;}int ans(int y,int m,int d)//加年份 {if(y&lt;60) y+=2000;else y+=1900;if(m&gt;12) return 0;if(m==0) return 0;//月份和天数不能为0 if(d&lt;=day[f(y)][m]&amp;&amp;d&gt;0) return y*10000+m*100+d;return 0;}int main(){int y,m,d;scanf("%d/%d/%d",&amp;y,&amp;m,&amp;d);int a[4],t=0;if(ans(y,m,d)!=0)a[t++]=ans(y,m,d);if(ans(d,y,m)!=0)a[t++]=ans(d,y,m);if(ans(d,m,y)!=0)a[t++]=ans(d,m,y);sort(a,a+t);int t1=0;for(int i=0;i&lt;t;i++){if(a[i]==t1) continue;//相同日期输出一次 continue结束本次循环 printf("%d-%02d-%02d\n",a[i]/10000,a[i]%10000/100,a[i]%100);t1=a[i];}return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>承压计算</title>
      <link href="/2022/04/03/cheng-ya-ji-suan/"/>
      <url>/2022/04/03/cheng-ya-ji-suan/</url>
      
        <content type="html"><![CDATA[<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">X星球的高科技实验室中整齐地堆放着某批珍贵金属原料。每块金属原料的外形、尺寸完全一致，但重量不同。金属材料被严格地堆放成金字塔形。其中的数字代表金属块的重量（计量单位较大）。（参考输入中的金字塔）最下一层的X代表30台极高精度的电子秤。假设每块原料的重量都十分精确地平均落在下方的两个金属块上，最后，所有的金属块的重量都严格精确地平分落在最底层的电子秤上。电子秤的计量单位很小，所以显示的数字很大。工作人员发现，其中读数最小的电子秤的示数为：2086458231请你推算出：读数最大的电子秤的示数为多少？输入格式本题无输入                             <span class="token number">7</span>                             <span class="token number">5</span> <span class="token number">8</span>                            <span class="token number">7</span> <span class="token number">8</span> <span class="token number">8</span>                           <span class="token number">9</span> <span class="token number">2</span> <span class="token number">7</span> <span class="token number">2</span>                          <span class="token number">8</span> <span class="token number">1</span> <span class="token number">4</span> <span class="token number">9</span> <span class="token number">1</span>                         <span class="token number">8</span> <span class="token number">1</span> <span class="token number">8</span> <span class="token number">8</span> <span class="token number">4</span> <span class="token number">1</span>                        <span class="token number">7</span> <span class="token number">9</span> <span class="token number">6</span> <span class="token number">1</span> <span class="token number">4</span> <span class="token number">5</span> <span class="token number">4</span>                       <span class="token number">5</span> <span class="token number">6</span> <span class="token number">5</span> <span class="token number">5</span> <span class="token number">6</span> <span class="token number">9</span> <span class="token number">5</span> <span class="token number">6</span>                      <span class="token number">5</span> <span class="token number">5</span> <span class="token number">4</span> <span class="token number">7</span> <span class="token number">9</span> <span class="token number">3</span> <span class="token number">5</span> <span class="token number">5</span> <span class="token number">1</span>                     <span class="token number">7</span> <span class="token number">5</span> <span class="token number">7</span> <span class="token number">9</span> <span class="token number">7</span> <span class="token number">4</span> <span class="token number">7</span> <span class="token number">3</span> <span class="token number">3</span> <span class="token number">1</span>                    <span class="token number">4</span> <span class="token number">6</span> <span class="token number">4</span> <span class="token number">5</span> <span class="token number">5</span> <span class="token number">8</span> <span class="token number">8</span> <span class="token number">3</span> <span class="token number">2</span> <span class="token number">4</span> <span class="token number">3</span>                   <span class="token number">1</span> <span class="token number">1</span> <span class="token number">3</span> <span class="token number">3</span> <span class="token number">1</span> <span class="token number">6</span> <span class="token number">6</span> <span class="token number">5</span> <span class="token number">5</span> <span class="token number">4</span> <span class="token number">4</span> <span class="token number">2</span>                  <span class="token number">9</span> <span class="token number">9</span> <span class="token number">9</span> <span class="token number">2</span> <span class="token number">1</span> <span class="token number">9</span> <span class="token number">1</span> <span class="token number">9</span> <span class="token number">2</span> <span class="token number">9</span> <span class="token number">5</span> <span class="token number">7</span> <span class="token number">9</span>                 <span class="token number">4</span> <span class="token number">3</span> <span class="token number">3</span> <span class="token number">7</span> <span class="token number">7</span> <span class="token number">9</span> <span class="token number">3</span> <span class="token number">6</span> <span class="token number">1</span> <span class="token number">3</span> <span class="token number">8</span> <span class="token number">8</span> <span class="token number">3</span> <span class="token number">7</span>                <span class="token number">3</span> <span class="token number">6</span> <span class="token number">8</span> <span class="token number">1</span> <span class="token number">5</span> <span class="token number">3</span> <span class="token number">9</span> <span class="token number">5</span> <span class="token number">8</span> <span class="token number">3</span> <span class="token number">8</span> <span class="token number">1</span> <span class="token number">8</span> <span class="token number">3</span> <span class="token number">3</span>               <span class="token number">8</span> <span class="token number">3</span> <span class="token number">2</span> <span class="token number">3</span> <span class="token number">3</span> <span class="token number">5</span> <span class="token number">5</span> <span class="token number">8</span> <span class="token number">5</span> <span class="token number">4</span> <span class="token number">2</span> <span class="token number">8</span> <span class="token number">6</span> <span class="token number">7</span> <span class="token number">6</span> <span class="token number">9</span>              <span class="token number">8</span> <span class="token number">1</span> <span class="token number">8</span> <span class="token number">1</span> <span class="token number">8</span> <span class="token number">4</span> <span class="token number">6</span> <span class="token number">2</span> <span class="token number">2</span> <span class="token number">1</span> <span class="token number">7</span> <span class="token number">9</span> <span class="token number">4</span> <span class="token number">2</span> <span class="token number">3</span> <span class="token number">3</span> <span class="token number">4</span>             <span class="token number">2</span> <span class="token number">8</span> <span class="token number">4</span> <span class="token number">2</span> <span class="token number">2</span> <span class="token number">9</span> <span class="token number">9</span> <span class="token number">2</span> <span class="token number">8</span> <span class="token number">3</span> <span class="token number">4</span> <span class="token number">9</span> <span class="token number">6</span> <span class="token number">3</span> <span class="token number">9</span> <span class="token number">4</span> <span class="token number">6</span> <span class="token number">9</span>            <span class="token number">7</span> <span class="token number">9</span> <span class="token number">7</span> <span class="token number">4</span> <span class="token number">9</span> <span class="token number">7</span> <span class="token number">6</span> <span class="token number">6</span> <span class="token number">2</span> <span class="token number">8</span> <span class="token number">9</span> <span class="token number">4</span> <span class="token number">1</span> <span class="token number">8</span> <span class="token number">1</span> <span class="token number">7</span> <span class="token number">2</span> <span class="token number">1</span> <span class="token number">6</span>           <span class="token number">9</span> <span class="token number">2</span> <span class="token number">8</span> <span class="token number">6</span> <span class="token number">4</span> <span class="token number">2</span> <span class="token number">7</span> <span class="token number">9</span> <span class="token number">5</span> <span class="token number">4</span> <span class="token number">1</span> <span class="token number">2</span> <span class="token number">5</span> <span class="token number">1</span> <span class="token number">7</span> <span class="token number">3</span> <span class="token number">9</span> <span class="token number">8</span> <span class="token number">3</span> <span class="token number">3</span>          <span class="token number">5</span> <span class="token number">2</span> <span class="token number">1</span> <span class="token number">6</span> <span class="token number">7</span> <span class="token number">9</span> <span class="token number">3</span> <span class="token number">2</span> <span class="token number">8</span> <span class="token number">9</span> <span class="token number">5</span> <span class="token number">5</span> <span class="token number">6</span> <span class="token number">6</span> <span class="token number">6</span> <span class="token number">2</span> <span class="token number">1</span> <span class="token number">8</span> <span class="token number">7</span> <span class="token number">9</span> <span class="token number">9</span>         <span class="token number">6</span> <span class="token number">7</span> <span class="token number">1</span> <span class="token number">8</span> <span class="token number">8</span> <span class="token number">7</span> <span class="token number">5</span> <span class="token number">3</span> <span class="token number">6</span> <span class="token number">5</span> <span class="token number">4</span> <span class="token number">7</span> <span class="token number">3</span> <span class="token number">4</span> <span class="token number">6</span> <span class="token number">7</span> <span class="token number">8</span> <span class="token number">1</span> <span class="token number">3</span> <span class="token number">2</span> <span class="token number">7</span> <span class="token number">4</span>        <span class="token number">2</span> <span class="token number">2</span> <span class="token number">6</span> <span class="token number">3</span> <span class="token number">5</span> <span class="token number">3</span> <span class="token number">4</span> <span class="token number">9</span> <span class="token number">2</span> <span class="token number">4</span> <span class="token number">5</span> <span class="token number">7</span> <span class="token number">6</span> <span class="token number">6</span> <span class="token number">3</span> <span class="token number">2</span> <span class="token number">7</span> <span class="token number">2</span> <span class="token number">4</span> <span class="token number">8</span> <span class="token number">5</span> <span class="token number">5</span> <span class="token number">4</span>       <span class="token number">7</span> <span class="token number">4</span> <span class="token number">4</span> <span class="token number">5</span> <span class="token number">8</span> <span class="token number">3</span> <span class="token number">3</span> <span class="token number">8</span> <span class="token number">1</span> <span class="token number">8</span> <span class="token number">6</span> <span class="token number">3</span> <span class="token number">2</span> <span class="token number">1</span> <span class="token number">6</span> <span class="token number">2</span> <span class="token number">6</span> <span class="token number">4</span> <span class="token number">6</span> <span class="token number">3</span> <span class="token number">8</span> <span class="token number">2</span> <span class="token number">9</span> <span class="token number">6</span>      <span class="token number">1</span> <span class="token number">2</span> <span class="token number">4</span> <span class="token number">1</span> <span class="token number">3</span> <span class="token number">3</span> <span class="token number">5</span> <span class="token number">3</span> <span class="token number">4</span> <span class="token number">9</span> <span class="token number">6</span> <span class="token number">3</span> <span class="token number">8</span> <span class="token number">6</span> <span class="token number">5</span> <span class="token number">9</span> <span class="token number">1</span> <span class="token number">5</span> <span class="token number">3</span> <span class="token number">2</span> <span class="token number">6</span> <span class="token number">8</span> <span class="token number">8</span> <span class="token number">5</span> <span class="token number">3</span>     <span class="token number">2</span> <span class="token number">2</span> <span class="token number">7</span> <span class="token number">9</span> <span class="token number">3</span> <span class="token number">3</span> <span class="token number">2</span> <span class="token number">8</span> <span class="token number">6</span> <span class="token number">9</span> <span class="token number">8</span> <span class="token number">4</span> <span class="token number">4</span> <span class="token number">9</span> <span class="token number">5</span> <span class="token number">8</span> <span class="token number">2</span> <span class="token number">6</span> <span class="token number">3</span> <span class="token number">4</span> <span class="token number">8</span> <span class="token number">4</span> <span class="token number">9</span> <span class="token number">3</span> <span class="token number">8</span> <span class="token number">8</span>    <span class="token number">7</span> <span class="token number">7</span> <span class="token number">7</span> <span class="token number">9</span> <span class="token number">7</span> <span class="token number">5</span> <span class="token number">2</span> <span class="token number">7</span> <span class="token number">9</span> <span class="token number">2</span> <span class="token number">5</span> <span class="token number">1</span> <span class="token number">9</span> <span class="token number">2</span> <span class="token number">6</span> <span class="token number">5</span> <span class="token number">3</span> <span class="token number">9</span> <span class="token number">3</span> <span class="token number">5</span> <span class="token number">7</span> <span class="token number">3</span> <span class="token number">5</span> <span class="token number">4</span> <span class="token number">2</span> <span class="token number">8</span> <span class="token number">9</span>   <span class="token number">7</span> <span class="token number">7</span> <span class="token number">6</span> <span class="token number">6</span> <span class="token number">8</span> <span class="token number">7</span> <span class="token number">5</span> <span class="token number">5</span> <span class="token number">8</span> <span class="token number">2</span> <span class="token number">4</span> <span class="token number">7</span> <span class="token number">7</span> <span class="token number">4</span> <span class="token number">7</span> <span class="token number">2</span> <span class="token number">6</span> <span class="token number">9</span> <span class="token number">2</span> <span class="token number">1</span> <span class="token number">8</span> <span class="token number">2</span> <span class="token number">9</span> <span class="token number">8</span> <span class="token number">5</span> <span class="token number">7</span> <span class="token number">3</span> <span class="token number">6</span>  <span class="token number">5</span> <span class="token number">9</span> <span class="token number">4</span> <span class="token number">5</span> <span class="token number">5</span> <span class="token number">7</span> <span class="token number">5</span> <span class="token number">5</span> <span class="token number">6</span> <span class="token number">3</span> <span class="token number">5</span> <span class="token number">3</span> <span class="token number">9</span> <span class="token number">5</span> <span class="token number">8</span> <span class="token number">9</span> <span class="token number">5</span> <span class="token number">4</span> <span class="token number">1</span> <span class="token number">2</span> <span class="token number">6</span> <span class="token number">1</span> <span class="token number">4</span> <span class="token number">3</span> <span class="token number">5</span> <span class="token number">3</span> <span class="token number">2</span> <span class="token number">4</span> <span class="token number">1</span> X X X X X X X X X X X X X X X X X X X X X X X X X X X X X X输出格式输出一个整数表示答案<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#include&lt;bits/stdc++.h&gt;</span>using namespace std<span class="token punctuation">;</span>const int <span class="token assign-left variable">N</span><span class="token operator">=</span><span class="token number">31</span><span class="token punctuation">;</span>double a<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span>int <span class="token function-name function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>freopen<span class="token punctuation">(</span><span class="token string">"12.txt"</span>,<span class="token string">"r"</span>,stdin<span class="token punctuation">)</span><span class="token punctuation">;</span>for<span class="token punctuation">(</span>int <span class="token assign-left variable">i</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">30</span><span class="token punctuation">;</span>i++<span class="token punctuation">)</span><span class="token punctuation">{</span>//行30层列30层  for<span class="token punctuation">(</span>int <span class="token assign-left variable">j</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;=</span>i<span class="token punctuation">;</span>j++<span class="token punctuation">)</span><span class="token punctuation">{</span>cin<span class="token operator">&gt;&gt;</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span>for<span class="token punctuation">(</span>int <span class="token assign-left variable">i</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">30</span><span class="token punctuation">;</span>i++<span class="token punctuation">)</span>for<span class="token punctuation">(</span>int <span class="token assign-left variable">j</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;=</span>i<span class="token punctuation">;</span>j++<span class="token punctuation">)</span><span class="token punctuation">{</span>if<span class="token punctuation">(</span>j<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">+=</span>a<span class="token punctuation">[</span>i-1<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span>/2.0<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">else</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">+=</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>i-1<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span>+a<span class="token punctuation">[</span>i-1<span class="token punctuation">]</span><span class="token punctuation">[</span>j-1<span class="token punctuation">]</span><span class="token punctuation">)</span>/2.0<span class="token punctuation">;</span><span class="token punctuation">}</span>//for<span class="token punctuation">(</span>int <span class="token assign-left variable">i</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">31</span><span class="token punctuation">;</span>i++<span class="token punctuation">)</span><span class="token punctuation">{</span>//for<span class="token punctuation">(</span>int <span class="token assign-left variable">j</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;=</span>i<span class="token punctuation">;</span>j++<span class="token punctuation">)</span>//cout<span class="token operator">&lt;&lt;</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">&lt;&lt;</span><span class="token string">"    "</span><span class="token punctuation">;</span>//cout<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>cout<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>//<span class="token punctuation">}</span>double <span class="token assign-left variable">minn</span><span class="token operator">=</span>0x3f3f3f<span class="token punctuation">;</span> double <span class="token assign-left variable">maxx</span><span class="token operator">=</span>-1<span class="token punctuation">;</span>for<span class="token punctuation">(</span>int <span class="token assign-left variable">j</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span><span class="token number">30</span><span class="token punctuation">;</span>j++<span class="token punctuation">)</span><span class="token punctuation">{</span>//29层 //cout<span class="token operator">&lt;&lt;</span>a<span class="token punctuation">[</span><span class="token number">29</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span><span class="token assign-left variable">minn</span><span class="token operator">=</span>min<span class="token punctuation">(</span>minn,a<span class="token punctuation">[</span><span class="token number">29</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token assign-left variable">maxx</span><span class="token operator">=</span>max<span class="token punctuation">(</span>maxx,a<span class="token punctuation">[</span><span class="token number">29</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>//cout<span class="token operator">&lt;&lt;</span>maxx<span class="token operator">&lt;&lt;</span><span class="token string">" "</span><span class="token operator">&lt;&lt;</span>minn<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>cout.setf<span class="token punctuation">(</span>ios_base::fixed<span class="token punctuation">)</span><span class="token punctuation">;</span>cout.precision<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>cout<span class="token operator">&lt;&lt;</span>maxx/minn*2086458231<span class="token punctuation">;</span><span class="token builtin class-name">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>二分模板</title>
      <link href="/2022/04/03/er-fen-mo-ban/"/>
      <url>/2022/04/03/er-fen-mo-ban/</url>
      
        <content type="html"><![CDATA[<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">二分的本质是找到一个分界点，使得该分界点某侧具有一个共有特性，使得可以根据这个分界点跳过数据的处理存在一个数m,使得当i<span class="token operator">&lt;=</span>m时f<span class="token punctuation">(</span>i<span class="token punctuation">)</span>均为真（假）或者当i<span class="token operator">&gt;=</span>m时f（i）均为假（真）根据这个特性找到这个mbool check<span class="token punctuation">(</span>int x<span class="token punctuation">)</span> <span class="token punctuation">{</span>/* <span class="token punctuation">..</span>. */<span class="token punctuation">}</span> // 检查x是否满足某种性质当l<span class="token operator">=</span>m为真时l+r要再加1否则会陷入无限循环// 区间<span class="token punctuation">[</span>l, r<span class="token punctuation">]</span>被划分成<span class="token punctuation">[</span>l, mid<span class="token punctuation">]</span>和<span class="token punctuation">[</span>mid + <span class="token number">1</span>, r<span class="token punctuation">]</span>时使用：int bsearch_1<span class="token punctuation">(</span>int l, int r<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>l <span class="token operator">&lt;</span> r<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        int mid <span class="token operator">=</span> l + r <span class="token operator">&gt;&gt;</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>check<span class="token punctuation">(</span>mid<span class="token punctuation">))</span> r <span class="token operator">=</span> mid<span class="token punctuation">;</span>    // check<span class="token punctuation">(</span><span class="token punctuation">)</span>判断mid是否满足性质        <span class="token keyword">else</span> l <span class="token operator">=</span> mid + <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token builtin class-name">return</span> l<span class="token punctuation">;</span><span class="token punctuation">}</span>// 区间<span class="token punctuation">[</span>l, r<span class="token punctuation">]</span>被划分成<span class="token punctuation">[</span>l, mid - <span class="token number">1</span><span class="token punctuation">]</span>和<span class="token punctuation">[</span>mid, r<span class="token punctuation">]</span>时使用：int bsearch_2<span class="token punctuation">(</span>int l, int r<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>l <span class="token operator">&lt;</span> r<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        int mid <span class="token operator">=</span> l + r + <span class="token number">1</span> <span class="token operator">&gt;&gt;</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>check<span class="token punctuation">(</span>mid<span class="token punctuation">))</span> l <span class="token operator">=</span> mid<span class="token punctuation">;</span>        <span class="token keyword">else</span> r <span class="token operator">=</span> mid - <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token builtin class-name">return</span> l<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">bool check<span class="token punctuation">(</span>double x<span class="token punctuation">)</span> <span class="token punctuation">{</span>/* <span class="token punctuation">..</span>. */<span class="token punctuation">}</span> // 检查x是否满足某种性质double bsearch_3<span class="token punctuation">(</span>double l, double r<span class="token punctuation">)</span><span class="token punctuation">{</span>    const double eps <span class="token operator">=</span> 1e-6<span class="token punctuation">;</span>   // eps 表示精度，取决于题目对精度的要求    <span class="token keyword">while</span> <span class="token punctuation">(</span>r - l <span class="token operator">&gt;</span> eps<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        double mid <span class="token operator">=</span> <span class="token punctuation">(</span>l + r<span class="token punctuation">)</span> / <span class="token number">2</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>check<span class="token punctuation">(</span>mid<span class="token punctuation">))</span> r <span class="token operator">=</span> mid<span class="token punctuation">;</span>        <span class="token keyword">else</span> l <span class="token operator">=</span> mid<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token builtin class-name">return</span> l<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">儿童节那天有K位小朋友到小明家做客。小明拿出了珍藏的巧克力招待小朋友们。小明一共有N块巧克力，其中第i块是Hi x Wi的方格组成的长方形。为了公平起见，小明需要从这 N 块巧克力中切出K块巧克力分给小朋友们。切出的巧克力需要满足：<span class="token number">1</span>. 形状是正方形，边长是整数  <span class="token number">2</span>. 大小相同  例如一块6x5的巧克力可以切出6块2x2的巧克力或者2块3x3的巧克力。当然小朋友们都希望得到的巧克力尽可能大，你能帮小Hi计算出最大的边长是多少么？输入格式第一行包含两个整数N和K。<span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&lt;=</span> N, K <span class="token operator">&lt;=</span> <span class="token number">100000</span><span class="token punctuation">)</span>  以下N行每行包含两个整数Hi和Wi。<span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&lt;=</span> Hi, Wi <span class="token operator">&lt;=</span> <span class="token number">100000</span><span class="token punctuation">)</span> 输入保证每位小朋友至少能获得一块1x1的巧克力。   输出格式输出切出的正方形巧克力最大可能的边长。输入样例 复制<span class="token number">2</span> <span class="token number">10</span><span class="token number">6</span> <span class="token number">5</span><span class="token number">5</span> <span class="token number">6</span>输出样例 复制<span class="token number">2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#include&lt;bits/stdc++.h&gt;</span>using namespace std<span class="token punctuation">;</span>int cut<span class="token punctuation">(</span>int h,int w,int s<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token builtin class-name">return</span> <span class="token punctuation">(</span>h/s<span class="token punctuation">)</span>*<span class="token punctuation">(</span>w/s<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>const int <span class="token assign-left variable">N</span><span class="token operator">=</span><span class="token number">100010</span><span class="token punctuation">;</span>//int a<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span>int n,k<span class="token punctuation">;</span>pair<span class="token operator">&lt;</span>int,int<span class="token operator">&gt;</span> b<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span>//bool check<span class="token punctuation">(</span>int m<span class="token punctuation">)</span><span class="token punctuation">{</span>//if<span class="token punctuation">(</span>a<span class="token punctuation">[</span>m<span class="token punctuation">]</span><span class="token operator">&lt;</span>k<span class="token punctuation">)</span>//<span class="token builtin class-name">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>//<span class="token keyword">else</span> //<span class="token builtin class-name">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>//<span class="token punctuation">}</span>bool check<span class="token punctuation">(</span>int m<span class="token punctuation">)</span><span class="token punctuation">{</span>int <span class="token assign-left variable">count</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>for<span class="token punctuation">(</span>int <span class="token assign-left variable">i</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i++<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token assign-left variable">count</span><span class="token operator">+=</span>cut<span class="token punctuation">(</span>b<span class="token punctuation">[</span>i<span class="token punctuation">]</span>.first,b<span class="token punctuation">[</span>i<span class="token punctuation">]</span>.second,m<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>if<span class="token punctuation">(</span>count<span class="token operator">&gt;=</span>k<span class="token punctuation">)</span><span class="token builtin class-name">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token keyword">else</span> <span class="token builtin class-name">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">}</span>int bs<span class="token punctuation">(</span>int l, int r<span class="token punctuation">)</span><span class="token punctuation">{</span>    while<span class="token punctuation">(</span>l<span class="token operator">&lt;</span>r<span class="token punctuation">)</span><span class="token punctuation">{</span>    int <span class="token assign-left variable">m</span><span class="token operator">=</span>l+r+<span class="token operator"><span class="token file-descriptor important">1</span>&gt;&gt;</span><span class="token number">1</span><span class="token punctuation">;</span>    if<span class="token punctuation">(</span>check<span class="token punctuation">(</span>m<span class="token punctuation">))</span>    <span class="token assign-left variable">l</span><span class="token operator">=</span>m<span class="token punctuation">;</span>    <span class="token keyword">else</span>    <span class="token assign-left variable">r</span><span class="token operator">=</span>m-1<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token builtin class-name">return</span> l<span class="token punctuation">;</span><span class="token punctuation">}</span>int <span class="token function-name function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>cin<span class="token operator">&gt;&gt;</span>n<span class="token operator">&gt;&gt;</span>k<span class="token punctuation">;</span>//memset<span class="token punctuation">(</span>a,0,sizeof a<span class="token punctuation">)</span><span class="token punctuation">;</span>for<span class="token punctuation">(</span>int <span class="token assign-left variable">i</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i++<span class="token punctuation">)</span><span class="token punctuation">{</span>int h,w<span class="token punctuation">;</span>cin<span class="token operator">&gt;&gt;</span>h<span class="token operator">&gt;&gt;</span>w<span class="token punctuation">;</span>b<span class="token punctuation">[</span>i<span class="token punctuation">]</span>.first<span class="token operator">=</span>h<span class="token punctuation">;</span>b<span class="token punctuation">[</span>i<span class="token punctuation">]</span>.second<span class="token operator">=</span>w<span class="token punctuation">;</span>//int <span class="token assign-left variable">b</span><span class="token operator">=</span>min<span class="token punctuation">(</span>h,k<span class="token punctuation">)</span><span class="token punctuation">;</span>//for<span class="token punctuation">(</span>int <span class="token assign-left variable">i</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>b<span class="token punctuation">;</span>i++<span class="token punctuation">)</span><span class="token punctuation">{</span>//a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">+=</span>cut<span class="token punctuation">(</span>h,w,i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span>int <span class="token assign-left variable">l</span><span class="token operator">=</span><span class="token number">1</span>,r<span class="token operator">=</span>1e5<span class="token punctuation">;</span>cout<span class="token operator">&lt;&lt;</span>bs<span class="token punctuation">(</span>l,r<span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>//for<span class="token punctuation">(</span>int <span class="token assign-left variable">i</span><span class="token operator">=</span>n<span class="token punctuation">;</span>i<span class="token operator">&gt;=</span><span class="token number">1</span><span class="token punctuation">;</span>i--<span class="token punctuation">)</span><span class="token punctuation">{</span>//if<span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">&gt;=</span>k<span class="token punctuation">)</span>//<span class="token punctuation">{</span>//cout<span class="token operator">&lt;&lt;</span>i<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>//<span class="token builtin class-name">return</span> <span class="token number">0</span><span class="token punctuation">;</span>//<span class="token punctuation">}</span>//<span class="token punctuation">}</span><span class="token builtin class-name">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">数的范围给定一个按照升序排列的长度为n的整数数组，以及 q 个查询。对于每个查询，返回一个元素k的起始位置和终止位置（位置从0开始计数）。如果数组中不存在该元素，则返回“-1 -1”。输入格式第一行包含整数n和q，表示数组长度和询问个数。第二行包含n个整数（均在1~10000范围内），表示完整数组。接下来q行，每行包含一个整数k，表示一个询问元素。输出格式共q行，每行包含两个整数，表示所求元素的起始位置和终止位置。如果数组中不存在该元素，则返回“-1 -1”。数据范围<span class="token number">1</span>≤n≤100000<span class="token number">1</span>≤n≤100000<span class="token number">1</span>≤q≤10000<span class="token number">1</span>≤q≤10000<span class="token number">1</span>≤k≤10000<span class="token number">1</span>≤k≤10000样例输入样例：<span class="token number">6</span> <span class="token number">3</span><span class="token number">1</span> <span class="token number">2</span> <span class="token number">2</span> <span class="token number">3</span> <span class="token number">3</span> <span class="token number">4</span><span class="token number">3</span><span class="token number">4</span><span class="token number">5</span>输出样例：<span class="token number">3</span> <span class="token number">4</span><span class="token number">5</span> <span class="token number">5</span>-1 -1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#include&lt;bits/stdc++.h&gt;</span>using namespace std<span class="token punctuation">;</span>const int <span class="token assign-left variable">N</span><span class="token operator">=</span>1e6+10<span class="token punctuation">;</span>int n,q,a<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span>bool check1<span class="token punctuation">(</span>int m,int k<span class="token punctuation">)</span><span class="token punctuation">{</span>if<span class="token punctuation">(</span>a<span class="token punctuation">[</span>m<span class="token punctuation">]</span><span class="token operator">&gt;=</span>k<span class="token punctuation">)</span>//说明a<span class="token punctuation">[</span>m<span class="token punctuation">]</span>在k右边则m在一定在a<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">=</span>k的x的右边，找最小的x ，使得m点右侧都大于k<span class="token builtin class-name">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token builtin class-name">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">}</span>bool check2<span class="token punctuation">(</span>int m,int k<span class="token punctuation">)</span><span class="token punctuation">{</span>if<span class="token punctuation">(</span>a<span class="token punctuation">[</span>m<span class="token punctuation">]</span><span class="token operator">&lt;=</span>k<span class="token punctuation">)</span>//说明a<span class="token punctuation">[</span>m<span class="token punctuation">]</span>在k左边则m在一定在a<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">=</span>k的x的左边，找最大的x ，使得m点左侧都小于k<span class="token builtin class-name">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token builtin class-name">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">}</span>int bs1<span class="token punctuation">(</span>int l,int r,int k<span class="token punctuation">)</span><span class="token punctuation">{</span>while<span class="token punctuation">(</span>l<span class="token operator">&lt;</span>r<span class="token punctuation">)</span><span class="token punctuation">{</span>int <span class="token assign-left variable">m</span><span class="token operator">=</span><span class="token punctuation">(</span>l+r<span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token number">1</span><span class="token punctuation">;</span>if<span class="token punctuation">(</span>check1<span class="token punctuation">(</span>m,k<span class="token punctuation">))</span><span class="token assign-left variable">r</span><span class="token operator">=</span>m<span class="token punctuation">;</span><span class="token keyword">else</span> <span class="token assign-left variable">l</span><span class="token operator">=</span>m+1<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token builtin class-name">return</span> l<span class="token punctuation">;</span><span class="token punctuation">}</span>int bs2<span class="token punctuation">(</span>int l,int r,int k<span class="token punctuation">)</span><span class="token punctuation">{</span>while<span class="token punctuation">(</span>l<span class="token operator">&lt;</span>r<span class="token punctuation">)</span><span class="token punctuation">{</span>int <span class="token assign-left variable">m</span><span class="token operator">=</span><span class="token punctuation">(</span>l+r+1<span class="token punctuation">)</span><span class="token operator">&gt;&gt;</span><span class="token number">1</span><span class="token punctuation">;</span>if<span class="token punctuation">(</span>check2<span class="token punctuation">(</span>m,k<span class="token punctuation">))</span><span class="token assign-left variable">l</span><span class="token operator">=</span>m<span class="token punctuation">;</span>//当a<span class="token punctuation">[</span>m<span class="token punctuation">]</span>在a<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">=</span>k的左边即m在x的左边 <span class="token keyword">else</span> <span class="token assign-left variable">r</span><span class="token operator">=</span>m-1<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token builtin class-name">return</span> l<span class="token punctuation">;</span><span class="token punctuation">}</span>int <span class="token function-name function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>cin<span class="token operator">&gt;&gt;</span>n<span class="token operator">&gt;&gt;</span>q<span class="token punctuation">;</span>for<span class="token punctuation">(</span>int <span class="token assign-left variable">i</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i++<span class="token punctuation">)</span><span class="token punctuation">{</span>cin<span class="token operator">&gt;&gt;</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span>while<span class="token punctuation">(</span>q--<span class="token punctuation">)</span><span class="token punctuation">{</span>int k<span class="token punctuation">;</span>cin<span class="token operator">&gt;&gt;</span>k<span class="token punctuation">;</span>int s,e<span class="token punctuation">;</span>//起始位置和终止位置 int <span class="token assign-left variable">l</span><span class="token operator">=</span><span class="token number">0</span>,r<span class="token operator">=</span>n-1<span class="token punctuation">;</span> <span class="token assign-left variable">s</span><span class="token operator">=</span>bs1<span class="token punctuation">(</span>l,r,k<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token assign-left variable">e</span><span class="token operator">=</span>bs2<span class="token punctuation">(</span>l,r,k<span class="token punctuation">)</span><span class="token punctuation">;</span>if<span class="token punctuation">(</span>a<span class="token punctuation">[</span>s<span class="token punctuation">]</span><span class="token operator">!=</span>k<span class="token operator">&amp;&amp;</span>a<span class="token punctuation">[</span>e<span class="token punctuation">]</span><span class="token operator">!=</span>k<span class="token punctuation">)</span>cout<span class="token operator">&lt;&lt;</span><span class="token string">"-1 -1"</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span><span class="token keyword">else</span>cout<span class="token operator">&lt;&lt;</span>s<span class="token operator">&lt;&lt;</span><span class="token string">" "</span><span class="token operator">&lt;&lt;</span>e<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token builtin class-name">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> 二分 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ceil,floor,round函数</title>
      <link href="/2022/04/02/ceil-floor-round-han-shu/"/>
      <url>/2022/04/02/ceil-floor-round-han-shu/</url>
      
        <content type="html"><![CDATA[<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#include&lt;bits/stdc++.h&gt;</span>using namespace std<span class="token punctuation">;</span>int <span class="token function-name function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>float <span class="token assign-left variable">a</span><span class="token operator">=</span><span class="token number">5.5</span><span class="token punctuation">;</span>int <span class="token assign-left variable">c</span><span class="token operator">=</span>floor<span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>//向下取整 int <span class="token assign-left variable">d</span><span class="token operator">=</span>ceil<span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>//向上取整 int <span class="token assign-left variable">e</span><span class="token operator">=</span>round<span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>//四舍五入 cout<span class="token operator">&lt;&lt;</span>c<span class="token operator">&lt;&lt;</span><span class="token string">" "</span><span class="token operator">&lt;&lt;</span>d<span class="token operator">&lt;&lt;</span><span class="token string">" "</span><span class="token operator">&lt;&lt;</span>e<span class="token operator">&lt;&lt;</span><span class="token string">" "</span><span class="token operator">&lt;&lt;</span>ceil<span class="token punctuation">(</span>log<span class="token punctuation">(</span>a<span class="token punctuation">)</span>/log<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">))</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span><span class="token builtin class-name">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>购物单--Freopen</title>
      <link href="/2022/04/02/gou-wu-dan-freopen/"/>
      <url>/2022/04/02/gou-wu-dan-freopen/</url>
      
        <content type="html"><![CDATA[<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">小明刚刚找到工作，老板人很好，只是老板夫人很爱购物。老板忙的时候经常让小明帮忙到商场代为购物。小明很厌烦，但又不好推辞。这不，XX大促销又来了！老板夫人开出了长长的购物单，都是有打折优惠的。小明也有个怪癖，不到万不得已，从不刷卡，直接现金搞定。现在小明很心烦，请你帮他计算一下，需要从取款机上取多少现金，才能搞定这次购物。取款机只能提供100元面额的纸币。小明想尽可能少取些现金，够用就行了。你的任务是计算出，小明最少需要取多少现金。输入格式本题无输入，购物单如下，物品名称被隐藏了。****     <span class="token number">180.90</span>       <span class="token number">88</span>折****      <span class="token number">10.25</span>       <span class="token number">65</span>折****      <span class="token number">56.14</span>        <span class="token number">9</span>折****     <span class="token number">104.65</span>        <span class="token number">9</span>折****     <span class="token number">100.30</span>       <span class="token number">88</span>折****     <span class="token number">297.15</span>        半价****      <span class="token number">26.75</span>       <span class="token number">65</span>折****     <span class="token number">130.62</span>        半价****     <span class="token number">240.28</span>       <span class="token number">58</span>折****     <span class="token number">270.62</span>        <span class="token number">8</span>折****     <span class="token number">115.87</span>       <span class="token number">88</span>折****     <span class="token number">247.34</span>       <span class="token number">95</span>折****      <span class="token number">73.21</span>        <span class="token number">9</span>折****     <span class="token number">101.00</span>        半价****      <span class="token number">79.54</span>        半价****     <span class="token number">278.44</span>        <span class="token number">7</span>折****     <span class="token number">199.26</span>        半价****      <span class="token number">12.97</span>        <span class="token number">9</span>折****     <span class="token number">166.30</span>       <span class="token number">78</span>折****     <span class="token number">125.50</span>       <span class="token number">58</span>折****      <span class="token number">84.98</span>        <span class="token number">9</span>折****     <span class="token number">113.35</span>       <span class="token number">68</span>折****     <span class="token number">166.57</span>        半价****      <span class="token number">42.56</span>        <span class="token number">9</span>折****      <span class="token number">81.90</span>       <span class="token number">95</span>折****     <span class="token number">131.78</span>        <span class="token number">8</span>折****     <span class="token number">255.89</span>       <span class="token number">78</span>折****     <span class="token number">109.17</span>        <span class="token number">9</span>折****     <span class="token number">146.69</span>       <span class="token number">68</span>折****     <span class="token number">139.33</span>       <span class="token number">65</span>折****     <span class="token number">141.16</span>       <span class="token number">78</span>折****     <span class="token number">154.74</span>        <span class="token number">8</span>折****      <span class="token number">59.42</span>        <span class="token number">8</span>折****      <span class="token number">85.44</span>       <span class="token number">68</span>折****     <span class="token number">293.70</span>       <span class="token number">88</span>折****     <span class="token number">261.79</span>       <span class="token number">65</span>折****      <span class="token number">11.30</span>       <span class="token number">88</span>折****     <span class="token number">268.27</span>       <span class="token number">58</span>折****     <span class="token number">128.29</span>       <span class="token number">88</span>折****     <span class="token number">251.03</span>        <span class="token number">8</span>折****     <span class="token number">208.39</span>       <span class="token number">75</span>折****     <span class="token number">128.88</span>       <span class="token number">75</span>折****      <span class="token number">62.06</span>        <span class="token number">9</span>折****     <span class="token number">225.87</span>       <span class="token number">75</span>折****      <span class="token number">12.89</span>       <span class="token number">75</span>折****      <span class="token number">34.28</span>       <span class="token number">75</span>折****      <span class="token number">62.16</span>       <span class="token number">58</span>折****     <span class="token number">129.12</span>        半价****     <span class="token number">218.37</span>        半价****     <span class="token number">289.69</span>        <span class="token number">8</span>折需要说明的是，88折指的是按标价的88%计算，而8折是按80%计算，余者类推。特别地，半价是按50%计算。输出格式输出一个整数表示小明要从取款机上提取的金额，单位是元。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token number">12</span>.txt     <span class="token number">180.90</span>       <span class="token number">88</span>      <span class="token number">10.25</span>       <span class="token number">65</span>      <span class="token number">56.14</span>        <span class="token number">90</span>     <span class="token number">104.65</span>        <span class="token number">90</span>     <span class="token number">100.30</span>       <span class="token number">88</span>     <span class="token number">297.15</span>        <span class="token number">50</span>      <span class="token number">26.75</span>       <span class="token number">65</span>     <span class="token number">130.62</span>        <span class="token number">50</span>     <span class="token number">240.28</span>       <span class="token number">58</span>     <span class="token number">270.62</span>        <span class="token number">80</span>     <span class="token number">115.87</span>       <span class="token number">88</span>     <span class="token number">247.34</span>       <span class="token number">95</span>      <span class="token number">73.21</span>        <span class="token number">90</span>     <span class="token number">101.00</span>        <span class="token number">50</span>      <span class="token number">79.54</span>        <span class="token number">50</span>     <span class="token number">278.44</span>        <span class="token number">70</span>     <span class="token number">199.26</span>        <span class="token number">50</span>      <span class="token number">12.97</span>        <span class="token number">90</span>     <span class="token number">166.30</span>       <span class="token number">78</span>     <span class="token number">125.50</span>       <span class="token number">58</span>      <span class="token number">84.98</span>        <span class="token number">90</span>     <span class="token number">113.35</span>       <span class="token number">68</span>     <span class="token number">166.57</span>        <span class="token number">50</span>      <span class="token number">42.56</span>        <span class="token number">90</span>      <span class="token number">81.90</span>       <span class="token number">95</span>     <span class="token number">131.78</span>        <span class="token number">80</span>     <span class="token number">255.89</span>       <span class="token number">78</span>     <span class="token number">109.17</span>        <span class="token number">90</span>     <span class="token number">146.69</span>       <span class="token number">68</span>     <span class="token number">139.33</span>       <span class="token number">65</span>     <span class="token number">141.16</span>       <span class="token number">78</span>     <span class="token number">154.74</span>        <span class="token number">80</span>      <span class="token number">59.42</span>        <span class="token number">80</span>      <span class="token number">85.44</span>       <span class="token number">68</span>     <span class="token number">293.70</span>       <span class="token number">88</span>     <span class="token number">261.79</span>       <span class="token number">65</span>      <span class="token number">11.30</span>       <span class="token number">88</span>     <span class="token number">268.27</span>       <span class="token number">58</span>     <span class="token number">128.29</span>       <span class="token number">88</span>     <span class="token number">251.03</span>        <span class="token number">80</span>     <span class="token number">208.39</span>       <span class="token number">75</span>     <span class="token number">128.88</span>       <span class="token number">75</span>      <span class="token number">62.06</span>        <span class="token number">90</span>     <span class="token number">225.87</span>       <span class="token number">75</span>      <span class="token number">12.89</span>       <span class="token number">75</span>      <span class="token number">34.28</span>       <span class="token number">75</span>      <span class="token number">62.16</span>       <span class="token number">58</span>     <span class="token number">129.12</span>        <span class="token number">50</span>     <span class="token number">218.37</span>        <span class="token number">50</span>     <span class="token number">289.69</span>        <span class="token number">80</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#include&lt;bits/stdc++.h&gt;</span>using namespace std<span class="token punctuation">;</span>int a<span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">;</span>int b<span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">;</span> int <span class="token function-name function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>//cin<span class="token operator">&gt;&gt;</span>n<span class="token operator">&gt;&gt;</span>b<span class="token punctuation">;</span>char s<span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">;</span>char s1<span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">;</span>freopen<span class="token punctuation">(</span><span class="token string">"12.txt"</span>,<span class="token string">"r"</span>,stdin<span class="token punctuation">)</span><span class="token punctuation">;</span>//重定向输入，从txt文件里读取字符 for<span class="token punctuation">(</span>int <span class="token assign-left variable">i</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">50</span><span class="token punctuation">;</span>i++<span class="token punctuation">)</span><span class="token punctuation">{</span>cin<span class="token operator">&gt;&gt;</span>s<span class="token punctuation">;</span>//获取第一个不是空格的字符串 cin<span class="token operator">&gt;&gt;</span>s1<span class="token punctuation">;</span>//cout<span class="token operator">&lt;&lt;</span>s<span class="token punctuation">;</span>//cout<span class="token operator">&lt;&lt;</span><span class="token string">"    "</span><span class="token operator">&lt;&lt;</span>s<span class="token operator"><span class="token file-descriptor important">1</span>&lt;</span><span class="token operator">&lt;</span>endl<span class="token punctuation">;</span>   a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>stof<span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>   b<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>stof<span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>fclose<span class="token punctuation">(</span>stdin<span class="token punctuation">)</span><span class="token punctuation">;</span>float <span class="token assign-left variable">res</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>for<span class="token punctuation">(</span>int <span class="token assign-left variable">i</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">50</span><span class="token punctuation">;</span>i++<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token assign-left variable">res</span><span class="token operator">+=</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span>*b<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span>cout<span class="token operator">&lt;&lt;</span><span class="token punctuation">(</span>int<span class="token punctuation">)</span>res/10<span class="token operator"><span class="token file-descriptor important">0</span>&lt;</span><span class="token operator">&lt;</span>endl<span class="token punctuation">;</span><span class="token builtin class-name">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>包子凑数</title>
      <link href="/2022/04/02/bao-zi-cou-shu/"/>
      <url>/2022/04/02/bao-zi-cou-shu/</url>
      
        <content type="html"><![CDATA[<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#include &lt;cstdio&gt;</span><span class="token comment">#include &lt;iostream&gt;</span><span class="token comment">#include &lt;algorithm&gt;</span><span class="token comment">#include &lt;cstring&gt;</span>using namespace std<span class="token punctuation">;</span><span class="token comment">#define ms(x, n) memset(x,n,sizeof(x));</span>typedef  long long LL<span class="token punctuation">;</span>const int inf <span class="token operator">=</span> <span class="token operator"><span class="token file-descriptor important">1</span>&lt;</span><span class="token operator">&lt;</span><span class="token number">30</span><span class="token punctuation">;</span>const LL maxn <span class="token operator">=</span> <span class="token number">110</span><span class="token punctuation">;</span>int N, a<span class="token punctuation">[</span>maxn<span class="token punctuation">]</span>, maxN <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>bool is<span class="token punctuation">[</span>maxn*maxn<span class="token punctuation">]</span><span class="token punctuation">;</span>void Dfs<span class="token punctuation">(</span>int i, int n<span class="token punctuation">)</span><span class="token punctuation">{</span>//if<span class="token punctuation">(</span>n+a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">&gt;</span>maxN<span class="token punctuation">)</span>return<span class="token punctuation">;</span>//当前选第i个, 总和nis<span class="token punctuation">[</span>n<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>for<span class="token punctuation">(</span>int j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> N<span class="token punctuation">;</span> j++<span class="token punctuation">)</span>//对于每个数筛掉这个任意倍数这个数与任意倍数其它所有数<span class="token punctuation">(</span>小于max<span class="token punctuation">)</span>的和 if<span class="token punctuation">(</span><span class="token operator">!</span>is<span class="token punctuation">[</span>n+a<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">&amp;&amp;</span>n+a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">&lt;=</span>maxN<span class="token punctuation">)</span>Dfs<span class="token punctuation">(</span>j, n+a<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>// <span class="token number">4</span> <span class="token number">8</span> <span class="token number">12</span> <span class="token number">16</span>//4 <span class="token number">9</span> <span class="token number">13</span> <span class="token number">17</span> <span class="token number">21</span>//9 <span class="token number">14</span> <span class="token number">19</span> <span class="token number">24</span>   // <span class="token number">5</span> <span class="token number">10</span> <span class="token number">15</span> <span class="token number">20</span>// <span class="token number">5</span> <span class="token number">9</span> <span class="token number">18</span> <span class="token number">23</span>// <span class="token number">5</span> <span class="token number">9</span> <span class="token number">14</span> <span class="token number">18</span> int <span class="token function-name function">solve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>ms<span class="token punctuation">(</span>is, <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>maxN *<span class="token operator">=</span> maxN<span class="token punctuation">;</span>for<span class="token punctuation">(</span>int i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> N<span class="token punctuation">;</span> i++<span class="token punctuation">)</span>if<span class="token punctuation">(</span><span class="token operator">!</span>is<span class="token punctuation">[</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">&lt;=</span>maxN<span class="token punctuation">)</span>Dfs<span class="token punctuation">(</span>i, a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>int ret <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>for<span class="token punctuation">(</span>int i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> maxN<span class="token punctuation">;</span> i++<span class="token punctuation">)</span><span class="token punctuation">{</span>        //if<span class="token punctuation">(</span><span class="token operator">!</span>is<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> i<span class="token operator">&gt;</span>a<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>*a<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token builtin class-name">return</span> -1<span class="token punctuation">;</span>    //超出这个范围依然有取不到的可以认为是INFif<span class="token punctuation">(</span><span class="token operator">!</span>is<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>ret++<span class="token punctuation">;</span>cout<span class="token operator">&lt;&lt;</span>i<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token builtin class-name">return</span> ret<span class="token punctuation">;</span><span class="token punctuation">}</span>int <span class="token function-name function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>cin <span class="token operator">&gt;&gt;</span> N<span class="token punctuation">;</span>//bool even <span class="token operator">=</span> true, odd <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>for<span class="token punctuation">(</span>int i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> N<span class="token punctuation">;</span> i++<span class="token punctuation">)</span><span class="token punctuation">{</span>cin <span class="token operator">&gt;&gt;</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>maxN <span class="token operator">=</span> max<span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span>, maxN<span class="token punctuation">)</span><span class="token punctuation">;</span>//if<span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span>%2<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span> odd <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>//else if<span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span>%2<span class="token operator">!=</span><span class="token number">0</span><span class="token punctuation">)</span> even <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">}</span>//是否都是奇数/偶数    int ans <span class="token operator">=</span> solve<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>//if<span class="token punctuation">(</span>even <span class="token operator">||</span> odd <span class="token operator">||</span> <span class="token assign-left variable">ans</span><span class="token operator">==</span>-1<span class="token punctuation">)</span> cout <span class="token operator">&lt;&lt;</span> <span class="token string">"INF"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>//else  cout <span class="token operator">&lt;&lt;</span> ans <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token builtin class-name">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>螺旋折线</title>
      <link href="/2022/04/01/luo-xuan-qu-xian/"/>
      <url>/2022/04/01/luo-xuan-qu-xian/</url>
      
        <content type="html"><![CDATA[<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">如图所示的螺旋折线经过平面上所有整点恰好一次。  对于整点<span class="token punctuation">(</span>X, Y<span class="token punctuation">)</span>，我们定义它到原点的距离dis<span class="token punctuation">(</span>X, Y<span class="token punctuation">)</span>是从原点到<span class="token punctuation">(</span>X, Y<span class="token punctuation">)</span>的螺旋折线段的长度。  例如dis<span class="token punctuation">(</span><span class="token number">0</span>, <span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token number">3</span>, dis<span class="token punctuation">(</span>-2, -1<span class="token punctuation">)</span><span class="token operator">=</span><span class="token number">9</span>  给出整点坐标<span class="token punctuation">(</span>X, Y<span class="token punctuation">)</span>，你能计算出dis<span class="token punctuation">(</span>X, Y<span class="token punctuation">)</span>吗？输入格式X和Y，数据在int范围以内。输出格式输出dis<span class="token punctuation">(</span>X, Y<span class="token punctuation">)</span>  输入样例 复制<span class="token number">0</span> <span class="token number">1</span>输出样例 复制<span class="token number">3</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#include&lt;bits/stdc++.h&gt;</span>using namespace std<span class="token punctuation">;</span>int dx<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">{</span>-1,0,1,0<span class="token punctuation">}</span><span class="token punctuation">;</span>int dy<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">{</span><span class="token number">0,1</span>,0,-1<span class="token punctuation">}</span><span class="token punctuation">;</span> int <span class="token function-name function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>int ex<span class="token punctuation">;</span>int ey<span class="token punctuation">;</span>cin<span class="token operator">&gt;&gt;</span>ex<span class="token operator">&gt;&gt;</span>ey<span class="token punctuation">;</span>int <span class="token assign-left variable">x</span><span class="token operator">=</span><span class="token number">0</span>,y<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>int <span class="token assign-left variable">dis</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>int <span class="token assign-left variable">dir</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    while<span class="token punctuation">(</span>x<span class="token operator">!=</span>ex<span class="token operator">||</span>y<span class="token operator">!=</span>ey<span class="token punctuation">)</span><span class="token punctuation">{</span>     if<span class="token punctuation">(</span>x<span class="token operator">==</span><span class="token number">0</span><span class="token operator">&amp;&amp;</span><span class="token assign-left variable">y</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>     <span class="token assign-left variable">dir</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>     <span class="token assign-left variable">x</span><span class="token operator">+=</span>dx<span class="token punctuation">[</span>dir<span class="token punctuation">]</span><span class="token punctuation">;</span>     <span class="token assign-left variable">y</span><span class="token operator">+=</span>dy<span class="token punctuation">[</span>dir<span class="token punctuation">]</span><span class="token punctuation">;</span>     dis++<span class="token punctuation">;</span>     <span class="token punctuation">}</span>      <span class="token keyword">else</span> if<span class="token punctuation">(</span>y<span class="token operator">==</span>x+1<span class="token operator">&amp;&amp;</span>x<span class="token operator">&lt;</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>     <span class="token assign-left variable">dir</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>     <span class="token assign-left variable">x</span><span class="token operator">+=</span>dx<span class="token punctuation">[</span>dir<span class="token punctuation">]</span><span class="token punctuation">;</span>     <span class="token assign-left variable">y</span><span class="token operator">+=</span>dy<span class="token punctuation">[</span>dir<span class="token punctuation">]</span><span class="token punctuation">;</span>     dis++<span class="token punctuation">;</span>     <span class="token punctuation">}</span>      <span class="token keyword">else</span> if<span class="token punctuation">(</span>x<span class="token operator">==</span>-y<span class="token operator">&amp;&amp;</span>x<span class="token operator">&lt;</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>     <span class="token assign-left variable">dir</span><span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span>     <span class="token assign-left variable">x</span><span class="token operator">+=</span>dx<span class="token punctuation">[</span>dir<span class="token punctuation">]</span><span class="token punctuation">;</span>     <span class="token assign-left variable">y</span><span class="token operator">+=</span>dy<span class="token punctuation">[</span>dir<span class="token punctuation">]</span><span class="token punctuation">;</span>     dis++<span class="token punctuation">;</span>     <span class="token punctuation">}</span>      <span class="token keyword">else</span> if<span class="token punctuation">(</span>x<span class="token operator">==</span>y<span class="token operator">&amp;&amp;</span>x<span class="token operator">&gt;</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>     <span class="token assign-left variable">dir</span><span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">;</span>     <span class="token assign-left variable">x</span><span class="token operator">+=</span>dx<span class="token punctuation">[</span>dir<span class="token punctuation">]</span><span class="token punctuation">;</span>     <span class="token assign-left variable">y</span><span class="token operator">+=</span>dy<span class="token punctuation">[</span>dir<span class="token punctuation">]</span><span class="token punctuation">;</span>     dis++<span class="token punctuation">;</span>     <span class="token punctuation">}</span>          <span class="token keyword">else</span> if<span class="token punctuation">(</span>x<span class="token operator">==</span>-y<span class="token operator">&amp;&amp;</span>x<span class="token operator">&gt;</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>     <span class="token assign-left variable">dir</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>     <span class="token assign-left variable">x</span><span class="token operator">+=</span>dx<span class="token punctuation">[</span>dir<span class="token punctuation">]</span><span class="token punctuation">;</span>     <span class="token assign-left variable">y</span><span class="token operator">+=</span>dy<span class="token punctuation">[</span>dir<span class="token punctuation">]</span><span class="token punctuation">;</span>     dis++<span class="token punctuation">;</span>     <span class="token punctuation">}</span>     else<span class="token punctuation">{</span>     <span class="token assign-left variable">x</span><span class="token operator">+=</span>dx<span class="token punctuation">[</span>dir<span class="token punctuation">]</span><span class="token punctuation">;</span>     <span class="token assign-left variable">y</span><span class="token operator">+=</span>dy<span class="token punctuation">[</span>dir<span class="token punctuation">]</span><span class="token punctuation">;</span>     dis++<span class="token punctuation">;</span>     <span class="token punctuation">}</span>       <span class="token punctuation">}</span>  cout<span class="token operator">&lt;&lt;</span>dis<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span> <span class="token builtin class-name">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>计算机组成原理</title>
      <link href="/2022/04/01/ji-suan-ji-zu-cheng-yuan-li/"/>
      <url>/2022/04/01/ji-suan-ji-zu-cheng-yuan-li/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
        <tags>
            
            <tag> 计算机组成原理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>位运算</title>
      <link href="/2022/03/31/wei-yun-suan/"/>
      <url>/2022/03/31/wei-yun-suan/</url>
      
        <content type="html"><![CDATA[<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">//求n的第k位数字 n<span class="token operator">&gt;&gt;</span>k<span class="token operator">&amp;</span><span class="token number">1</span>//一元运算符号优先级高于二元，赋值优先级最低，移位运算符只比加减乘除取模低 //位操作只能用于整形数据，对float和double类型进行位操作会被编译器报错//x<span class="token operator">&gt;&gt;</span>n是去除最后n位,x<span class="token operator">&lt;&lt;</span>n是增加n位 //判断一个数是奇数x<span class="token operator">&amp;</span><span class="token assign-left variable">1</span><span class="token operator">==</span><span class="token number">1</span>//分离最右边的1 <span class="token assign-left variable">y</span><span class="token operator">=</span>x<span class="token operator">&amp;</span><span class="token punctuation">(</span>-x<span class="token punctuation">)</span>//正数的补码是其本身，负数的补码为反码+1，计算机用的都是补码 //将最右边的1后面都设为1 <span class="token assign-left variable">y</span><span class="token operator">=</span>x <span class="token operator">|</span><span class="token punctuation">(</span>x-1<span class="token punctuation">)</span>//分离最右边的0 <span class="token assign-left variable">y</span><span class="token operator">=~</span>x<span class="token operator">&amp;</span><span class="token punctuation">(</span>x+1<span class="token punctuation">)</span>//将最右边的0设为1 <span class="token assign-left variable">y</span><span class="token operator">=</span>x<span class="token operator">|</span><span class="token punctuation">(</span>x+1<span class="token punctuation">)</span>//判断第n位为1 x<span class="token operator">&amp;</span><span class="token punctuation">(</span><span class="token operator"><span class="token file-descriptor important">1</span>&lt;</span><span class="token operator">&lt;</span>n<span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">1</span>// 将第n位设为1 x<span class="token operator">|</span><span class="token punctuation">(</span><span class="token operator"><span class="token file-descriptor important">1</span>&lt;</span><span class="token operator">&lt;</span>n<span class="token punctuation">)</span>,,,,,搜索置为1 //将第n位设为0 x<span class="token operator">&amp;</span>~<span class="token punctuation">(</span><span class="token operator"><span class="token file-descriptor important">1</span>&lt;</span><span class="token operator">&lt;</span>n<span class="token punctuation">)</span>//将第n位的值取反 x^<span class="token punctuation">(</span><span class="token operator"><span class="token file-descriptor important">1</span>&lt;</span><span class="token operator">&lt;</span>n<span class="token punctuation">)</span>,,,,,搜素优化还原 // 将最右边的1设为0 <span class="token assign-left variable">y</span><span class="token operator">=</span>x<span class="token operator">&amp;</span><span class="token punctuation">(</span>x-1<span class="token punctuation">)</span>//取得末n位 x<span class="token operator">&amp;</span><span class="token punctuation">(</span><span class="token operator"><span class="token file-descriptor important">1</span>&lt;</span><span class="token operator">&lt;</span>n-1<span class="token punctuation">)</span>//取得末3位 x<span class="token operator">&amp;</span><span class="token number">7</span> //将最后一位变成1 x<span class="token operator">|</span><span class="token number">1</span> //将最后一位变成0 x<span class="token operator">&amp;</span><span class="token number">1</span>-1 //取得右数第n位 <span class="token assign-left variable">y</span><span class="token operator">=</span>x<span class="token operator">&gt;&gt;</span><span class="token punctuation">(</span>n-1<span class="token punctuation">)</span><span class="token file-descriptor important">&amp;1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>分类讨论后缀表达式</title>
      <link href="/2022/03/31/fen-lei-tao-lun-hou-zhui-biao-da-shi/"/>
      <url>/2022/03/31/fen-lei-tao-lun-hou-zhui-biao-da-shi/</url>
      
        <content type="html"><![CDATA[<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">首先明白这道题为什么叫后缀表达式，是因为后缀表达式不再引用括号（其实是隐式的引用括号），比如2 <span class="token number">3</span> + <span class="token number">1</span> - 这个式子，就是<span class="token punctuation">(</span><span class="token number">2</span>+3<span class="token punctuation">)</span>−1<span class="token operator">=</span><span class="token number">4</span><span class="token punctuation">(</span><span class="token number">2</span>+3<span class="token punctuation">)</span>−1<span class="token operator">=</span><span class="token number">4</span>, 从左向右计算，不考虑括号，运算符放在两个运算对象之后。因为符号和数字的顺序可以随便安排，那么可以考虑下面几种情况：如果都是加号：那么直接将所有的数字全部加起来即可如果有一个减号，那么我们可以转化为 …+…−<span class="token punctuation">(</span><span class="token punctuation">..</span><span class="token punctuation">..</span>+<span class="token punctuation">..</span><span class="token punctuation">..</span>+…<span class="token punctuation">)</span>…+…−<span class="token punctuation">(</span><span class="token punctuation">..</span><span class="token punctuation">..</span>+<span class="token punctuation">..</span><span class="token punctuation">..</span>+…<span class="token punctuation">)</span> 的形式，即分为两部分，中间一个减号，因此只要出现一个减号那么就可以视为出现一个或多个减号等同的效果。如果出现多个减号：也可以转化为…+…−<span class="token punctuation">(</span><span class="token punctuation">..</span><span class="token punctuation">..</span>+<span class="token punctuation">..</span><span class="token punctuation">..</span>−…<span class="token punctuation">)</span>…+…−<span class="token punctuation">(</span><span class="token punctuation">..</span><span class="token punctuation">..</span>+<span class="token punctuation">..</span><span class="token punctuation">..</span>−…<span class="token punctuation">)</span> 的形式，也就是说你希望它是减号时你可以把它放到括号外，你希望它是加号时，你可以把它放在括号里边，因为负负得正，因此，一个减号与多个减号可以视作一种情况。总结一下就是：只要m<span class="token operator">&gt;</span>0m<span class="token operator">&gt;</span><span class="token number">0</span>, 那么减号的数量实际上就是1 到n+mn+m的任何一个数字。因此得到下列讨论结果：<span class="token number">1</span>.如果全是加号，答案就是所有数字直接相加。<span class="token number">2</span>.如果存在减号：如果全是正数，那么至少有一个被减去，所以把最小的那个减去即可。如果有正有负，那么所有正数匹配正号，所有负数匹配负号，因此将它们的绝对值直接相加如果全是负数，那么除了维持一个最大的负数<span class="token punctuation">(</span>因为负数越大它的绝对值越小<span class="token punctuation">)</span>为负数之后外，其他的全部翻正。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">给定N 个加号、M 个减号以及N + M + <span class="token number">1</span> 个整数A1,A2,<span class="token punctuation">..</span>.,AN+M+1小明想知道在所有由这N 个加号、M 个减号以及N + M +1 个整数凑出的合法的后缀表达式中，结果最大的是哪一个？请你输出这个最大的结果。例如使用1 <span class="token number">2</span> <span class="token number">3</span> + -，则“2 <span class="token number">3</span> + <span class="token number">1</span> -” 这个后缀表达式结果是4，是最大的。输入格式第一行包含两个整数N 和M。第二行包含N + M + <span class="token number">1</span> 个整数A1,A2,<span class="token punctuation">..</span>.,AN+M+1<span class="token operator"><span class="token file-descriptor important">0</span>&lt;</span><span class="token operator">=</span>N,M<span class="token operator">&lt;=</span><span class="token number">100000</span>,-10^<span class="token operator"><span class="token file-descriptor important">9</span>&lt;</span><span class="token operator">=</span>Ai<span class="token operator">&lt;=</span><span class="token number">10</span>^9输出格式输出一个整数，代表答案。输入样例 复制<span class="token number">1</span> <span class="token number">1</span><span class="token number">1</span> <span class="token number">2</span> <span class="token number">3</span>输出样例 复制<span class="token number">4</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#include&lt;bits/stdc++.h&gt;</span>using namespace std<span class="token punctuation">;</span><span class="token comment">#define LL long long</span>const int <span class="token assign-left variable">N</span><span class="token operator">=</span>1e5+10<span class="token punctuation">;</span>LL n,m<span class="token punctuation">;</span>LL a<span class="token punctuation">[</span><span class="token number">2</span>*N<span class="token punctuation">]</span><span class="token punctuation">;</span>LL <span class="token assign-left variable">res</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>int <span class="token function-name function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>cin<span class="token operator">&gt;&gt;</span>n<span class="token operator">&gt;&gt;</span>m<span class="token punctuation">;</span>for<span class="token punctuation">(</span>LL <span class="token assign-left variable">i</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n+m+1<span class="token punctuation">;</span>i++<span class="token punctuation">)</span><span class="token punctuation">{</span>cin<span class="token operator">&gt;&gt;</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span>if<span class="token punctuation">(</span>m<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>for<span class="token punctuation">(</span>LL <span class="token assign-left variable">i</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n+m+1<span class="token punctuation">;</span>i++<span class="token punctuation">)</span><span class="token assign-left variable">res</span><span class="token operator">+=</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>cout<span class="token operator">&lt;&lt;</span>res<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span><span class="token builtin class-name">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>sort<span class="token punctuation">(</span>a,a+n+m+1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token assign-left variable">res</span><span class="token operator">+=</span>a<span class="token punctuation">[</span>n+m<span class="token punctuation">]</span><span class="token punctuation">;</span>res-<span class="token operator">=</span>a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>for<span class="token punctuation">(</span>LL <span class="token assign-left variable">i</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n+m<span class="token punctuation">;</span>i++<span class="token punctuation">)</span><span class="token punctuation">{</span>       <span class="token assign-left variable">res</span><span class="token operator">+=</span>abs<span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token punctuation">}</span>cout<span class="token operator">&lt;&lt;</span>res<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span><span class="token builtin class-name">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>完全二叉树的权值</title>
      <link href="/2022/03/29/wan-quan-er-cha-shu-de-quan-zhi/"/>
      <url>/2022/03/29/wan-quan-er-cha-shu-de-quan-zhi/</url>
      
        <content type="html"><![CDATA[<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#include&lt;cstdio&gt;</span><span class="token comment">#include&lt;cstring&gt;</span><span class="token comment">#include&lt;algorithm&gt;</span>using namespace std<span class="token punctuation">;</span>const int <span class="token assign-left variable">M</span><span class="token operator">=</span><span class="token number">1000010</span><span class="token punctuation">;</span>int <span class="token assign-left variable">inf</span><span class="token operator">=</span>0x3f3f3f3f<span class="token punctuation">;</span>int a<span class="token punctuation">[</span>M<span class="token punctuation">]</span>,res<span class="token punctuation">[</span>M<span class="token punctuation">]</span><span class="token punctuation">;</span>//a数组存数并且与前求和得到前缀和//res数组存储每一层的权值和 //前缀和：一串数字中自身和她前面数字的总和为前缀和//例：1 <span class="token number">2</span> <span class="token number">3</span> <span class="token number">4</span> <span class="token number">5</span> -<span class="token operator">&gt;</span><span class="token number">1</span> <span class="token number">3</span> <span class="token number">6</span> <span class="token number">10</span> <span class="token number">15</span>//前缀和可以求区间的和//二叉树每一层最后一个节点的下标（位置）为上一层最后节点下标j *2+1；//例： 第二层最后一个节点下标 <span class="token number">3</span> 则第三层最后一个节点下标 <span class="token assign-left variable">j</span><span class="token operator">=</span><span class="token number">3</span>*2+1<span class="token operator">=</span><span class="token number">7</span> //这样第三层的权值和就可以表示为 a<span class="token punctuation">[</span>j<span class="token punctuation">]</span>-a<span class="token punctuation">[</span>j<span class="token operator">&gt;&gt;</span><span class="token number">1</span><span class="token punctuation">]</span> int <span class="token function-name function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>int i,j,k,l,m,n,s<span class="token operator">=</span><span class="token number">0</span>,max<span class="token operator">=</span>-inf<span class="token punctuation">;</span>memset<span class="token punctuation">(</span>a,0,sizeof<span class="token punctuation">(</span>a<span class="token punctuation">))</span><span class="token punctuation">;</span>scanf<span class="token punctuation">(</span><span class="token string">"%d"</span>,<span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>for<span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i++<span class="token punctuation">)</span><span class="token punctuation">{</span>scanf<span class="token punctuation">(</span><span class="token string">"%d"</span>,<span class="token operator">&amp;</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>a<span class="token punctuation">[</span>i-1<span class="token punctuation">]</span>+a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>//求前缀和 <span class="token punctuation">}</span>for<span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">1</span>,j<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i++,j<span class="token operator">=</span><span class="token punctuation">(</span>j<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token punctuation">)</span>+1<span class="token punctuation">)</span> //i为层数（深度）,j为每一层最后节点的下标 <span class="token punctuation">{</span>res<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>a<span class="token punctuation">[</span>j<span class="token punctuation">]</span>-a<span class="token punctuation">[</span>j<span class="token operator">&gt;&gt;</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>//res存储每一层的权值和,j<span class="token operator">&gt;&gt;</span><span class="token number">1</span>为上一层最后节点下标 <span class="token punctuation">}</span>if<span class="token punctuation">((</span>j<span class="token operator">&gt;&gt;</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">&lt;</span>n<span class="token punctuation">)</span> //当j的上一层坐标不为n的时候，说明最后一层没有满，求出最后一层未满的权值 res<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>a<span class="token punctuation">[</span>n<span class="token punctuation">]</span>-a<span class="token punctuation">[</span>j<span class="token operator">&gt;&gt;</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">else</span>//当为满二叉树时，将多出的层数剪掉 i--<span class="token punctuation">;</span>for<span class="token punctuation">(</span>k<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>k<span class="token operator">&lt;=</span>i<span class="token punctuation">;</span>k++<span class="token punctuation">)</span><span class="token punctuation">{</span>if<span class="token punctuation">(</span>res<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token operator">&gt;</span>max<span class="token punctuation">)</span>//寻找权值和最大的深度 <span class="token punctuation">{</span><span class="token assign-left variable">max</span><span class="token operator">=</span>res<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token assign-left variable">s</span><span class="token operator">=</span>k<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span>printf<span class="token punctuation">(</span><span class="token string">"%d<span class="token entity" title="\n">\n</span>"</span>,s<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token builtin class-name">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#include&lt;bits/stdc++.h&gt;</span>using namespace std<span class="token punctuation">;</span>int a<span class="token punctuation">[</span><span class="token number">10000000</span><span class="token punctuation">]</span><span class="token punctuation">;</span>int b<span class="token punctuation">[</span><span class="token number">10000000</span><span class="token punctuation">]</span><span class="token punctuation">;</span>int kaishi<span class="token punctuation">(</span>int x<span class="token punctuation">)</span><span class="token punctuation">{</span>int s<span class="token punctuation">;</span><span class="token assign-left variable">s</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>for<span class="token punctuation">(</span>int <span class="token assign-left variable">i</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>x<span class="token punctuation">;</span>i++<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token assign-left variable">s</span><span class="token operator">+=</span><span class="token punctuation">(</span><span class="token operator"><span class="token file-descriptor important">1</span>&lt;</span><span class="token operator">&lt;</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token builtin class-name">return</span> s<span class="token punctuation">;</span><span class="token punctuation">}</span>int tob<span class="token punctuation">(</span>int x<span class="token punctuation">)</span><span class="token punctuation">{</span>int <span class="token assign-left variable">ceng</span><span class="token operator">=</span>log<span class="token punctuation">(</span>x<span class="token punctuation">)</span>/log<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>-1<span class="token punctuation">;</span>if<span class="token punctuation">(</span>x<span class="token operator">&gt;</span>pow<span class="token punctuation">(</span><span class="token number">2</span>,log<span class="token punctuation">(</span>x<span class="token punctuation">)</span>/log<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>-1<span class="token punctuation">))</span><span class="token assign-left variable">ceng</span><span class="token operator">=</span>ceng+1<span class="token punctuation">;</span>int <span class="token assign-left variable">ci</span><span class="token operator">=</span>pow<span class="token punctuation">(</span><span class="token number">2</span>,ceng<span class="token punctuation">)</span><span class="token punctuation">;</span>int <span class="token assign-left variable">st</span><span class="token operator">=</span>kaishi<span class="token punctuation">(</span>ceng<span class="token punctuation">)</span><span class="token punctuation">;</span>//cout<span class="token operator">&lt;&lt;</span>ceng<span class="token operator">&lt;&lt;</span><span class="token string">" "</span><span class="token operator">&lt;&lt;</span>ci<span class="token operator">&lt;&lt;</span><span class="token string">" "</span><span class="token operator">&lt;&lt;</span>st<span class="token operator">&lt;&lt;</span><span class="token string">" "</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>int <span class="token assign-left variable">res</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>for<span class="token punctuation">(</span>int <span class="token assign-left variable">i</span><span class="token operator">=</span>st<span class="token punctuation">;</span>i<span class="token operator">&gt;</span>st-ci<span class="token punctuation">;</span>i--<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token assign-left variable">res</span><span class="token operator">+=</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token builtin class-name">return</span> res<span class="token punctuation">;</span><span class="token punctuation">}</span>int <span class="token function-name function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>int n<span class="token punctuation">;</span>cin<span class="token operator">&gt;&gt;</span>n<span class="token punctuation">;</span>int <span class="token assign-left variable">ceng</span><span class="token operator">=</span>log<span class="token punctuation">(</span>n<span class="token punctuation">)</span>/log<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>-1<span class="token punctuation">;</span>if<span class="token punctuation">(</span>n<span class="token operator">&gt;</span>pow<span class="token punctuation">(</span><span class="token number">2</span>,log<span class="token punctuation">(</span>n<span class="token punctuation">)</span>/log<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>-1<span class="token punctuation">))</span><span class="token assign-left variable">ceng</span><span class="token operator">=</span>ceng+1<span class="token punctuation">;</span>//cout<span class="token operator">&lt;&lt;</span>ceng<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>for<span class="token punctuation">(</span>int <span class="token assign-left variable">i</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i++<span class="token punctuation">)</span>cin<span class="token operator">&gt;&gt;</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>int <span class="token assign-left variable">sum</span><span class="token operator">=</span>-0x3f3f3f3f<span class="token punctuation">;</span>for<span class="token punctuation">(</span>int <span class="token assign-left variable">j</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;=</span>ceng<span class="token punctuation">;</span>j++<span class="token punctuation">)</span><span class="token punctuation">{</span>b<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span>tob<span class="token punctuation">(</span>pow<span class="token punctuation">(</span><span class="token number">2</span>,j+1<span class="token punctuation">))</span><span class="token punctuation">;</span><span class="token assign-left variable">sum</span><span class="token operator">=</span>max<span class="token punctuation">(</span>sum,b<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>//cout<span class="token operator">&lt;&lt;</span>sum<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>for<span class="token punctuation">(</span>int <span class="token assign-left variable">j</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;=</span>ceng<span class="token punctuation">;</span>j++<span class="token punctuation">)</span><span class="token punctuation">{</span>       if<span class="token punctuation">(</span>tob<span class="token punctuation">(</span>pow<span class="token punctuation">(</span><span class="token number">2</span>,j+1<span class="token punctuation">))</span><span class="token operator">==</span>sum<span class="token punctuation">)</span><span class="token punctuation">{</span>       cout<span class="token operator">&lt;&lt;</span>j+<span class="token operator"><span class="token file-descriptor important">1</span>&lt;</span><span class="token operator">&lt;</span>endl<span class="token punctuation">;</span>       <span class="token builtin class-name">break</span><span class="token punctuation">;</span>       <span class="token punctuation">}</span><span class="token punctuation">}</span>//b<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span>a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token number">0</span> <span class="token number">1</span>//b<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span>a<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>+a<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token number">1</span> <span class="token number">2</span>//b<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">=</span>a<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span>+a<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span>+a<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span>+a<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token number">2</span> <span class="token number">4</span><span class="token builtin class-name">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Bfs迷宫</title>
      <link href="/2022/03/28/bfs-mi-gong/"/>
      <url>/2022/03/28/bfs-mi-gong/</url>
      
        <content type="html"><![CDATA[<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">下图给出了一个迷宫的平面图，其中标记为1 的为障碍，标记为0 的为可以通行的地方。010000000100001001<span class="token number">110000</span>迷宫的入口为左上角，出口为右下角，在迷宫中，只能从一个位置走到这个它的上、下、左、右四个方向之一。对于上面的迷宫，从入口开始，可以按DRRURRDDDR 的顺序通过迷宫，一共10 步。其中D、U、L、R 分别表示向下、向上、向左、向右走。对于下面这个更复杂的迷宫（30 行50 列），请找出一种通过迷宫的方式，其使用的步数最少，在步数最少的前提下，请找出字典序最小的一个作为答案。请注意在字典序中D<span class="token operator">&lt;</span>L<span class="token operator">&lt;</span>R<span class="token operator">&lt;</span>U。输入格式见文件：maze.txt<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">maze.txt：0101010100101100100101011001011010010000100010101000001000100000101010010000100000001001100110100101011110110100100010000011010010111000110000000100000100000000101010001101000010100000101010101100101100011111000000101000010010100010100000101100000000<span class="token number">11001000110101000010101100011010011010101011110111</span>00011011010101001001001010000001000101001110000000<span class="token number">10100000101000100110101010111110011000010000111010</span>00111000001010100001100010000001000101001100001001<span class="token number">11000110100001110010001001010101010101010001101000</span>00010000100100000101001010101110100010101010000101<span class="token number">11100100101001001000010000010101010100100100010100</span>00000010000000101011001111010001100000101010100011<span class="token number">10101010011100001000011000010110011110110100001000</span><span class="token number">10101010100001101010100101000010100000111011101001</span><span class="token number">10000000101100010000101100101101001011100000000100</span><span class="token number">10101001000000010100100001000100000100011110101001</span>00101001010101101001010100011010101101110000110101<span class="token number">11001010000100001100000010100101000001000111000010</span>00001000110000110101101000000100101001001000011101<span class="token number">10100101000101000000001110110010110101101010100001</span>00101000010000110101010000100010001001000100010101<span class="token number">10100001000110010001000010101001010101011111010010</span>00000100101000000110010100101001000001000000000010<span class="token number">11010000001001110111001001000011101001011011101000</span>00000110100010001000100000001000011101000000110011<span class="token number">10101000101000100010001111100010101001010000001000</span><span class="token number">10000010100101001010110000000100101010001011101000</span>00111100001000010000000110111000000001000000001011<span class="token number">10000001100111010111010001000110111010101101111000</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#include&lt;bits/stdc++.h&gt;</span>using namespace std<span class="token punctuation">;</span>typedef pair<span class="token operator">&lt;</span>int,int<span class="token operator">&gt;</span> pii<span class="token punctuation">;</span>queue<span class="token operator">&lt;</span>pii<span class="token operator">&gt;</span> q<span class="token punctuation">;</span>int m<span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">;</span>int d<span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">;</span>string p<span class="token punctuation">[</span><span class="token number">500</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">500</span><span class="token punctuation">]</span><span class="token punctuation">;</span>char ch<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">'D'</span>,<span class="token string">'L'</span>,<span class="token string">'R'</span>,<span class="token string">'U'</span><span class="token punctuation">}</span><span class="token punctuation">;</span>int n,b<span class="token punctuation">;</span>string <span class="token function-name function">bfs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>q.push<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token number">0,0</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>//先让起点入队列 memset<span class="token punctuation">(</span>d,-1,sizeof d<span class="token punctuation">)</span><span class="token punctuation">;</span>//初始化距离 d<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>int dx<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">{</span><span class="token number">1,0</span>,0,-1<span class="token punctuation">}</span><span class="token punctuation">;</span>int dy<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">{</span><span class="token number">0</span>,-1,1,0<span class="token punctuation">}</span><span class="token punctuation">;</span>//x是横坐标y轴方向的，y则是纵坐标方向的 p<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">""</span><span class="token punctuation">;</span>//初始化起点路径 <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>q.empty<span class="token punctuation">(</span><span class="token punctuation">))</span><span class="token punctuation">{</span>    pii t <span class="token operator">=</span> q.front<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>//取队头     q.pop<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>//队头出队     <span class="token keyword">for</span> <span class="token punctuation">(</span>int <span class="token assign-left variable">i</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">4</span><span class="token punctuation">;</span>i++<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        int <span class="token assign-left variable">x</span><span class="token operator">=</span>t.first+dx<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        int <span class="token assign-left variable">y</span><span class="token operator">=</span>t.second+dy<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>x<span class="token operator">&gt;=</span><span class="token number">0</span><span class="token operator">&amp;&amp;</span>x<span class="token operator">&lt;</span>n<span class="token operator">&amp;&amp;</span>y<span class="token operator">&gt;=</span><span class="token number">0</span><span class="token operator">&amp;&amp;</span>y<span class="token operator">&lt;</span>b<span class="token operator">&amp;&amp;</span>m<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">0</span><span class="token operator">&amp;&amp;</span>d<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token operator">==</span>-1<span class="token punctuation">)</span>//拓展队头         <span class="token punctuation">{</span>            d<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token operator">=</span>d<span class="token punctuation">[</span>t.first<span class="token punctuation">]</span><span class="token punctuation">[</span>t.second<span class="token punctuation">]</span>+1<span class="token punctuation">;</span>            p<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token operator">=</span>p<span class="token punctuation">[</span>t.first<span class="token punctuation">]</span><span class="token punctuation">[</span>t.second<span class="token punctuation">]</span>+ch<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>//保存每个点从起点到这个点的路径，只有这种形式才能保存路径             q.push<span class="token punctuation">(</span><span class="token punctuation">{</span>x,y<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>//将拓展的队头从队尾进队             //if<span class="token punctuation">(</span>x<span class="token operator">==</span>n-1<span class="token operator">&amp;&amp;</span><span class="token assign-left variable">y</span><span class="token operator">==</span>b-1<span class="token punctuation">)</span>//            <span class="token builtin class-name">return</span> p<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token builtin class-name">return</span> p<span class="token punctuation">[</span>n-1<span class="token punctuation">]</span><span class="token punctuation">[</span>b-1<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span>int <span class="token function-name function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>cin<span class="token operator">&gt;&gt;</span>n<span class="token operator">&gt;&gt;</span>b<span class="token punctuation">;</span>char s<span class="token punctuation">[</span>b-1<span class="token punctuation">]</span><span class="token punctuation">;</span>freopen<span class="token punctuation">(</span><span class="token string">"wenb.txt"</span>,<span class="token string">"r"</span>,stdin<span class="token punctuation">)</span><span class="token punctuation">;</span>//重定向输入，从txt文件里读取字符 for<span class="token punctuation">(</span>int <span class="token assign-left variable">i</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i++<span class="token punctuation">)</span><span class="token punctuation">{</span>gets<span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>for<span class="token punctuation">(</span>int <span class="token assign-left variable">j</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>b<span class="token punctuation">;</span>j++<span class="token punctuation">)</span>m<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span>s<span class="token punctuation">[</span>j<span class="token punctuation">]</span>-<span class="token string">'0'</span><span class="token punctuation">;</span>//cin<span class="token operator">&gt;&gt;</span>m<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span>fclose<span class="token punctuation">(</span>stdin<span class="token punctuation">)</span><span class="token punctuation">;</span>cout<span class="token operator">&lt;&lt;</span>bfs<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>//cout<span class="token operator">&lt;&lt;</span>endl<span class="token operator">&lt;&lt;</span>bfs<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>//freopen<span class="token punctuation">(</span><span class="token string">"1213.txt"</span>,<span class="token string">"w"</span>,stdout<span class="token punctuation">)</span><span class="token punctuation">;</span>//for<span class="token punctuation">(</span>int <span class="token assign-left variable">i</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i++<span class="token punctuation">)</span>//<span class="token punctuation">{</span>for<span class="token punctuation">(</span>int <span class="token assign-left variable">j</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>b<span class="token punctuation">;</span>j++<span class="token punctuation">)</span>//cout<span class="token operator">&lt;&lt;</span>m<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>//cout<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span><span class="token punctuation">}</span>//fclose<span class="token punctuation">(</span>stdout<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token builtin class-name">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>并查集七段码</title>
      <link href="/2022/03/28/bing-cha-ji-zhi-qi-duan-ma/"/>
      <url>/2022/03/28/bing-cha-ji-zhi-qi-duan-ma/</url>
      
        <content type="html"><![CDATA[<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">小蓝要用七段码数码管来表示一种特殊的文字。上图给出了七段码数码管的一个图示，数码管中一共有 <span class="token number">7</span> 段可以发光的二极管，分别标记为 a, b, c, d, e, f, g。小蓝要选择一部分二极管（至少要有一个）发光来表达字符。在设计字符的表达时，要求所有发光的二极管是连成一片的。例如：b 发光，其他二极管不发光可以用来表达一种字符。例如：c 发光，其他二极管不发光可以用来表达一种字符。这种方案与上一行的方案可以用来表示不同的字符，尽管看上去比较相似。例如：a, b, c, d, e 发光，f, g 不发光可以用来表达一种字符。例如：b, f 发光，其他二极管不发光则不能用来表达一种字符，因为发光的二极管没有连成一片。请问，小蓝可以用七段码数码管表达多少种不同的字符？答案提交这是一道结果填空的题，你只需要算出结果后提交即可。本题的结果为一个整数，在提交答案时只填写这个整数，填写多余的内容将无法得分。样例无样例<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">//暴力打表法<span class="token comment">#include &lt;bits/stdc++.h&gt;</span>using namespace std<span class="token punctuation">;</span>const int N <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>int e<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">[</span>N<span class="token punctuation">]</span> , p<span class="token punctuation">[</span>N<span class="token punctuation">]</span> <span class="token punctuation">;</span>bool st<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span>int <span class="token assign-left variable">ans</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>int shuma<span class="token punctuation">[</span><span class="token number">129</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">;</span>char smg<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span>void dab<span class="token punctuation">(</span>int a<span class="token punctuation">[</span><span class="token number">129</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span>,int x,int y<span class="token punctuation">)</span><span class="token punctuation">{</span>if<span class="token punctuation">(</span>a<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">1</span><span class="token operator">&amp;&amp;</span><span class="token assign-left variable">y</span><span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span>      smg<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">'_'</span><span class="token punctuation">;</span>if<span class="token punctuation">(</span>a<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">1</span><span class="token operator">&amp;&amp;</span><span class="token assign-left variable">y</span><span class="token operator">==</span><span class="token number">2</span><span class="token punctuation">)</span>smg<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">'|'</span><span class="token punctuation">;</span>if<span class="token punctuation">(</span>a<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">1</span><span class="token operator">&amp;&amp;</span><span class="token assign-left variable">y</span><span class="token operator">==</span><span class="token number">3</span><span class="token punctuation">)</span>smg<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">'_'</span><span class="token punctuation">;</span>if<span class="token punctuation">(</span>a<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">1</span><span class="token operator">&amp;&amp;</span><span class="token assign-left variable">y</span><span class="token operator">==</span><span class="token number">4</span><span class="token punctuation">)</span>smg<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">'|'</span><span class="token punctuation">;</span>if<span class="token punctuation">(</span>a<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">1</span><span class="token operator">&amp;&amp;</span><span class="token assign-left variable">y</span><span class="token operator">==</span><span class="token number">5</span><span class="token punctuation">)</span>smg<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">'|'</span><span class="token punctuation">;</span>if<span class="token punctuation">(</span>a<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">1</span><span class="token operator">&amp;&amp;</span><span class="token assign-left variable">y</span><span class="token operator">==</span><span class="token number">6</span><span class="token punctuation">)</span>smg<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">'_'</span><span class="token punctuation">;</span>if<span class="token punctuation">(</span>a<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">1</span><span class="token operator">&amp;&amp;</span><span class="token assign-left variable">y</span><span class="token operator">==</span><span class="token number">7</span><span class="token punctuation">)</span>smg<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">'|'</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>int find<span class="token punctuation">(</span>int x<span class="token punctuation">)</span><span class="token punctuation">{</span>    if<span class="token punctuation">(</span>p<span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">!=</span> x<span class="token punctuation">)</span> p<span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">=</span> find<span class="token punctuation">(</span>p<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token builtin class-name">return</span> p<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span>void merge<span class="token punctuation">(</span>int x,int y<span class="token punctuation">)</span><span class="token punctuation">{</span>p<span class="token punctuation">[</span>find<span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> find<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>void dfs<span class="token punctuation">(</span>int u<span class="token punctuation">)</span><span class="token punctuation">{</span>    if<span class="token punctuation">(</span>u <span class="token operator">&gt;</span> <span class="token number">7</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>           //初始化集合        for<span class="token punctuation">(</span>int i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">7</span><span class="token punctuation">;</span> i ++<span class="token punctuation">)</span> p<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>for<span class="token punctuation">(</span>int <span class="token assign-left variable">i</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span><span class="token number">7</span><span class="token punctuation">;</span>i++<span class="token punctuation">)</span><span class="token punctuation">{</span>if<span class="token punctuation">(</span>st<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>//cout<span class="token operator">&lt;&lt;</span>p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">&lt;&lt;</span><span class="token string">" "</span><span class="token punctuation">;</span>shuma<span class="token punctuation">[</span>ans<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>//cout<span class="token operator">&lt;&lt;</span><span class="token string">"0"</span><span class="token operator">&lt;&lt;</span><span class="token string">" "</span><span class="token punctuation">;</span>shuma<span class="token punctuation">[</span>ans<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span>//cout<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>ans++<span class="token punctuation">;</span>        //判断是否连通，并且这两段都被选了   //     for<span class="token punctuation">(</span>int i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">7</span><span class="token punctuation">;</span> i ++<span class="token punctuation">)</span>//            for<span class="token punctuation">(</span>int j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> <span class="token number">7</span><span class="token punctuation">;</span> j ++<span class="token punctuation">)</span>//                if<span class="token punctuation">(</span>e<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> st<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token number">2</span> <span class="token operator">&amp;&amp;</span> st<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token number">2</span><span class="token punctuation">)</span>//                    merge<span class="token punctuation">(</span>j,i<span class="token punctuation">)</span><span class="token punctuation">;</span>//        int cnt <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>//        for<span class="token punctuation">(</span>int i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">7</span><span class="token punctuation">;</span> i ++<span class="token punctuation">)</span>//            if<span class="token punctuation">(</span>st<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token number">2</span> <span class="token operator">&amp;&amp;</span> p<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> i<span class="token punctuation">)</span>//                cnt ++<span class="token punctuation">;</span>//        //因为我们判断的时候是判断该组合中的段是否选了，并且父节点相同，//        //而且题意又是只有连成一片才是算一种答案，所以只有在cnt为1的时候，才是我们要的组合，有可能是存在两个或以上的连通块//        if<span class="token punctuation">(</span>cnt <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> ans ++<span class="token punctuation">;</span>        <span class="token builtin class-name">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    //0 待选    //1 选该段    //2 不选该段    st<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    dfs<span class="token punctuation">(</span>u + <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    st<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    dfs<span class="token punctuation">(</span>u + <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>int <span class="token function-name function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    //初始化相邻的段    e<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> e<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    e<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> e<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span> <span class="token operator">=</span> e<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    e<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> e<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span> <span class="token operator">=</span> e<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    e<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> e<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    e<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">=</span> e<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span> <span class="token operator">=</span> e<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    e<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> e<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span> <span class="token operator">=</span> e<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    e<span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> e<span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> e<span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span> <span class="token operator">=</span> e<span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    dfs<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>int <span class="token assign-left variable">b</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>    //cout <span class="token operator">&lt;&lt;</span> ans <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>for<span class="token punctuation">(</span>int <span class="token assign-left variable">i</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span><span class="token number">128</span><span class="token punctuation">;</span>i++<span class="token punctuation">)</span><span class="token punctuation">{</span>cout<span class="token operator">&lt;&lt;</span>b<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>memset<span class="token punctuation">(</span>smg,<span class="token string">' '</span>,sizeof smg<span class="token punctuation">)</span><span class="token punctuation">;</span>for<span class="token punctuation">(</span>int <span class="token assign-left variable">j</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;=</span><span class="token number">7</span><span class="token punctuation">;</span>j++<span class="token punctuation">)</span>//cout<span class="token operator">&lt;&lt;</span>shuma<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">&lt;&lt;</span><span class="token string">" "</span><span class="token punctuation">;</span>//cout<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>dab<span class="token punctuation">(</span>shuma,i,j<span class="token punctuation">)</span><span class="token punctuation">;</span>for<span class="token punctuation">(</span>int <span class="token assign-left variable">i</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span><span class="token number">2</span><span class="token punctuation">;</span>i++<span class="token punctuation">)</span><span class="token punctuation">{</span>for<span class="token punctuation">(</span>int <span class="token assign-left variable">j</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;=</span><span class="token number">3</span><span class="token punctuation">;</span>j++<span class="token punctuation">)</span>cout<span class="token operator">&lt;&lt;</span>smg<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">&lt;&lt;</span><span class="token string">" "</span><span class="token punctuation">;</span>cout<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span><span class="token punctuation">}</span>b++<span class="token punctuation">;</span>cout<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span><span class="token punctuation">}</span>    <span class="token builtin class-name">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">//并查集加dfs<span class="token comment">#include &lt;bits/stdc++.h&gt;</span>using namespace std<span class="token punctuation">;</span>const int N <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>int e<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">[</span>N<span class="token punctuation">]</span> , p<span class="token punctuation">[</span>N<span class="token punctuation">]</span> <span class="token punctuation">;</span>bool st<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span>int <span class="token assign-left variable">ans</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>int find<span class="token punctuation">(</span>int x<span class="token punctuation">)</span><span class="token punctuation">{</span>    if<span class="token punctuation">(</span>p<span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">!=</span> x<span class="token punctuation">)</span> p<span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">=</span> find<span class="token punctuation">(</span>p<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token builtin class-name">return</span> p<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span>void merge<span class="token punctuation">(</span>int x,int y<span class="token punctuation">)</span><span class="token punctuation">{</span>p<span class="token punctuation">[</span>find<span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> find<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>void dfs<span class="token punctuation">(</span>int u<span class="token punctuation">)</span><span class="token punctuation">{</span>    if<span class="token punctuation">(</span>u <span class="token operator">&gt;</span> <span class="token number">7</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>           //初始化集合        for<span class="token punctuation">(</span>int i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">7</span><span class="token punctuation">;</span> i ++<span class="token punctuation">)</span> p<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span>        //判断是否连通，并且这两段都被选了        for<span class="token punctuation">(</span>int i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">7</span><span class="token punctuation">;</span> i ++<span class="token punctuation">)</span>            for<span class="token punctuation">(</span>int j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> <span class="token number">7</span><span class="token punctuation">;</span> j ++<span class="token punctuation">)</span>                if<span class="token punctuation">(</span>e<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> st<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> st<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span>                    merge<span class="token punctuation">(</span>j,i<span class="token punctuation">)</span><span class="token punctuation">;</span>        int cnt <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        for<span class="token punctuation">(</span>int i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">7</span><span class="token punctuation">;</span> i ++<span class="token punctuation">)</span>            if<span class="token punctuation">(</span>st<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> p<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> i<span class="token punctuation">)</span>                cnt ++<span class="token punctuation">;</span>        //因为我们判断的时候是判断该组合中的段是否选了，并且父节点相同，        //而且题意又是只有连成一片才是算一种答案，所以只有在cnt为1的时候，才是我们要的组合，有可能是存在两个或以上的连通块        if<span class="token punctuation">(</span>cnt <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> ans ++<span class="token punctuation">;</span>        <span class="token builtin class-name">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    //1 选该段    //0 不选该段    st<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    dfs<span class="token punctuation">(</span>u + <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    st<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    dfs<span class="token punctuation">(</span>u + <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>int <span class="token function-name function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    //初始化相邻的段    e<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> e<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    e<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> e<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span> <span class="token operator">=</span> e<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    e<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> e<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span> <span class="token operator">=</span> e<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    e<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> e<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    e<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">=</span> e<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span> <span class="token operator">=</span> e<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    e<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> e<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span> <span class="token operator">=</span> e<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    e<span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> e<span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> e<span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span> <span class="token operator">=</span> e<span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    dfs<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>cout<span class="token operator">&lt;&lt;</span>ans<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>    <span class="token builtin class-name">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>螺旋矩阵</title>
      <link href="/2022/03/27/luo-xuan-ju-zhen/"/>
      <url>/2022/03/27/luo-xuan-ju-zhen/</url>
      
        <content type="html"><![CDATA[<p><img src="/2022/03/27/luo-xuan-ju-zhen/2022-03-27_231526.png" alt="2022-03-27_231526"></p><p>  红线方程y=x，绿线方程y=-x+4，4为矩形边长。</p><p> 两条直线将区域分为四个部分，划分好每个区域的边界值，每个区域的坐标变化规律有四种，x++，y++，x–，y–，接下来仔细分析就能得到算法</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#include&lt;bits/stdc++.h&gt;</span>using namespace std<span class="token punctuation">;</span>void SpiralArray<span class="token punctuation">(</span>int size, int ar<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        int <span class="token assign-left variable">a</span><span class="token operator">=</span>size/2*2+1<span class="token punctuation">;</span>//保证边长为奇数    int <span class="token assign-left variable">y</span><span class="token operator">=</span>a/2,x<span class="token operator">=</span>a/2<span class="token punctuation">;</span>//从中心点开始    <span class="token keyword">for</span> <span class="token punctuation">(</span>int <span class="token assign-left variable">i</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>size*size<span class="token punctuation">;</span>i++<span class="token punctuation">)</span>//<span class="token punctuation">(</span>int <span class="token assign-left variable">i</span><span class="token operator">=</span>size*size<span class="token punctuation">;</span>i<span class="token operator">&gt;=</span><span class="token number">1</span><span class="token punctuation">;</span>i--<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>x<span class="token operator">&lt;=</span>a-y-1<span class="token operator">&amp;&amp;</span>x<span class="token operator">&gt;=</span>y<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            ar<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">=</span>i<span class="token punctuation">;</span>            x++<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>x<span class="token operator">&gt;</span>a-y-1<span class="token operator">&amp;&amp;</span>x<span class="token operator">&gt;</span>y<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            ar<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">=</span>i<span class="token punctuation">;</span>            y++<span class="token punctuation">;</span>        <span class="token punctuation">}</span>               <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>x<span class="token operator">&gt;</span>a-y-1<span class="token operator">&amp;&amp;</span>x<span class="token operator">&lt;=</span>y<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            ar<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">=</span>i<span class="token punctuation">;</span>            x--<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>x<span class="token operator">&lt;=</span>a-y-1<span class="token operator">&amp;&amp;</span>x<span class="token operator">&lt;</span>y<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            ar<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">=</span>i<span class="token punctuation">;</span>            y--<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>int <span class="token function-name function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>int n<span class="token punctuation">;</span>cin<span class="token operator">&gt;&gt;</span>n<span class="token punctuation">;</span>int a<span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">;</span>SpiralArray<span class="token punctuation">(</span>n,a<span class="token punctuation">)</span><span class="token punctuation">;</span>for<span class="token punctuation">(</span>int <span class="token assign-left variable">i</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i++<span class="token punctuation">)</span><span class="token punctuation">{</span>for<span class="token punctuation">(</span>int <span class="token assign-left variable">j</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>j++<span class="token punctuation">)</span>cout<span class="token operator">&lt;&lt;</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">&lt;&lt;</span><span class="token string">" "</span><span class="token punctuation">;</span>cout<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span><span class="token punctuation">}</span>//cout<span class="token operator">&lt;&lt;</span>a<span class="token punctuation">[</span><span class="token number">19</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">19</span><span class="token punctuation">]</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span><span class="token builtin class-name">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">//从外往里模拟法<span class="token comment">#include&lt;bits/stdc++.h&gt;</span>using namespace std<span class="token punctuation">;</span>int mat<span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">;</span>int <span class="token function-name function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    int n<span class="token punctuation">;</span>                    cin<span class="token operator">&gt;&gt;</span>n<span class="token punctuation">;</span>          int l <span class="token operator">=</span> <span class="token number">0</span>, r <span class="token operator">=</span> n - <span class="token number">1</span>, t <span class="token operator">=</span> <span class="token number">0</span>, b <span class="token operator">=</span> n - <span class="token number">1</span><span class="token punctuation">;</span>        int num <span class="token operator">=</span> <span class="token number">1</span>, <span class="token function">tar</span> <span class="token operator">=</span> n * n<span class="token punctuation">;</span>        while<span class="token punctuation">(</span>num <span class="token operator">&lt;=</span> <span class="token function">tar</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            for<span class="token punctuation">(</span>int i <span class="token operator">=</span> l<span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> r<span class="token punctuation">;</span> i++<span class="token punctuation">)</span> mat<span class="token punctuation">[</span>t<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> num++<span class="token punctuation">;</span> // left to right.            t++<span class="token punctuation">;</span>            for<span class="token punctuation">(</span>int i <span class="token operator">=</span> t<span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> b<span class="token punctuation">;</span> i++<span class="token punctuation">)</span> mat<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>r<span class="token punctuation">]</span> <span class="token operator">=</span> num++<span class="token punctuation">;</span> // <span class="token function">top</span> to bottom.            r--<span class="token punctuation">;</span>            for<span class="token punctuation">(</span>int i <span class="token operator">=</span> r<span class="token punctuation">;</span> i <span class="token operator">&gt;=</span> l<span class="token punctuation">;</span> i--<span class="token punctuation">)</span> mat<span class="token punctuation">[</span>b<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> num++<span class="token punctuation">;</span> // right to left.            b--<span class="token punctuation">;</span>            for<span class="token punctuation">(</span>int i <span class="token operator">=</span> b<span class="token punctuation">;</span> i <span class="token operator">&gt;=</span> t<span class="token punctuation">;</span> i--<span class="token punctuation">)</span> mat<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>l<span class="token punctuation">]</span> <span class="token operator">=</span> num++<span class="token punctuation">;</span> // bottom to top.            l++<span class="token punctuation">;</span>        <span class="token punctuation">}</span>       // for<span class="token punctuation">(</span>int <span class="token assign-left variable">i</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i++<span class="token punctuation">)</span>//        <span class="token punctuation">{</span>for<span class="token punctuation">(</span>int <span class="token assign-left variable">j</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>j++<span class="token punctuation">)</span>//        cout<span class="token operator">&lt;&lt;</span>mat<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">&lt;&lt;</span><span class="token string">" "</span><span class="token punctuation">;</span>//cout<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span><span class="token punctuation">}</span>               cout<span class="token operator">&lt;&lt;</span>mat<span class="token punctuation">[</span><span class="token number">19</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">19</span><span class="token punctuation">]</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span><span class="token builtin class-name">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2022/03/27/luo-xuan-ju-zhen/2022-03-27_233652.png" alt="2022-03-27_233652"></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">//对称轴为x<span class="token operator">=</span>a-x-1，带入即可。另外，这种矩阵不存在奇偶数不相同的问题void SpiralArray<span class="token punctuation">(</span>int size, int** ar<span class="token punctuation">)</span><span class="token punctuation">{</span>        int <span class="token assign-left variable">a</span><span class="token operator">=</span>size<span class="token punctuation">;</span>    int <span class="token assign-left variable">y</span><span class="token operator">=</span>a/2,x<span class="token operator">=</span>a/2<span class="token punctuation">;</span>//从中心点开始    <span class="token keyword">for</span> <span class="token punctuation">(</span>int <span class="token assign-left variable">i</span><span class="token operator">=</span>size*size<span class="token punctuation">;</span>i<span class="token operator">&gt;=</span><span class="token number">1</span><span class="token punctuation">;</span>i--<span class="token punctuation">)</span>//<span class="token punctuation">(</span>int <span class="token assign-left variable">i</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>size*size<span class="token punctuation">;</span>i++<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>x<span class="token operator">&lt;=</span>a-y-1<span class="token operator">&amp;&amp;</span>x<span class="token operator">&gt;=</span>y<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            ar<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">[</span>a-x-1<span class="token punctuation">]</span><span class="token operator">=</span>i<span class="token punctuation">;</span>            x++<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>x<span class="token operator">&gt;</span>a-y-1<span class="token operator">&amp;&amp;</span>x<span class="token operator">&gt;</span>y<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            ar<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">[</span>a-x-1<span class="token punctuation">]</span><span class="token operator">=</span>i<span class="token punctuation">;</span>            y++<span class="token punctuation">;</span>        <span class="token punctuation">}</span>               <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>x<span class="token operator">&gt;</span>a-y-1<span class="token operator">&amp;&amp;</span>x<span class="token operator">&lt;=</span>y<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            ar<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">[</span>a-x-1<span class="token punctuation">]</span><span class="token operator">=</span>i<span class="token punctuation">;</span>            x--<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>x<span class="token operator">&lt;=</span>a-y-1<span class="token operator">&amp;&amp;</span>x<span class="token operator">&lt;</span>y<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            ar<span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">[</span>a-x-1<span class="token punctuation">]</span><span class="token operator">=</span>i<span class="token punctuation">;</span>            y--<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">//递归<span class="token comment">#include &lt;bits/stdc++.h&gt;</span>using namespace std<span class="token punctuation">;</span><span class="token comment">#define LL long long</span><span class="token comment">#define IO                       \</span>    ios::sync_with_stdio<span class="token punctuation">(</span>false<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">\</span>    cin.tie<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                  <span class="token punctuation">\</span>    cout.tie<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">#define x first</span><span class="token comment">#define y second</span>typedef pair<span class="token operator">&lt;</span>int, int<span class="token operator">&gt;</span> PII<span class="token punctuation">;</span>const int N <span class="token operator">=</span> <span class="token number">40</span><span class="token punctuation">;</span>int arr<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span>bool st<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span>int <span class="token function">sum</span> <span class="token operator">=</span> <span class="token number">30</span> * <span class="token number">30</span><span class="token punctuation">;</span>int dy<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span>, <span class="token number">0</span>, -1, <span class="token number">0</span><span class="token punctuation">}</span>, dx<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">0</span>, <span class="token number">1</span>, <span class="token number">0</span>, -1<span class="token punctuation">}</span><span class="token punctuation">;</span>  // 方向转变int cnt <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>/** * @brief * * @param x 坐标 * @param y * @param <span class="token function">dir</span> 当前应该往哪个方向走 * @param i 要填充的数 */void dfs<span class="token punctuation">(</span>int x, int y, int dir, int i<span class="token punctuation">)</span> <span class="token punctuation">{</span>    arr<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span>    st<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    cnt++<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>cnt <span class="token operator">&lt;</span> <span class="token function">sum</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        int a <span class="token operator">=</span> x + dx<span class="token punctuation">[</span>dir<span class="token punctuation">]</span>, b <span class="token operator">=</span> y + dy<span class="token punctuation">[</span>dir<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>a <span class="token operator">&gt;=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> a <span class="token operator">&lt;</span> <span class="token number">30</span> <span class="token operator">&amp;&amp;</span> b <span class="token operator">&gt;=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> b <span class="token operator">&lt;</span> <span class="token number">30</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>st<span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token punctuation">[</span>b<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            dfs<span class="token punctuation">(</span>a, b, dir, i + <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            // 如果越界就转方向            <span class="token function">dir</span> <span class="token operator">=</span> <span class="token punctuation">(</span>dir + <span class="token number">1</span><span class="token punctuation">)</span> % <span class="token number">4</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>int <span class="token function-name function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    dfs<span class="token punctuation">(</span><span class="token number">0</span>, <span class="token number">0</span>, <span class="token number">0</span>, <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>int i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">30</span><span class="token punctuation">;</span> i++<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>int j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> <span class="token number">30</span><span class="token punctuation">;</span> j++<span class="token punctuation">)</span> <span class="token punctuation">{</span>            printf<span class="token punctuation">(</span><span class="token string">"%d<span class="token entity" title="\t">\t</span>"</span>, arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        puts<span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    cout <span class="token operator">&lt;&lt;</span> arr<span class="token punctuation">[</span><span class="token number">19</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">19</span><span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token builtin class-name">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>尺取法-暴力滑动窗口</title>
      <link href="/2022/03/27/chi-qu-fa-bao-li-hua-dong-chuang-kou/"/>
      <url>/2022/03/27/chi-qu-fa-bao-li-hua-dong-chuang-kou/</url>
      
        <content type="html"><![CDATA[<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#include&lt;bits/stdc++.h&gt;</span>using namespace std<span class="token punctuation">;</span>const int <span class="token assign-left variable">N</span><span class="token operator">=</span>1e6+10<span class="token punctuation">;</span>typedef long long ll<span class="token punctuation">;</span>ll s<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span>int <span class="token function-name function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>ll n,m<span class="token punctuation">;</span>cin<span class="token operator">&gt;&gt;</span>n<span class="token operator">&gt;&gt;</span>m<span class="token punctuation">;</span>for<span class="token punctuation">(</span>ll <span class="token assign-left variable">i</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i++<span class="token punctuation">)</span>cin<span class="token operator">&gt;&gt;</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>for<span class="token punctuation">(</span>ll <span class="token assign-left variable">j</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;=</span>n-m<span class="token punctuation">;</span>j++<span class="token punctuation">)</span><span class="token punctuation">{</span>ll <span class="token assign-left variable">d</span><span class="token operator">=</span>0x3f3f3f<span class="token punctuation">;</span>for<span class="token punctuation">(</span>ll <span class="token assign-left variable">k</span><span class="token operator">=</span>j<span class="token punctuation">;</span>k<span class="token operator">&lt;</span>j+m<span class="token punctuation">;</span>k++<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token assign-left variable">d</span><span class="token operator">=</span>min<span class="token punctuation">(</span>d,s<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>cout<span class="token operator">&lt;&lt;</span>d<span class="token operator">&lt;&lt;</span><span class="token string">" "</span><span class="token punctuation">;</span><span class="token punctuation">}</span>        cout<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>for<span class="token punctuation">(</span>ll <span class="token assign-left variable">j</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;=</span>n-m<span class="token punctuation">;</span>j++<span class="token punctuation">)</span><span class="token punctuation">{</span>ll <span class="token assign-left variable">res</span><span class="token operator">=</span>-0x3f3f3f3f<span class="token punctuation">;</span>for<span class="token punctuation">(</span>ll <span class="token assign-left variable">k</span><span class="token operator">=</span>j<span class="token punctuation">;</span>k<span class="token operator">&lt;</span>j+m<span class="token punctuation">;</span>k++<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token assign-left variable">res</span><span class="token operator">=</span>max<span class="token punctuation">(</span>res,s<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>cout<span class="token operator">&lt;&lt;</span>res<span class="token operator">&lt;&lt;</span><span class="token string">" "</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token builtin class-name">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>求一个字符串所有字串</title>
      <link href="/2022/03/26/qiu-yi-ge-zi-fu-chuan-suo-you-zi-chuan/"/>
      <url>/2022/03/26/qiu-yi-ge-zi-fu-chuan-suo-you-zi-chuan/</url>
      
        <content type="html"><![CDATA[<pre class="line-numbers language-bash'" data-language="bash'"><code class="language-bash'">//暴力枚举-字串分值和#include&lt;bits/stdc++.h&gt;using namespace std;string s;multiset&lt;string&gt; a;int main(){cin&gt;&gt;s;int i=0;while(i&lt;s.size()){//枚举窗口宽度for(int j=0;j&lt;s.size()-i;j++)//枚举窗口出现位置{string c;for(int k=j;k&lt;=j+i;k++)// 枚举窗口宽度c+=s[k];//cout&lt;&lt;endl;a.insert(c);}i++;}int res=0;multiset&lt;string&gt;::iterator its;for(auto it:a)  {  set&lt;char&gt; b;  for(auto its:it){  b.insert(its);  //cout&lt;&lt;its&lt;&lt;"  ";//  cout&lt;&lt;"xxxx"&lt;&lt;b.size();  }  //cout&lt;&lt;b.size()&lt;&lt;endl;   res+=b.size();  //cout&lt;&lt;endl;  }  cout&lt;&lt;res&lt;&lt;endl;return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">//stl容器<span class="token comment">#include&lt;bits/stdc++.h&gt;</span>using namespace std<span class="token punctuation">;</span>string c<span class="token punctuation">;</span>int <span class="token function-name function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>   cin<span class="token operator">&gt;&gt;</span>c<span class="token punctuation">;</span>  int <span class="token assign-left variable">i</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>for<span class="token punctuation">(</span>int <span class="token assign-left variable">j</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>c.size<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>j++<span class="token punctuation">)</span>//枚举窗口出现位置<span class="token punctuation">{</span>for<span class="token punctuation">(</span>int <span class="token assign-left variable">k</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>k<span class="token operator">&lt;=</span>c.size<span class="token punctuation">(</span><span class="token punctuation">)</span>-j<span class="token punctuation">;</span>k++<span class="token punctuation">)</span>//枚举窗口宽度           <span class="token punctuation">{</span>cout<span class="token operator">&lt;&lt;</span>c.substr<span class="token punctuation">(</span>j,k<span class="token punctuation">)</span><span class="token punctuation">;</span>         cout<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token builtin class-name">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>回文日期</title>
      <link href="/2022/03/26/hui-wen-ri-qi/"/>
      <url>/2022/03/26/hui-wen-ri-qi/</url>
      
        <content type="html"><![CDATA[<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#include&lt;bits/stdc++.h&gt;</span>using namespace std<span class="token punctuation">;</span>int d1,d2<span class="token punctuation">;</span>int ds<span class="token punctuation">[</span><span class="token number">13</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">{</span><span class="token number">0,31</span>,0,31,30,31,30,31,31,30,31,30,31<span class="token punctuation">}</span><span class="token punctuation">;</span>int r<span class="token punctuation">(</span>int x<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token builtin class-name">return</span> <span class="token punctuation">(</span>x%4<span class="token operator">==</span><span class="token number">0</span><span class="token operator">&amp;&amp;</span>x%100<span class="token operator">!=</span><span class="token number">0</span><span class="token operator">||</span><span class="token punctuation">(</span>x%400<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">))</span>?29:28<span class="token punctuation">;</span><span class="token punctuation">}</span>int <span class="token assign-left variable">b</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>string to_string1<span class="token punctuation">(</span>int a<span class="token punctuation">)</span><span class="token punctuation">{</span>stringstream ss<span class="token punctuation">;</span>ss<span class="token operator">&lt;&lt;</span>a<span class="token punctuation">;</span>string c<span class="token punctuation">;</span>ss<span class="token operator">&gt;&gt;</span>c<span class="token punctuation">;</span><span class="token builtin class-name">return</span> c<span class="token punctuation">;</span><span class="token punctuation">}</span>int ishui<span class="token punctuation">(</span>int y,int m,int d<span class="token punctuation">)</span><span class="token punctuation">{</span>int <span class="token assign-left variable">c</span><span class="token operator">=</span>y*10000+m*100+d<span class="token punctuation">;</span>string <span class="token assign-left variable">s</span><span class="token operator">=</span>to_string1<span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>string s2<span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>reverse<span class="token punctuation">(</span>s2.begin<span class="token punctuation">(</span><span class="token punctuation">)</span>,s2.end<span class="token punctuation">(</span><span class="token punctuation">))</span><span class="token punctuation">;</span>if<span class="token punctuation">(</span>s2<span class="token operator">==</span>s<span class="token operator">&amp;&amp;</span><span class="token punctuation">(</span>y/100<span class="token operator">==</span>y%100<span class="token punctuation">)</span><span class="token operator">&amp;&amp;</span><span class="token punctuation">(</span>y/100%10<span class="token operator">==</span>y%10<span class="token punctuation">))</span><span class="token punctuation">{</span>cout<span class="token operator">&lt;&lt;</span>c<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span><span class="token builtin class-name">return</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token punctuation">}</span>if<span class="token punctuation">(</span>s2<span class="token operator">==</span>s<span class="token operator">&amp;&amp;</span><span class="token assign-left variable">b</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>b<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>cout<span class="token operator">&lt;&lt;</span>c<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span><span class="token builtin class-name">return</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token builtin class-name">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span>void init1<span class="token punctuation">(</span>int y,int m,int d<span class="token punctuation">)</span><span class="token punctuation">{</span>int <span class="token assign-left variable">flag</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token assign-left variable">d</span><span class="token operator">=</span>d+1<span class="token punctuation">;</span>while<span class="token punctuation">(</span>flag<span class="token punctuation">)</span><span class="token punctuation">{</span>bool <span class="token assign-left variable">f</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>if<span class="token punctuation">(</span>ishui<span class="token punctuation">(</span>y,m,d<span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token builtin class-name">break</span><span class="token punctuation">;</span><span class="token punctuation">}</span>if<span class="token punctuation">(</span>m<span class="token operator">==</span><span class="token number">2</span><span class="token operator">&amp;&amp;</span><span class="token assign-left variable">d</span><span class="token operator">==</span>r<span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token operator">||</span><span class="token punctuation">(</span>m<span class="token operator">!=</span><span class="token number">2</span><span class="token operator">&amp;&amp;</span><span class="token assign-left variable">d</span><span class="token operator">==</span>ds<span class="token punctuation">[</span>m<span class="token punctuation">]</span><span class="token punctuation">))</span><span class="token punctuation">{</span>m++<span class="token punctuation">;</span><span class="token assign-left variable">d</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token assign-left variable">f</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span>if<span class="token punctuation">(</span>m<span class="token operator">==</span><span class="token number">13</span><span class="token punctuation">)</span><span class="token punctuation">{</span>y++<span class="token punctuation">;</span><span class="token assign-left variable">m</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token assign-left variable">d</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token assign-left variable">f</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span>if<span class="token punctuation">(</span>f<span class="token punctuation">)</span>d++<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span>int <span class="token function-name function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>int <span class="token assign-left variable">d</span><span class="token operator">=</span><span class="token number">0</span>,m<span class="token operator">=</span><span class="token number">0</span>,y<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>int a<span class="token punctuation">;</span>cin<span class="token operator">&gt;&gt;</span>a<span class="token punctuation">;</span><span class="token assign-left variable">b</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token assign-left variable">y</span><span class="token operator">=</span>a/10000<span class="token punctuation">;</span><span class="token assign-left variable">m</span><span class="token operator">=</span>a/100%100<span class="token punctuation">;</span><span class="token assign-left variable">d</span><span class="token operator">=</span>a%100<span class="token punctuation">;</span>init1<span class="token punctuation">(</span>y,m,d<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token builtin class-name">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>数论模板</title>
      <link href="/2022/03/25/shu-lun-mo-ban/"/>
      <url>/2022/03/25/shu-lun-mo-ban/</url>
      
        <content type="html"><![CDATA[<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#include&lt;bits/stdc++.h&gt;</span>using namespace std<span class="token punctuation">;</span>//试除法判断质数bool isprime<span class="token punctuation">(</span>int n<span class="token punctuation">)</span><span class="token punctuation">{</span>if<span class="token punctuation">(</span>n<span class="token operator">&lt;</span><span class="token number">2</span><span class="token punctuation">)</span>return <span class="token boolean">false</span><span class="token punctuation">;</span>for<span class="token punctuation">(</span>int <span class="token assign-left variable">i</span><span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>i/n<span class="token punctuation">;</span>i++<span class="token punctuation">)</span>if<span class="token punctuation">(</span>n%i<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span>return <span class="token boolean">false</span><span class="token punctuation">;</span> <span class="token builtin class-name">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">}</span>  // 分解质因数 void divide<span class="token punctuation">(</span>int n<span class="token punctuation">)</span><span class="token punctuation">{</span>for<span class="token punctuation">(</span>int <span class="token assign-left variable">i</span><span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n/i<span class="token punctuation">;</span>i++<span class="token punctuation">)</span><span class="token punctuation">{</span>if<span class="token punctuation">(</span>n%i<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>//能整除的一定是质数 int <span class="token assign-left variable">s</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>while<span class="token punctuation">(</span>n%i<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span>n/<span class="token operator">=</span>i,s++<span class="token punctuation">;</span>cout<span class="token operator">&lt;&lt;</span>i<span class="token operator">&lt;&lt;</span><span class="token string">" "</span><span class="token operator">&lt;&lt;</span>s<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>//输出一个质因子和其指数 <span class="token punctuation">}</span> <span class="token punctuation">}</span>if<span class="token punctuation">(</span>n<span class="token operator">&gt;</span><span class="token number">1</span><span class="token punctuation">)</span>cout<span class="token operator">&lt;&lt;</span>n<span class="token operator">&lt;&lt;</span><span class="token string">" "</span><span class="token operator">&lt;&lt;</span><span class="token string">"1"</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>//剩余的一个质因数及其指数 <span class="token punctuation">}</span>// 线性筛法求1~n以内所以素数const int <span class="token assign-left variable">N</span><span class="token operator">=</span><span class="token number">100010</span><span class="token punctuation">;</span>int primes<span class="token punctuation">[</span>N<span class="token punctuation">]</span>,cnt<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>//primes储存所有素数 bool v<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span>//v储存x是否被删掉 void get_primes<span class="token punctuation">(</span>int n<span class="token punctuation">)</span><span class="token punctuation">{</span>for<span class="token punctuation">(</span>int <span class="token assign-left variable">i</span><span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i++<span class="token punctuation">)</span><span class="token punctuation">{</span>if<span class="token punctuation">(</span><span class="token operator">!</span>v<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>primes<span class="token punctuation">[</span>cnt++<span class="token punctuation">]</span><span class="token operator">=</span>i<span class="token punctuation">;</span>//从2开始填充质数数组 for<span class="token punctuation">(</span>int <span class="token assign-left variable">j</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>primes<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">&lt;=</span>n/i<span class="token punctuation">;</span>j++<span class="token punctuation">)</span><span class="token punctuation">{</span>v<span class="token punctuation">[</span>primes<span class="token punctuation">[</span>j<span class="token punctuation">]</span>*i<span class="token punctuation">]</span><span class="token operator">=</span>true<span class="token punctuation">;</span>//保证了每个数最多筛一次且被其最小质因子筛掉 if<span class="token punctuation">(</span>i%primes<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span>break<span class="token punctuation">;</span>//这里的primes<span class="token punctuation">[</span>j<span class="token punctuation">]</span>一定是最小质因子,保证了每个合数都被其最小质因子筛掉//例如i<span class="token operator">=</span><span class="token number">6</span>；当12<span class="token operator">=</span>true，6%2<span class="token operator">==</span><span class="token number">0</span>；break，即筛掉12就break，即12被它的最小质因子2筛掉， 而6x3<span class="token operator">=</span><span class="token number">18</span>，最小质因子是2，即当i<span class="token operator">=</span><span class="token number">9</span>时18才被筛 //每个合数又一定都有一个最小质因子，因此从2枚举到n，每个合数都被其最小质因子筛掉，因此是线性的 <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span>//试除法求所有约数vector<span class="token operator">&lt;</span>int<span class="token operator">&gt;</span> gety<span class="token punctuation">(</span>int n<span class="token punctuation">)</span><span class="token punctuation">{</span>vector<span class="token operator">&lt;</span>int<span class="token operator">&gt;</span> res<span class="token punctuation">;</span>for<span class="token punctuation">(</span>int <span class="token assign-left variable">i</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n/i<span class="token punctuation">;</span>i++<span class="token punctuation">)</span><span class="token punctuation">{</span>if<span class="token punctuation">(</span>n%i<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>res.push_back<span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>if<span class="token punctuation">(</span>i<span class="token operator">!=</span>n/i<span class="token punctuation">)</span>res.push_back<span class="token punctuation">(</span>n/i<span class="token punctuation">)</span><span class="token punctuation">;</span>//去除n是平方使得i有两个值并push大于sqrt<span class="token punctuation">(</span>n<span class="token punctuation">)</span>的约数 <span class="token punctuation">}</span><span class="token punctuation">}</span>sort<span class="token punctuation">(</span>res.begin<span class="token punctuation">(</span><span class="token punctuation">)</span>,res.end<span class="token punctuation">(</span><span class="token punctuation">))</span><span class="token punctuation">;</span><span class="token builtin class-name">return</span> res<span class="token punctuation">;</span><span class="token punctuation">}</span> //欧几里得算法int gcd<span class="token punctuation">(</span>int a,int b<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token builtin class-name">return</span> b?gcd<span class="token punctuation">(</span>b,a%b<span class="token punctuation">)</span>:a<span class="token punctuation">;</span><span class="token punctuation">}</span>//拓展欧几里得算法// 求x, y，使得ax + by <span class="token operator">=</span> gcd<span class="token punctuation">(</span>a, b<span class="token punctuation">)</span>int exgcd<span class="token punctuation">(</span>int a, int b, int <span class="token operator">&amp;</span>x, int <span class="token operator">&amp;</span>y<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>b<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        x <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> y <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token builtin class-name">return</span> a<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    int d <span class="token operator">=</span> exgcd<span class="token punctuation">(</span>b, a % b, y, x<span class="token punctuation">)</span><span class="token punctuation">;</span>    y -<span class="token operator">=</span> <span class="token punctuation">(</span>a/b<span class="token punctuation">)</span> * x<span class="token punctuation">;</span>    <span class="token builtin class-name">return</span> d<span class="token punctuation">;</span><span class="token punctuation">}</span>//快速幂算法//即每次取k的二进制末位并判断是否为1，若为1就乘上2的对应的m的原k的二进制表示的位次上幂次的幂次 并取模 int qmi<span class="token punctuation">(</span>int n,int k,int p<span class="token punctuation">)</span><span class="token punctuation">{</span>int <span class="token assign-left variable">res</span><span class="token operator">=</span><span class="token number">1</span>%p,t<span class="token operator">=</span>n<span class="token punctuation">;</span>//%p增上p<span class="token operator">=</span><span class="token number">0</span>特殊情况，t为底数 while<span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">{</span>if<span class="token punctuation">(</span>k<span class="token operator">&amp;</span><span class="token number">1</span><span class="token punctuation">)</span>res<span class="token operator">=</span>res*t%p<span class="token punctuation">;</span>//首先第一次先与1看k二进制末位是否为0 <span class="token assign-left variable">t</span><span class="token operator">=</span>t*t%p<span class="token punctuation">;</span>//第二次的时候如果k的末位是1，在第一次的时候就把t变为平方迭代 ，这句每次都会运行 k<span class="token operator">&gt;&gt;</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span> //把指数右移一位，取k的末位，5可以分解为2^0+2^1*0+2^2 <span class="token punctuation">}</span><span class="token builtin class-name">return</span> res<span class="token punctuation">;</span><span class="token punctuation">}</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> 数论 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>进制转换</title>
      <link href="/2022/03/25/jin-zhi-zhuan-huan/"/>
      <url>/2022/03/25/jin-zhi-zhuan-huan/</url>
      
        <content type="html"><![CDATA[<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">//10进制转任意进制 <span class="token comment">#include&lt;bits/stdc++.h&gt;</span>using namespace std<span class="token punctuation">;</span>int n,a<span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span>,b,c,j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>int <span class="token function-name function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    cin<span class="token operator">&gt;&gt;</span>b<span class="token punctuation">;</span>    cin<span class="token operator">&gt;&gt;</span>n<span class="token punctuation">;</span>    while<span class="token punctuation">(</span>b<span class="token operator">!=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token assign-left variable">c</span><span class="token operator">=</span>b%n<span class="token punctuation">;</span>    <span class="token assign-left variable">b</span><span class="token operator">=</span>b/n<span class="token punctuation">;</span>    j++<span class="token punctuation">;</span>    a<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span>c<span class="token punctuation">;</span>    <span class="token punctuation">}</span>        for<span class="token punctuation">(</span>int <span class="token assign-left variable">i</span><span class="token operator">=</span>j<span class="token punctuation">;</span>i<span class="token operator">&gt;=</span><span class="token number">1</span><span class="token punctuation">;</span>i--<span class="token punctuation">)</span><span class="token punctuation">{</span>    if<span class="token punctuation">(</span>a<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">&gt;</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    cout<span class="token operator">&lt;&lt;</span><span class="token punctuation">(</span>char<span class="token punctuation">)</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>j<span class="token punctuation">]</span>+55<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span>    cout<span class="token operator">&lt;&lt;</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token builtin class-name">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">//任意进制转10进制<span class="token comment">#include&lt;bits/stdc++.h&gt;</span>using namespace std<span class="token punctuation">;</span> int toten<span class="token punctuation">(</span>string s,int n<span class="token punctuation">)</span><span class="token punctuation">{</span>int <span class="token assign-left variable">ans</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>for<span class="token punctuation">(</span>int <span class="token assign-left variable">i</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>s.size<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>i++<span class="token punctuation">)</span><span class="token punctuation">{</span>char <span class="token assign-left variable">t</span><span class="token operator">=</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>if<span class="token punctuation">(</span>t<span class="token operator">&lt;=</span><span class="token string">'9'</span><span class="token operator">&amp;&amp;</span>t<span class="token operator">&gt;=</span><span class="token string">'0'</span><span class="token punctuation">)</span>ans<span class="token operator">=</span>ans*n+t-<span class="token string">'0'</span><span class="token punctuation">;</span><span class="token keyword">else</span><span class="token assign-left variable">ans</span><span class="token operator">=</span>ans*n+t-<span class="token string">'A'</span>+10<span class="token punctuation">;</span>//小写-<span class="token string">'a'</span> <span class="token punctuation">}</span><span class="token builtin class-name">return</span> ans<span class="token punctuation">;</span><span class="token punctuation">}</span>int <span class="token function-name function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>cout<span class="token operator">&lt;&lt;</span>toten<span class="token punctuation">(</span><span class="token string">"A1"</span>,16<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token builtin class-name">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> 数论 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>括号序列</title>
      <link href="/2022/03/23/gua-hao-xu-lie/"/>
      <url>/2022/03/23/gua-hao-xu-lie/</url>
      
        <content type="html"><![CDATA[<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">//暴力<span class="token comment">#include&lt;bits/stdc++.h&gt;</span>using namespace std<span class="token punctuation">;</span>int n<span class="token punctuation">;</span>string s<span class="token punctuation">;</span>set<span class="token operator">&lt;</span>string<span class="token operator">&gt;</span> ret<span class="token punctuation">;</span>void dfs<span class="token punctuation">(</span>int l,int r,int al,int ar,int idx,string cur<span class="token punctuation">)</span><span class="token punctuation">{</span>//index表示在原括号字符串的下标//cur表示此时形成的括号序列是什么样的//l遍历至此有多少左括号，r表示右括号。dl和dr同上     if<span class="token punctuation">(</span>idx<span class="token operator">==</span>n<span class="token punctuation">)</span><span class="token punctuation">{</span>//s的下标从零开始         if<span class="token punctuation">(</span><span class="token operator">!</span>al<span class="token operator">&amp;&amp;</span><span class="token operator">!</span>ar<span class="token punctuation">)</span>            ret.insert<span class="token punctuation">(</span>cur<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token builtin class-name">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    if<span class="token punctuation">(</span>al<span class="token punctuation">)</span>        dfs<span class="token punctuation">(</span>l+1,r,al-1,ar,idx,cur+<span class="token string">'('</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     if<span class="token punctuation">(</span>ar<span class="token operator">&amp;&amp;</span>l<span class="token operator">&gt;</span>r<span class="token punctuation">)</span>        dfs<span class="token punctuation">(</span>l,r+1,al,ar-1,idx,cur+<span class="token string">')'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    if<span class="token punctuation">(</span>s<span class="token punctuation">[</span>idx<span class="token punctuation">]</span><span class="token operator">==</span><span class="token string">'('</span><span class="token punctuation">)</span>//从头开始遍历         dfs<span class="token punctuation">(</span>l+1,r,al,ar,idx+1,cur+<span class="token string">'('</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">else</span> if<span class="token punctuation">(</span>l<span class="token operator">&gt;</span>r<span class="token punctuation">)</span>        dfs<span class="token punctuation">(</span>l,r+1,al,ar,idx+1,cur+<span class="token string">')'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>int <span class="token function-name function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    cin<span class="token operator">&gt;&gt;</span>s<span class="token punctuation">;</span>    <span class="token assign-left variable">n</span><span class="token operator">=</span>s.size<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    int <span class="token assign-left variable">al</span><span class="token operator">=</span><span class="token number">0</span>,ar<span class="token operator">=</span><span class="token number">0</span>,l<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>//al为还需要添加的左括号数量，ar表示还需要添加的右括号数量     for<span class="token punctuation">(</span>auto c:s<span class="token punctuation">)</span><span class="token punctuation">{</span>        if<span class="token punctuation">(</span>c<span class="token operator">==</span><span class="token string">'('</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            l++<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span> if<span class="token punctuation">(</span>c<span class="token operator">==</span><span class="token string">')'</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            if<span class="token punctuation">(</span>l<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span>                al++<span class="token punctuation">;</span>            else<span class="token punctuation">{</span>                l--<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token assign-left variable">ar</span><span class="token operator">=</span>l<span class="token punctuation">;</span>    dfs<span class="token punctuation">(</span><span class="token number">0,0</span>,al,ar,0,<span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cout<span class="token operator">&lt;&lt;</span>ret.size<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">//dp<span class="token comment">#include &lt;iostream&gt;</span><span class="token comment">#include &lt;cstring&gt;</span><span class="token comment">#include &lt;algorithm&gt;</span><span class="token comment">#include &lt;stdio.h&gt;</span>using namespace std<span class="token punctuation">;</span>typedef long long LL<span class="token punctuation">;</span>const int <span class="token assign-left variable">MOD</span><span class="token operator">=</span><span class="token number">1000000007</span><span class="token punctuation">;</span>const int <span class="token assign-left variable">N</span><span class="token operator">=</span><span class="token number">5010</span><span class="token punctuation">;</span>LL dp<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span>char str<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span>int len<span class="token punctuation">;</span>LL <span class="token function-name function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    memset<span class="token punctuation">(</span>dp,0,sizeof<span class="token punctuation">(</span>dp<span class="token punctuation">))</span><span class="token punctuation">;</span>    dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>    for<span class="token punctuation">(</span>int <span class="token assign-left variable">i</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>len<span class="token punctuation">;</span>i++<span class="token punctuation">)</span>//一个括号一个括号的判断    <span class="token punctuation">{</span>        if<span class="token punctuation">(</span>str<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span><span class="token string">'('</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            for<span class="token punctuation">(</span>int <span class="token assign-left variable">j</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;=</span>len<span class="token punctuation">;</span>j++<span class="token punctuation">)</span>            <span class="token punctuation">{</span>                dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span>dp<span class="token punctuation">[</span>i-1<span class="token punctuation">]</span><span class="token punctuation">[</span>j-1<span class="token punctuation">]</span><span class="token punctuation">;</span>//不用考虑dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> 因为dp<span class="token punctuation">[</span>i-1<span class="token punctuation">]</span><span class="token punctuation">[</span>-1<span class="token punctuation">]</span>是不合法的情况 不存在 为0            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span>        <span class="token punctuation">{</span>            dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i-1<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>+dp<span class="token punctuation">[</span>i-1<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>%MOD<span class="token punctuation">;</span>//特判防止越界 这里数据短，用的是优化前的推断            for<span class="token punctuation">(</span>int <span class="token assign-left variable">j</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;=</span>len<span class="token punctuation">;</span>j++<span class="token punctuation">)</span>            <span class="token punctuation">{</span>                 dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i-1<span class="token punctuation">]</span><span class="token punctuation">[</span>j+1<span class="token punctuation">]</span> + dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j-1<span class="token punctuation">]</span><span class="token punctuation">)</span>%MOD<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    for<span class="token punctuation">(</span>int <span class="token assign-left variable">i</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>len<span class="token punctuation">;</span>i++<span class="token punctuation">)</span>        if<span class="token punctuation">(</span>dp<span class="token punctuation">[</span>len<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token builtin class-name">return</span> dp<span class="token punctuation">[</span>len<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>//我们需要的就是长度为len添加括号的合法情况，而从前往后遍历出现的第一个有可能的情况就是需要括号数最少的情况，因为左括号可以加很多个，我们仅需添加最少的情况        <span class="token builtin class-name">return</span> -1<span class="token punctuation">;</span><span class="token punctuation">}</span>int <span class="token function-name function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    scanf<span class="token punctuation">(</span><span class="token string">"%s"</span>,str+1<span class="token punctuation">)</span><span class="token punctuation">;</span>//从下标为1开始    <span class="token assign-left variable">len</span><span class="token operator">=</span>strlen<span class="token punctuation">(</span>str+1<span class="token punctuation">)</span><span class="token punctuation">;</span>    LL <span class="token assign-left variable">l</span><span class="token operator">=</span>func<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    reverse<span class="token punctuation">(</span>str+1,str+len+1<span class="token punctuation">)</span><span class="token punctuation">;</span>    for<span class="token punctuation">(</span>int <span class="token assign-left variable">i</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>len<span class="token punctuation">;</span>i++<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        if<span class="token punctuation">(</span>str<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span><span class="token string">'('</span><span class="token punctuation">)</span> str<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">')'</span><span class="token punctuation">;</span>        <span class="token keyword">else</span> str<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">'('</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    LL <span class="token assign-left variable">r</span><span class="token operator">=</span>func<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cout<span class="token operator">&lt;&lt;</span>l*r%MOD<span class="token punctuation">;</span>    <span class="token builtin class-name">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>砝码称重</title>
      <link href="/2022/03/23/fa-ma-cheng-chong/"/>
      <url>/2022/03/23/fa-ma-cheng-chong/</url>
      
        <content type="html"><![CDATA[<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">题目描述你有一架天平和N 个砝码，这N 个砝码重量依次是W1, W2, <span class="token punctuation">..</span>. , WN。请你计算一共可以称出多少种不同的重量？注意砝码可以放在天平两边。输入格式输入的第一行包含一个整数N。第二行包含N 个整数：W1, W2, W3, <span class="token punctuation">..</span>. , WN。对于50% 的评测用例，1 ≤ N ≤ <span class="token number">15</span>。对于所有评测用例，1 ≤ N ≤ <span class="token number">100</span>，N 个砝码总重不超过100000。输出格式输出一个整数代表答案。输入样例 复制<span class="token number">3</span><span class="token number">1</span> <span class="token number">4</span> <span class="token number">6</span>输出样例 复制<span class="token number">10</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2022/03/23/fa-ma-cheng-chong/6.png" alt="6"></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">//上面这个集合为从前i个物品中选且能称出重量为j的集合，在想集合是一定要加上属性<span class="token comment">#include&lt;bits/stdc++.h&gt;</span>using namespace std<span class="token punctuation">;</span>const int N <span class="token operator">=</span> <span class="token number">105</span>,M<span class="token operator">=</span>1e5+10<span class="token punctuation">;</span>int w<span class="token punctuation">[</span>N<span class="token punctuation">]</span>,n,sum<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>bool f<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">[</span>M<span class="token punctuation">]</span><span class="token punctuation">;</span>int <span class="token function-name function">dp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>for<span class="token punctuation">(</span>int <span class="token assign-left variable">i</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i++<span class="token punctuation">)</span>for<span class="token punctuation">(</span>int <span class="token assign-left variable">j</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;=</span>sum<span class="token punctuation">;</span>j++<span class="token punctuation">)</span>//虽然题目中没有但这里得要加上，因为表示的是集合，即f<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">{</span>f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span>f<span class="token punctuation">[</span>i-1<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">||</span>f<span class="token punctuation">[</span>i-1<span class="token punctuation">]</span><span class="token punctuation">[</span>abs<span class="token punctuation">(</span>j-w<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token operator">||</span>f<span class="token punctuation">[</span>i-1<span class="token punctuation">]</span><span class="token punctuation">[</span>j+w<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>//因为集合所有元素只有2种属性0或者1，且上述三种状态中，只要有一个为1，f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span>就非空<span class="token punctuation">}</span><span class="token punctuation">}</span>int <span class="token function-name function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>cin<span class="token operator">&gt;&gt;</span>n<span class="token punctuation">;</span>for<span class="token punctuation">(</span>int <span class="token assign-left variable">i</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i++<span class="token punctuation">)</span><span class="token punctuation">{</span>cin<span class="token operator">&gt;&gt;</span>w<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token assign-left variable">sum</span><span class="token operator">+=</span>w<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span>f<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span>true<span class="token punctuation">;</span>//一定要赋初值，这里无论i多少都能称出为0的重量dp<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>int <span class="token assign-left variable">ans</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>for<span class="token punctuation">(</span>int <span class="token assign-left variable">j</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;=</span>sum<span class="token punctuation">;</span>j++<span class="token punctuation">)</span><span class="token punctuation">{</span>if<span class="token punctuation">(</span>f<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span>ans++<span class="token punctuation">;</span><span class="token punctuation">}</span>cout<span class="token operator">&lt;&lt;</span>ans<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">//dfs爆搜<span class="token comment">#include&lt;bits/stdc++.h&gt;</span>using namespace std<span class="token punctuation">;</span>const int <span class="token assign-left variable">N</span><span class="token operator">=</span>1e5+10<span class="token punctuation">;</span>int n,a<span class="token punctuation">[</span>N<span class="token punctuation">]</span>,res<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>bool v<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span>void dfs<span class="token punctuation">(</span>int u,int w<span class="token punctuation">)</span><span class="token punctuation">{</span>//选取第u个数和第u个数的重量，可能为以下三种情况 if<span class="token punctuation">(</span>u<span class="token operator">&gt;</span>n<span class="token punctuation">)</span><span class="token punctuation">{</span>//u<span class="token operator">&gt;</span>n说明选完第u个砝码 if<span class="token punctuation">(</span><span class="token operator">!</span>v<span class="token punctuation">[</span>w<span class="token punctuation">]</span><span class="token operator">&amp;&amp;</span>w<span class="token operator">&gt;</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>//注意这里都是重量 res++<span class="token punctuation">;</span>//cout<span class="token operator">&lt;&lt;</span>w<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>v<span class="token punctuation">[</span>w<span class="token punctuation">]</span><span class="token operator">=</span>true<span class="token punctuation">;</span>//标记一下重量 <span class="token builtin class-name">return</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span>//还没选够n个砝码 <span class="token keyword">else</span><span class="token punctuation">{</span>dfs<span class="token punctuation">(</span>u+1,w-a<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>//砝码放左边 dfs<span class="token punctuation">(</span>u+1,w+a<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>//砝码放右边 dfs<span class="token punctuation">(</span>u+1,w<span class="token punctuation">)</span><span class="token punctuation">;</span>//跳过不选用当前砝码，爆搜时一定不要忘了这个 <span class="token punctuation">}</span><span class="token punctuation">}</span>int <span class="token function-name function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>ios::sync_with_stdio<span class="token punctuation">(</span>false<span class="token punctuation">)</span><span class="token punctuation">;</span>cin.tie<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>//用了上面这两行就不能用scanf，取消读入缓冲区 cin<span class="token operator">&gt;&gt;</span>n<span class="token punctuation">;</span>for<span class="token punctuation">(</span>int <span class="token assign-left variable">i</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i++<span class="token punctuation">)</span><span class="token punctuation">{</span>cin<span class="token operator">&gt;&gt;</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span>dfs<span class="token punctuation">(</span><span class="token number">0,0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>cout<span class="token operator">&lt;&lt;</span>res<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span><span class="token builtin class-name">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> dp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>高精度模板</title>
      <link href="/2022/03/22/gao-jing-du-mo-ban/"/>
      <url>/2022/03/22/gao-jing-du-mo-ban/</url>
      
        <content type="html"><![CDATA[<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">// C <span class="token operator">=</span> A + B, A <span class="token operator">&gt;=</span> <span class="token number">0</span>, B <span class="token operator">&gt;=</span> <span class="token number">0</span>vector<span class="token operator">&lt;</span>int<span class="token operator">&gt;</span> add<span class="token punctuation">(</span>vector<span class="token operator">&lt;</span>int<span class="token operator">&gt;</span> <span class="token operator">&amp;</span>A, vector<span class="token operator">&lt;</span>int<span class="token operator">&gt;</span> <span class="token operator">&amp;</span>B<span class="token punctuation">)</span>//引用共地址减少拷贝构造次数<span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>A.size<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> B.size<span class="token punctuation">(</span><span class="token punctuation">))</span> <span class="token builtin class-name">return</span> add<span class="token punctuation">(</span>B, A<span class="token punctuation">)</span><span class="token punctuation">;</span>    vector<span class="token operator">&lt;</span>int<span class="token operator">&gt;</span> C<span class="token punctuation">;</span>    int t <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>int i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> A.size<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i ++ <span class="token punctuation">)</span>    <span class="token punctuation">{</span>        t <span class="token operator">+=</span> A<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> B.size<span class="token punctuation">(</span><span class="token punctuation">))</span> t <span class="token operator">+=</span> B<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        C.push_back<span class="token punctuation">(</span>t % <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        t /<span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>t<span class="token punctuation">)</span> C.push_back<span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token builtin class-name">return</span> C<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">// C <span class="token operator">=</span> A - B, 满足A <span class="token operator">&gt;=</span> B, A <span class="token operator">&gt;=</span> <span class="token number">0</span>, B <span class="token operator">&gt;=</span> <span class="token number">0</span>vector<span class="token operator">&lt;</span>int<span class="token operator">&gt;</span> sub<span class="token punctuation">(</span>vector<span class="token operator">&lt;</span>int<span class="token operator">&gt;</span> <span class="token operator">&amp;</span>A, vector<span class="token operator">&lt;</span>int<span class="token operator">&gt;</span> <span class="token operator">&amp;</span>B<span class="token punctuation">)</span><span class="token punctuation">{</span>    vector<span class="token operator">&lt;</span>int<span class="token operator">&gt;</span> C<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>int i <span class="token operator">=</span> <span class="token number">0</span>, t <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> A.size<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i ++ <span class="token punctuation">)</span>    <span class="token punctuation">{</span>        t <span class="token operator">=</span> A<span class="token punctuation">[</span>i<span class="token punctuation">]</span> - t<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> B.size<span class="token punctuation">(</span><span class="token punctuation">))</span> t -<span class="token operator">=</span> B<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        C.push_back<span class="token punctuation">((</span>t + <span class="token number">10</span><span class="token punctuation">)</span> % <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>t <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> t <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">else</span> t <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>C.size<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> C.back<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> C.pop_back<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token builtin class-name">return</span> C<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">// C <span class="token operator">=</span> A * b, A <span class="token operator">&gt;=</span> <span class="token number">0</span>, b <span class="token operator">&gt;=</span> <span class="token number">0</span>vector<span class="token operator">&lt;</span>int<span class="token operator">&gt;</span> mul<span class="token punctuation">(</span>vector<span class="token operator">&lt;</span>int<span class="token operator">&gt;</span> <span class="token operator">&amp;</span>A, int b<span class="token punctuation">)</span><span class="token punctuation">{</span>    vector<span class="token operator">&lt;</span>int<span class="token operator">&gt;</span> C<span class="token punctuation">;</span>    int t <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>int i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> A.size<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">||</span> t<span class="token punctuation">;</span> i ++ <span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> A.size<span class="token punctuation">(</span><span class="token punctuation">))</span> t <span class="token operator">+=</span> A<span class="token punctuation">[</span>i<span class="token punctuation">]</span> * b<span class="token punctuation">;</span>        C.push_back<span class="token punctuation">(</span>t % <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        t /<span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>C.size<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> C.back<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> C.pop_back<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token builtin class-name">return</span> C<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">// A / b <span class="token operator">=</span> C <span class="token punctuation">..</span>. r, A <span class="token operator">&gt;=</span> <span class="token number">0</span>, b <span class="token operator">&gt;</span> <span class="token number">0</span>vector<span class="token operator">&lt;</span>int<span class="token operator">&gt;</span> div<span class="token punctuation">(</span>vector<span class="token operator">&lt;</span>int<span class="token operator">&gt;</span> <span class="token operator">&amp;</span>A, int b, int <span class="token operator">&amp;</span>r<span class="token punctuation">)</span><span class="token punctuation">{</span>    vector<span class="token operator">&lt;</span>int<span class="token operator">&gt;</span> C<span class="token punctuation">;</span>    r <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>int i <span class="token operator">=</span> A.size<span class="token punctuation">(</span><span class="token punctuation">)</span> - <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">;</span> i -- <span class="token punctuation">)</span>    <span class="token punctuation">{</span>        r <span class="token operator">=</span> r * <span class="token number">10</span> + A<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        C.push_back<span class="token punctuation">(</span>r / b<span class="token punctuation">)</span><span class="token punctuation">;</span>        r %<span class="token operator">=</span> b<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    reverse<span class="token punctuation">(</span>C.begin<span class="token punctuation">(</span><span class="token punctuation">)</span>, C.end<span class="token punctuation">(</span><span class="token punctuation">))</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>C.size<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> C.back<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> C.pop_back<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token builtin class-name">return</span> C<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前缀和和差分</title>
      <link href="/2022/03/22/qian-zhui-he-he-chai-fen/"/>
      <url>/2022/03/22/qian-zhui-he-he-chai-fen/</url>
      
        <content type="html"><![CDATA[<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">//一维前缀和s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>a<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>+a<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span>+<span class="token punctuation">..</span><span class="token punctuation">..</span>+a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span>-s<span class="token punctuation">[</span>i-1<span class="token punctuation">]</span><span class="token punctuation">;</span>//二维前缀和s<span class="token punctuation">[</span>i,j<span class="token punctuation">]</span>为第i行j列的格子左上部分所有元素的和则以<span class="token punctuation">(</span>x1,y1<span class="token punctuation">)</span>为矩阵左上角,<span class="token punctuation">(</span>x2,y2<span class="token punctuation">)</span>为矩阵右下角的矩阵中所有元素的和为 s<span class="token punctuation">[</span>x2,y2<span class="token punctuation">]</span>-s<span class="token punctuation">[</span>x1-1,y2<span class="token punctuation">]</span>-s<span class="token punctuation">[</span>x2,y1-1<span class="token punctuation">]</span>+s<span class="token punctuation">[</span>x1-1,y1-1<span class="token punctuation">]</span><span class="token punctuation">;</span>// 一维差分c<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span>-a<span class="token punctuation">[</span>i-1<span class="token punctuation">]</span>给区间<span class="token punctuation">[</span>l,r<span class="token punctuation">]</span>中每个数加上d，只需使得c<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token operator">+=</span>d,c<span class="token punctuation">[</span>r+1<span class="token punctuation">]</span>-<span class="token operator">=</span>d<span class="token punctuation">;</span> void insert<span class="token punctuation">(</span>int l,int r,int d<span class="token punctuation">)</span><span class="token punctuation">{</span>//也使用insert构造差分数组 c<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token operator">+=</span>d<span class="token punctuation">;</span>c<span class="token punctuation">[</span>r+1<span class="token punctuation">]</span>-<span class="token operator">=</span>d<span class="token punctuation">;</span><span class="token punctuation">}</span>//二维差分 c<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span>c<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j-1<span class="token punctuation">]</span><span class="token punctuation">;</span> 给以<span class="token punctuation">(</span>x1,y1<span class="token punctuation">)</span>为矩阵左上角，<span class="token punctuation">(</span>x2,y2<span class="token punctuation">)</span>为矩阵右下角的子矩阵整个矩阵的每个元素加上d void insert<span class="token punctuation">(</span>int x1,int y1,int x2,int y2,int d<span class="token punctuation">)</span><span class="token punctuation">{</span>//构造差分数组和给每个矩阵元素加上d c<span class="token punctuation">[</span>x1<span class="token punctuation">]</span><span class="token punctuation">[</span>y1<span class="token punctuation">]</span><span class="token operator">+=</span>d<span class="token punctuation">;</span>c<span class="token punctuation">[</span>x2+1<span class="token punctuation">]</span><span class="token punctuation">[</span>y2+1<span class="token punctuation">]</span><span class="token operator">+=</span>d<span class="token punctuation">;</span>c<span class="token punctuation">[</span>x2+1<span class="token punctuation">]</span><span class="token punctuation">[</span>y1+1<span class="token punctuation">]</span>-<span class="token operator">=</span>d<span class="token punctuation">;</span>c<span class="token punctuation">[</span>x1<span class="token punctuation">]</span><span class="token punctuation">[</span>y2+1<span class="token punctuation">]</span>-<span class="token operator">=</span>d<span class="token punctuation">;</span><span class="token punctuation">}</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>浮点二分</title>
      <link href="/2022/03/22/fu-dian-er-fen/"/>
      <url>/2022/03/22/fu-dian-er-fen/</url>
      
        <content type="html"><![CDATA[<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">int bs<span class="token punctuation">(</span>double a<span class="token punctuation">[</span><span class="token punctuation">]</span>,double l,double r<span class="token punctuation">)</span><span class="token punctuation">{</span>const double <span class="token assign-left variable">eps</span><span class="token operator">=</span>1e-6<span class="token punctuation">;</span>//精度，根据题目要求 while<span class="token punctuation">(</span>r-l<span class="token operator">&gt;</span>eps<span class="token punctuation">)</span><span class="token punctuation">{</span>double <span class="token assign-left variable">m</span><span class="token operator">=</span><span class="token punctuation">(</span>l+r<span class="token punctuation">)</span>/2<span class="token punctuation">;</span>//对浮点数不能用移位运算符if<span class="token punctuation">(</span>a<span class="token punctuation">[</span>m<span class="token punctuation">]</span><span class="token operator">==</span>v<span class="token punctuation">)</span>return m<span class="token punctuation">;</span>if<span class="token punctuation">(</span>a<span class="token punctuation">[</span>m<span class="token punctuation">]</span><span class="token operator">&lt;</span>v<span class="token punctuation">)</span> <span class="token assign-left variable">l</span><span class="token operator">=</span>m<span class="token punctuation">;</span><span class="token keyword">else</span> <span class="token assign-left variable">r</span><span class="token operator">=</span>m<span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token builtin class-name">return</span> -1<span class="token punctuation">;</span><span class="token punctuation">}</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Floyd算法求多源最短路径</title>
      <link href="/2022/03/22/floyd-suan-fa-qiu-duo-yuan-zui-duan-lu-jing/"/>
      <url>/2022/03/22/floyd-suan-fa-qiu-duo-yuan-zui-duan-lu-jing/</url>
      
        <content type="html"><![CDATA[<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">输入<span class="token number">3</span> <span class="token number">3</span> <span class="token number">2</span><span class="token number">1</span> <span class="token number">2</span> <span class="token number">1</span><span class="token number">2</span> <span class="token number">3</span> <span class="token number">2</span><span class="token number">1</span> <span class="token number">3</span> <span class="token number">1</span><span class="token number">2</span> <span class="token number">1</span><span class="token number">1</span> <span class="token number">3</span>输出impossible<span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#include&lt;bits/stdc++.h&gt;</span>using namespace std<span class="token punctuation">;</span>const int <span class="token assign-left variable">N</span><span class="token operator">=</span><span class="token number">10010</span>,INF<span class="token operator">=</span>1e9<span class="token punctuation">;</span>int d<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span>int n<span class="token punctuation">;</span>void <span class="token function-name function">floyd</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>for<span class="token punctuation">(</span>int <span class="token assign-left variable">k</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>k<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>k++<span class="token punctuation">)</span>for<span class="token punctuation">(</span>int <span class="token assign-left variable">i</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i++<span class="token punctuation">)</span>for<span class="token punctuation">(</span>int <span class="token assign-left variable">j</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>j++<span class="token punctuation">)</span>d<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span>min<span class="token punctuation">(</span>d<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span>,d<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span>+d<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>//运行后d<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span>就是从i到j的最短距离 <span class="token punctuation">}</span>int <span class="token function-name function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>int m,k<span class="token punctuation">;</span>cin<span class="token operator">&gt;&gt;</span>n<span class="token operator">&gt;&gt;</span>m<span class="token operator">&gt;&gt;</span>k<span class="token punctuation">;</span> for<span class="token punctuation">(</span>int <span class="token assign-left variable">i</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i++<span class="token punctuation">)</span> for<span class="token punctuation">(</span>int <span class="token assign-left variable">j</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>j++<span class="token punctuation">)</span> <span class="token punctuation">{</span> if<span class="token punctuation">(</span>i<span class="token operator">==</span>j<span class="token punctuation">)</span>d<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>//输出结果可能会要求自环  <span class="token keyword">else</span> d<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span>INF<span class="token punctuation">;</span> <span class="token punctuation">}</span>while<span class="token punctuation">(</span>m--<span class="token punctuation">)</span><span class="token punctuation">{</span>int x,y,z<span class="token punctuation">;</span>cin<span class="token operator">&gt;&gt;</span>x<span class="token operator">&gt;&gt;</span>y<span class="token operator">&gt;&gt;</span>z<span class="token punctuation">;</span>d<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token operator">=</span>min<span class="token punctuation">(</span>d<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span>,z<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>floyd<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>while<span class="token punctuation">(</span>k--<span class="token punctuation">)</span><span class="token punctuation">{</span>int x1,y1<span class="token punctuation">;</span>cin<span class="token operator">&gt;&gt;</span>x<span class="token operator"><span class="token file-descriptor important">1</span>&gt;&gt;</span>y1<span class="token punctuation">;</span>if<span class="token punctuation">(</span>d<span class="token punctuation">[</span>x1<span class="token punctuation">]</span><span class="token punctuation">[</span>y1<span class="token punctuation">]</span><span class="token operator">&gt;</span>INF/2<span class="token punctuation">)</span>puts<span class="token punctuation">(</span><span class="token string">"impossible"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">else</span>cout<span class="token operator">&lt;&lt;</span>d<span class="token punctuation">[</span>x1<span class="token punctuation">]</span><span class="token punctuation">[</span>y1<span class="token punctuation">]</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token builtin class-name">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">模板void <span class="token function-name function">floyd</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>for<span class="token punctuation">(</span>int <span class="token assign-left variable">i</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i++<span class="token punctuation">)</span>for<span class="token punctuation">(</span>int <span class="token assign-left variable">j</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>j++<span class="token punctuation">)</span>for<span class="token punctuation">(</span>int <span class="token assign-left variable">k</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>k<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>k++<span class="token punctuation">)</span>d<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span>min<span class="token punctuation">(</span>d<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span>,d<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span>+d<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>void <span class="token function-name function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  for<span class="token punctuation">(</span>int <span class="token assign-left variable">i</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i++<span class="token punctuation">)</span>  for<span class="token punctuation">(</span>int <span class="token assign-left variable">j</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>j++<span class="token punctuation">)</span>  if<span class="token punctuation">(</span>i<span class="token operator">==</span>j<span class="token punctuation">)</span>d<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>  <span class="token keyword">else</span> d<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span>INF<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> 图论 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Bfs遍历边权为1图求最短路径</title>
      <link href="/2022/03/22/bfs-bian-li-bian-quan-wei-1-tu-qiu-zui-duan-lu-jing/"/>
      <url>/2022/03/22/bfs-bian-li-bian-quan-wei-1-tu-qiu-zui-duan-lu-jing/</url>
      
        <content type="html"><![CDATA[<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">给定一个n个点m条边的有向图，图中可能存在重边和自环。所有边的长度都是1，点的编号为1~n。请你求出1号点到n号点的最短距离，如果从1号点无法走到n号点，输出-1。输入格式第一行包含两个整数n和m。接下来m行，每行包含两个整数a和b，表示存在一条从a走到b的长度为1的边。输出格式输出一个整数，表示1号点到n号点的最短距离。数据范围<span class="token number">1</span>≤n,m≤1051≤n,m≤105输入样例：<span class="token number">4</span> <span class="token number">5</span><span class="token number">1</span> <span class="token number">2</span><span class="token number">2</span> <span class="token number">3</span><span class="token number">3</span> <span class="token number">4</span><span class="token number">1</span> <span class="token number">3</span><span class="token number">1</span> <span class="token number">4</span>输出样例：<span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#include&lt;bits/stdc++.h&gt;</span>using namespace std<span class="token punctuation">;</span> const int <span class="token assign-left variable">N</span><span class="token operator">=</span>1e5+10,M<span class="token operator">=</span><span class="token number">2</span>*N<span class="token punctuation">;</span>//所有边权都是1的时候的最短路问题 int n,m<span class="token punctuation">;</span>int h<span class="token punctuation">[</span>N<span class="token punctuation">]</span>,e<span class="token punctuation">[</span>M<span class="token punctuation">]</span>,ne<span class="token punctuation">[</span>M<span class="token punctuation">]</span>,idx<span class="token punctuation">;</span>int d<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span>bool vis<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span>void add<span class="token punctuation">(</span>int a,int b<span class="token punctuation">)</span><span class="token punctuation">{</span>    e<span class="token punctuation">[</span>idx<span class="token punctuation">]</span><span class="token operator">=</span>b,ne<span class="token punctuation">[</span>idx<span class="token punctuation">]</span><span class="token operator">=</span>h<span class="token punctuation">[</span>a<span class="token punctuation">]</span>,h<span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token operator">=</span>idx++<span class="token punctuation">;</span><span class="token punctuation">}</span> int <span class="token function-name function">bfs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    memset<span class="token punctuation">(</span>d,-1,sizeof<span class="token punctuation">(</span>d<span class="token punctuation">))</span><span class="token punctuation">;</span>     queue<span class="token operator">&lt;</span>int<span class="token operator">&gt;</span> q<span class="token punctuation">;</span>    q.push<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       vis<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span>true<span class="token punctuation">;</span>    d<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>//初始化     while<span class="token punctuation">(</span>q.size<span class="token punctuation">(</span><span class="token punctuation">))</span>    <span class="token punctuation">{</span>        int <span class="token assign-left variable">t</span><span class="token operator">=</span>q.front<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>//把队头拿出来         q.pop<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>//队头出队         for<span class="token punctuation">(</span>int <span class="token assign-left variable">i</span><span class="token operator">=</span>h<span class="token punctuation">[</span>t<span class="token punctuation">]</span><span class="token punctuation">;</span>~i<span class="token punctuation">;</span><span class="token assign-left variable">i</span><span class="token operator">=</span>ne<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>//i<span class="token operator">!=</span>-1 ，遍历每个单链表         <span class="token punctuation">{</span>            int <span class="token assign-left variable">j</span><span class="token operator">=</span>e<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>//遍历这个单链表的每个点             if<span class="token punctuation">(</span><span class="token operator">!</span>vis<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">))</span>            <span class="token punctuation">{</span>                q.push<span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">;</span>//把这个点加入队列                 d<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span>d<span class="token punctuation">[</span>t<span class="token punctuation">]</span>+1<span class="token punctuation">;</span>                 vis<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span>true<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token builtin class-name">return</span> d<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>//返回一到n的最短距离 <span class="token punctuation">}</span>int <span class="token function-name function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    cin<span class="token operator">&gt;&gt;</span>n<span class="token operator">&gt;&gt;</span>m<span class="token punctuation">;</span>    memset<span class="token punctuation">(</span>h,-1,sizeof<span class="token punctuation">(</span>h<span class="token punctuation">))</span><span class="token punctuation">;</span>    for<span class="token punctuation">(</span>int <span class="token assign-left variable">i</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>m<span class="token punctuation">;</span>i++<span class="token punctuation">)</span><span class="token punctuation">{</span>        int a,b<span class="token punctuation">;</span>        cin<span class="token operator">&gt;&gt;</span>a<span class="token operator">&gt;&gt;</span>b<span class="token punctuation">;</span>        add<span class="token punctuation">(</span>a,b<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>     cout<span class="token operator">&lt;&lt;</span>bfs<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span><span class="token punctuation">}</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> bfs </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Prim求最小生成树</title>
      <link href="/2022/03/22/prim-qiu-zui-xiao-sheng-cheng-shu/"/>
      <url>/2022/03/22/prim-qiu-zui-xiao-sheng-cheng-shu/</url>
      
        <content type="html"><![CDATA[<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">//输入<span class="token number">4</span> <span class="token number">5</span><span class="token number">1</span> <span class="token number">2</span> <span class="token number">1</span><span class="token number">1</span> <span class="token number">3</span> <span class="token number">2</span><span class="token number">1</span> <span class="token number">4</span> <span class="token number">3</span><span class="token number">2</span> <span class="token number">3</span> <span class="token number">2</span><span class="token number">3</span> <span class="token number">4</span> <span class="token number">4</span>//输出<span class="token number">6</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#include&lt;bits/stdc++.h&gt;</span>using namespace std<span class="token punctuation">;</span>const int <span class="token assign-left variable">N</span><span class="token operator">=</span><span class="token number">1000</span><span class="token punctuation">;</span>const int <span class="token assign-left variable">INF</span><span class="token operator">=</span>0x3f3f3f3f<span class="token punctuation">;</span>int n<span class="token punctuation">;</span>      // n表示点数int g<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span>        // 邻接矩阵，存储所有边int dist<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span>        // 存储其他点到当前最小生成树的距离bool st<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span>     // 存储每个点是否已经在生成树中// 如果图不连通，则返回INF<span class="token punctuation">(</span>值是0x3f3f3f3f<span class="token punctuation">)</span>, 否则返回最小生成树的树边权重之和int <span class="token function-name function">prim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    memset<span class="token punctuation">(</span>dist, 0x3f, sizeof dist<span class="token punctuation">)</span><span class="token punctuation">;</span>    int res <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>int i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i ++ <span class="token punctuation">)</span>    <span class="token punctuation">{</span>        int t <span class="token operator">=</span> -1<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>int j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> j ++ <span class="token punctuation">)</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>st<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>t <span class="token operator">==</span> -1 <span class="token operator">||</span> dist<span class="token punctuation">[</span>t<span class="token punctuation">]</span> <span class="token operator">&gt;</span> dist<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">))</span>                t <span class="token operator">=</span> j<span class="token punctuation">;</span>//找到到集合最近的点，这也是t的定义         <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">&amp;&amp;</span> dist<span class="token punctuation">[</span>t<span class="token punctuation">]</span> <span class="token operator">==</span> INF<span class="token punctuation">)</span> <span class="token builtin class-name">return</span> INF<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>i<span class="token punctuation">)</span> res <span class="token operator">+=</span> dist<span class="token punctuation">[</span>t<span class="token punctuation">]</span><span class="token punctuation">;</span>        st<span class="token punctuation">[</span>t<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>//把t这个点加入到集合         <span class="token keyword">for</span> <span class="token punctuation">(</span>int j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> j ++ <span class="token punctuation">)</span> dist<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> min<span class="token punctuation">(</span>dist<span class="token punctuation">[</span>j<span class="token punctuation">]</span>, g<span class="token punctuation">[</span>t<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>//用t去更新其它点到集合的距离     <span class="token punctuation">}</span>    <span class="token builtin class-name">return</span> res<span class="token punctuation">;</span><span class="token punctuation">}</span>int <span class="token function-name function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>int m<span class="token punctuation">;</span>cin<span class="token operator">&gt;&gt;</span>n<span class="token operator">&gt;&gt;</span>m<span class="token punctuation">;</span>memset<span class="token punctuation">(</span>g,0x3f,sizeof g<span class="token punctuation">)</span><span class="token punctuation">;</span> while<span class="token punctuation">(</span>m--<span class="token punctuation">)</span><span class="token punctuation">{</span>int u,v,w<span class="token punctuation">;</span>cin<span class="token operator">&gt;&gt;</span>u<span class="token operator">&gt;&gt;</span>v<span class="token operator">&gt;&gt;</span>w<span class="token punctuation">;</span>g<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token operator">=</span>g<span class="token punctuation">[</span>v<span class="token punctuation">]</span><span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token operator">=</span>min<span class="token punctuation">(</span>g<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">[</span>v<span class="token punctuation">]</span>,w<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>int <span class="token assign-left variable">s</span><span class="token operator">=</span>prim<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>cout<span class="token operator">&lt;&lt;</span>s<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span><span class="token builtin class-name">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">//记忆模板<span class="token comment">#include&lt;bits/stdc++.h&gt;</span>using namespace std<span class="token punctuation">;</span>const int <span class="token assign-left variable">N</span><span class="token operator">=</span><span class="token number">1010</span><span class="token punctuation">;</span>const int <span class="token assign-left variable">INF</span><span class="token operator">=</span>0x3f3f3f3f<span class="token punctuation">;</span>int dist<span class="token punctuation">[</span>N<span class="token punctuation">]</span>,g<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span>bool v<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span>int <span class="token function-name function">prim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>memset<span class="token punctuation">(</span>dist,0x3f,sizeof dist<span class="token punctuation">)</span><span class="token punctuation">;</span>int <span class="token assign-left variable">res</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>for<span class="token punctuation">(</span>int <span class="token assign-left variable">i</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i++<span class="token punctuation">)</span><span class="token punctuation">{</span>int <span class="token assign-left variable">t</span><span class="token operator">=</span>-1<span class="token punctuation">;</span>    for<span class="token punctuation">(</span>int <span class="token assign-left variable">j</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>j++<span class="token punctuation">)</span><span class="token punctuation">{</span>    if<span class="token punctuation">(</span><span class="token operator">!</span>v<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">&amp;&amp;</span><span class="token punctuation">(</span>t<span class="token operator">==</span>-1<span class="token operator">||</span>dist<span class="token punctuation">[</span>t<span class="token punctuation">]</span><span class="token operator">&gt;</span>dist<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">))</span>      <span class="token assign-left variable">t</span><span class="token operator">=</span>j<span class="token punctuation">;</span>//找到离集合最近的点     <span class="token punctuation">}</span>    if<span class="token punctuation">(</span>i<span class="token operator">&amp;&amp;</span>dist<span class="token punctuation">[</span>t<span class="token punctuation">]</span><span class="token operator">=</span>INF<span class="token punctuation">)</span>return INF<span class="token punctuation">;</span>    if<span class="token punctuation">(</span>i<span class="token punctuation">)</span>res<span class="token operator">+=</span>dist<span class="token punctuation">[</span>t<span class="token punctuation">]</span><span class="token punctuation">;</span>//把最短距离加入到最小生成树的总权中     v<span class="token punctuation">[</span>t<span class="token punctuation">]</span><span class="token operator">=</span>true<span class="token punctuation">;</span>//把t加入到集合     for<span class="token punctuation">(</span>int <span class="token assign-left variable">j</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>j++<span class="token punctuation">)</span><span class="token punctuation">{</span>    dist<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span>min<span class="token punctuation">(</span>dist<span class="token punctuation">[</span>j<span class="token punctuation">]</span>,g<span class="token punctuation">[</span>t<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>//用t更新到其他点到集合的距离     <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token builtin class-name">return</span> res<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> 图论 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>迪杰斯特拉算法</title>
      <link href="/2022/03/21/di-jie-si-te-la-suan-fa/"/>
      <url>/2022/03/21/di-jie-si-te-la-suan-fa/</url>
      
        <content type="html"><![CDATA[<p>//求一个起点到任意一点的图的算法</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">给定一个n个点m条边的有向图，图中可能存在重边和自环，所有边权均为正值。请你求出1号点到n号点的最短距离，如果无法从1号点走到n号点，则输出-1。输入格式第一行包含整数n和m。接下来m行每行包含三个整数x，y，z，表示存在一条从点x到点y的有向边，边长为z。输出格式输出一个整数，表示1号点到n号点的最短距离。如果路径不存在，则输出-1。数据范围<span class="token number">1</span>≤n≤500,<span class="token number">1</span>≤m≤105,图中涉及边长均不超过10000。输入样例：<span class="token number">3</span> <span class="token number">3</span><span class="token number">1</span> <span class="token number">2</span> <span class="token number">2</span><span class="token number">2</span> <span class="token number">3</span> <span class="token number">1</span><span class="token number">1</span> <span class="token number">3</span> <span class="token number">4</span>输出样例：<span class="token number">3</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#include&lt;bits/stdc++.h&gt;</span>using namespace std<span class="token punctuation">;</span>const int <span class="token assign-left variable">N</span><span class="token operator">=</span><span class="token number">1010</span><span class="token punctuation">;</span>int g<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span>  // 存储每条边int dist<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span>  // 存储1号点到每个点的最短距离bool st<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span>   // 存储每个点的最短路是否已经确定// 求1号点到n号点的最短路，如果不存在则返回-1int dijk<span class="token punctuation">(</span>int n<span class="token punctuation">)</span><span class="token punctuation">{</span>     memset<span class="token punctuation">(</span>dist, 0x3f, sizeof dist<span class="token punctuation">)</span><span class="token punctuation">;</span>//先初始化成最大值    dist<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>//令第一个节点本身距离自己为0,原点到原点的距离为0，这个很重要，否则下面for循环所有的dist都是0x3f3f3f3f,无法找出index     <span class="token keyword">for</span> <span class="token punctuation">(</span>int i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span>n <span class="token punctuation">;</span> i ++ <span class="token punctuation">)</span>// 每次循环都会剔除掉1个点，因此需要for循环遍历n次    <span class="token punctuation">{</span>    int t <span class="token operator">=</span> -1<span class="token punctuation">;</span>     // t代表当前未被访问的距离原点最近的点，在还未确定最短路的点中，寻找距离最小的点        <span class="token keyword">for</span> <span class="token punctuation">(</span>int j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> j ++ <span class="token punctuation">)</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>st<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>t <span class="token operator">==</span> -1 <span class="token operator">||</span> dist<span class="token punctuation">[</span>t<span class="token punctuation">]</span> <span class="token operator">&gt;</span> dist<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">))</span>//当前这个点还没有确定最短路或者上个点未确认或者当前的1到t的路径不是最短的                t <span class="token operator">=</span> j<span class="token punctuation">;</span>//用j去更新t                  st<span class="token punctuation">[</span>t<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>//把t这个路径长度标记为最短的         // 用t更新其他点的距离,若前面有其它点和这个点一起被更新，//但t的这个点入度已经被更新完了，而另外一个点入度还只剩这个点到另外那个点，并且更新后权值更小就用这个更小的代替之前的         <span class="token keyword">for</span> <span class="token punctuation">(</span>int j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> j ++ <span class="token punctuation">)</span>            dist<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> min<span class="token punctuation">(</span>dist<span class="token punctuation">[</span>j<span class="token punctuation">]</span>, dist<span class="token punctuation">[</span>t<span class="token punctuation">]</span> + g<span class="token punctuation">[</span>t<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> //1到t的距离长度加上t到j的长度去更新1到j的长度        // cout<span class="token operator">&lt;&lt;</span>dist<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">&lt;&lt;</span><span class="token string">" "</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>dist<span class="token punctuation">[</span>n<span class="token punctuation">]</span> <span class="token operator">==</span> 0x3f3f3f3f<span class="token punctuation">)</span> <span class="token builtin class-name">return</span> -1<span class="token punctuation">;</span>//如果1到n的距离是正无穷的话表示没有最短距离返回-1     <span class="token builtin class-name">return</span> dist<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>//返回最短路径     //cout<span class="token operator">&lt;&lt;</span>dist<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span><span class="token punctuation">}</span>int <span class="token function-name function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>int s,m,n<span class="token punctuation">;</span>memset<span class="token punctuation">(</span>g,0x3f,sizeof g<span class="token punctuation">)</span><span class="token punctuation">;</span>cin<span class="token operator">&gt;&gt;</span>n<span class="token operator">&gt;&gt;</span>m<span class="token punctuation">;</span>while<span class="token punctuation">(</span>m--<span class="token punctuation">)</span><span class="token punctuation">{</span>int a,b,c<span class="token punctuation">;</span>cin<span class="token operator">&gt;&gt;</span>a<span class="token operator">&gt;&gt;</span>b<span class="token operator">&gt;&gt;</span>c<span class="token punctuation">;</span>g<span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token punctuation">[</span>b<span class="token punctuation">]</span><span class="token operator">=</span>min<span class="token punctuation">(</span>g<span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token punctuation">[</span>b<span class="token punctuation">]</span>,c<span class="token punctuation">)</span><span class="token punctuation">;</span>//除环和重边<span class="token punctuation">}</span><span class="token assign-left variable">s</span><span class="token operator">=</span>dijk<span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>cout<span class="token operator">&lt;&lt;</span>s<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span><span class="token builtin class-name">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">//背诵模板版本<span class="token comment">#include&lt;bits/stdc++.h&gt;</span>using namespace std<span class="token punctuation">;</span>const int <span class="token assign-left variable">N</span><span class="token operator">=</span><span class="token number">1010</span><span class="token punctuation">;</span>int g<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span>  // 存储每条边int dist<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span>  // 存储1号点到每个点的最短距离bool v<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span>   // 存储每个点的最短路是否已经确定// 求1号点到n号点的最短路，如果不存在则返回-1int djsk<span class="token punctuation">(</span>int n<span class="token punctuation">)</span><span class="token punctuation">{</span>memset<span class="token punctuation">(</span>dist,0x3f,sizeof dist<span class="token punctuation">)</span><span class="token punctuation">;</span>dist<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>for<span class="token punctuation">(</span>int <span class="token assign-left variable">i</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i++ <span class="token punctuation">)</span><span class="token punctuation">{</span>int <span class="token assign-left variable">t</span><span class="token operator">=</span>-1<span class="token punctuation">;</span>dist<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>for<span class="token punctuation">(</span>int <span class="token assign-left variable">j</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>j++<span class="token punctuation">)</span><span class="token punctuation">{</span>//用j更新t if<span class="token punctuation">(</span><span class="token operator">!</span>v<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">&amp;&amp;</span><span class="token punctuation">(</span>t<span class="token operator">==</span>-1<span class="token operator">||</span>dist<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">&lt;</span>dist<span class="token punctuation">[</span>t<span class="token punctuation">]</span><span class="token punctuation">))</span><span class="token assign-left variable">t</span><span class="token operator">=</span>j<span class="token punctuation">;</span><span class="token punctuation">}</span>v<span class="token punctuation">[</span>t<span class="token punctuation">]</span><span class="token operator">=</span>true<span class="token punctuation">;</span>for<span class="token punctuation">(</span>int <span class="token assign-left variable">j</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>j++<span class="token punctuation">)</span><span class="token punctuation">{</span>//用1到t再到j去更新distj dist<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span>min<span class="token punctuation">(</span>dist<span class="token punctuation">[</span>j<span class="token punctuation">]</span>,dist<span class="token punctuation">[</span>t<span class="token punctuation">]</span>+g<span class="token punctuation">[</span>t<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span>if<span class="token punctuation">(</span>dist<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token operator">==</span>0x3f3f3f3f<span class="token punctuation">)</span>return -1<span class="token punctuation">;</span><span class="token builtin class-name">return</span> dist<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>cout<span class="token operator">&lt;&lt;</span>dist<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> 图论 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Dfs打印迷宫路径</title>
      <link href="/2022/03/21/dfs-da-yin-mi-gong-lu-jing/"/>
      <url>/2022/03/21/dfs-da-yin-mi-gong-lu-jing/</url>
      
        <content type="html"><![CDATA[<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">////5 <span class="token number">6</span>//1 <span class="token number">0</span> <span class="token number">0</span> <span class="token number">1</span> <span class="token number">0</span> <span class="token number">1</span>//1 <span class="token number">1</span> <span class="token number">1</span> <span class="token number">1</span> <span class="token number">1</span> <span class="token number">1</span>//0 <span class="token number">0</span> <span class="token number">1</span> <span class="token number">1</span> <span class="token number">1</span> <span class="token number">0</span>//1 <span class="token number">1</span> <span class="token number">1</span> <span class="token number">1</span> <span class="token number">1</span> <span class="token number">0</span>//1 <span class="token number">1</span> <span class="token number">1</span> <span class="token number">0</span> <span class="token number">1</span> <span class="token number">1</span>//1 <span class="token number">1</span>//5 <span class="token number">6</span> //输出//<span class="token punctuation">(</span><span class="token number">1,1</span><span class="token punctuation">)</span>-<span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token number">2,1</span><span class="token punctuation">)</span>-<span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token number">2,2</span><span class="token punctuation">)</span>-<span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token number">2,3</span><span class="token punctuation">)</span>-<span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token number">2,4</span><span class="token punctuation">)</span>-<span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token number">2,5</span><span class="token punctuation">)</span>-<span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token number">3,5</span><span class="token punctuation">)</span>-<span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token number">3,4</span><span class="token punctuation">)</span>-<span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token number">3,3</span><span class="token punctuation">)</span>-<span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token number">4,3</span><span class="token punctuation">)</span>-<span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token number">4,4</span><span class="token punctuation">)</span>-<span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token number">4,5</span><span class="token punctuation">)</span>-<span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token number">5,5</span><span class="token punctuation">)</span>-<span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token number">5,6</span><span class="token punctuation">)</span>//<span class="token punctuation">(</span><span class="token number">1,1</span><span class="token punctuation">)</span>-<span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token number">2,1</span><span class="token punctuation">)</span>-<span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token number">2,2</span><span class="token punctuation">)</span>-<span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token number">2,3</span><span class="token punctuation">)</span>-<span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token number">2,4</span><span class="token punctuation">)</span>-<span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token number">2,5</span><span class="token punctuation">)</span>-<span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token number">3,5</span><span class="token punctuation">)</span>-<span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token number">3,4</span><span class="token punctuation">)</span>-<span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token number">4,4</span><span class="token punctuation">)</span>-<span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token number">4,5</span><span class="token punctuation">)</span>-<span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token number">5,5</span><span class="token punctuation">)</span>-<span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token number">5,6</span><span class="token punctuation">)</span>//<span class="token punctuation">(</span><span class="token number">1,1</span><span class="token punctuation">)</span>-<span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token number">2,1</span><span class="token punctuation">)</span>-<span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token number">2,2</span><span class="token punctuation">)</span>-<span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token number">2,3</span><span class="token punctuation">)</span>-<span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token number">2,4</span><span class="token punctuation">)</span>-<span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token number">2,5</span><span class="token punctuation">)</span>-<span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token number">3,5</span><span class="token punctuation">)</span>-<span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token number">4,5</span><span class="token punctuation">)</span>-<span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token number">5,5</span><span class="token punctuation">)</span>-<span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token number">5,6</span><span class="token punctuation">)</span>//<span class="token punctuation">(</span><span class="token number">1,1</span><span class="token punctuation">)</span>-<span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token number">2,1</span><span class="token punctuation">)</span>-<span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token number">2,2</span><span class="token punctuation">)</span>-<span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token number">2,3</span><span class="token punctuation">)</span>-<span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token number">2,4</span><span class="token punctuation">)</span>-<span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token number">3,4</span><span class="token punctuation">)</span>-<span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token number">3,3</span><span class="token punctuation">)</span>-<span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token number">4,3</span><span class="token punctuation">)</span>-<span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token number">4,4</span><span class="token punctuation">)</span>-<span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token number">4,5</span><span class="token punctuation">)</span>-<span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token number">5,5</span><span class="token punctuation">)</span>-<span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token number">5,6</span><span class="token punctuation">)</span>//<span class="token punctuation">(</span><span class="token number">1,1</span><span class="token punctuation">)</span>-<span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token number">2,1</span><span class="token punctuation">)</span>-<span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token number">2,2</span><span class="token punctuation">)</span>-<span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token number">2,3</span><span class="token punctuation">)</span>-<span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token number">2,4</span><span class="token punctuation">)</span>-<span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token number">3,4</span><span class="token punctuation">)</span>-<span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token number">3,5</span><span class="token punctuation">)</span>-<span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token number">4,5</span><span class="token punctuation">)</span>-<span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token number">5,5</span><span class="token punctuation">)</span>-<span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token number">5,6</span><span class="token punctuation">)</span>//<span class="token punctuation">(</span><span class="token number">1,1</span><span class="token punctuation">)</span>-<span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token number">2,1</span><span class="token punctuation">)</span>-<span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token number">2,2</span><span class="token punctuation">)</span>-<span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token number">2,3</span><span class="token punctuation">)</span>-<span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token number">2,4</span><span class="token punctuation">)</span>-<span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token number">3,4</span><span class="token punctuation">)</span>-<span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token number">4,4</span><span class="token punctuation">)</span>-<span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token number">4,5</span><span class="token punctuation">)</span>-<span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token number">5,5</span><span class="token punctuation">)</span>-<span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token number">5,6</span><span class="token punctuation">)</span>//<span class="token punctuation">(</span><span class="token number">1,1</span><span class="token punctuation">)</span>-<span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token number">2,1</span><span class="token punctuation">)</span>-<span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token number">2,2</span><span class="token punctuation">)</span>-<span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token number">2,3</span><span class="token punctuation">)</span>-<span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token number">3,3</span><span class="token punctuation">)</span>-<span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token number">3,4</span><span class="token punctuation">)</span>-<span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token number">2,4</span><span class="token punctuation">)</span>-<span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token number">2,5</span><span class="token punctuation">)</span>-<span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token number">3,5</span><span class="token punctuation">)</span>-<span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token number">4,5</span><span class="token punctuation">)</span>-<span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token number">5,5</span><span class="token punctuation">)</span>-<span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token number">5,6</span><span class="token punctuation">)</span>//<span class="token punctuation">(</span><span class="token number">1,1</span><span class="token punctuation">)</span>-<span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token number">2,1</span><span class="token punctuation">)</span>-<span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token number">2,2</span><span class="token punctuation">)</span>-<span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token number">2,3</span><span class="token punctuation">)</span>-<span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token number">3,3</span><span class="token punctuation">)</span>-<span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token number">3,4</span><span class="token punctuation">)</span>-<span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token number">3,5</span><span class="token punctuation">)</span>-<span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token number">4,5</span><span class="token punctuation">)</span>-<span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token number">5,5</span><span class="token punctuation">)</span>-<span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token number">5,6</span><span class="token punctuation">)</span>//<span class="token punctuation">(</span><span class="token number">1,1</span><span class="token punctuation">)</span>-<span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token number">2,1</span><span class="token punctuation">)</span>-<span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token number">2,2</span><span class="token punctuation">)</span>-<span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token number">2,3</span><span class="token punctuation">)</span>-<span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token number">3,3</span><span class="token punctuation">)</span>-<span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token number">3,4</span><span class="token punctuation">)</span>-<span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token number">4,4</span><span class="token punctuation">)</span>-<span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token number">4,5</span><span class="token punctuation">)</span>-<span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token number">5,5</span><span class="token punctuation">)</span>-<span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token number">5,6</span><span class="token punctuation">)</span>//<span class="token punctuation">(</span><span class="token number">1,1</span><span class="token punctuation">)</span>-<span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token number">2,1</span><span class="token punctuation">)</span>-<span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token number">2,2</span><span class="token punctuation">)</span>-<span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token number">2,3</span><span class="token punctuation">)</span>-<span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token number">3,3</span><span class="token punctuation">)</span>-<span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token number">4,3</span><span class="token punctuation">)</span>-<span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token number">4,4</span><span class="token punctuation">)</span>-<span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token number">3,4</span><span class="token punctuation">)</span>-<span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token number">2,4</span><span class="token punctuation">)</span>-<span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token number">2,5</span><span class="token punctuation">)</span>-<span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token number">3,5</span><span class="token punctuation">)</span>-<span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token number">4,5</span><span class="token punctuation">)</span>-<span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token number">5,5</span><span class="token punctuation">)</span>-<span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token number">5,6</span><span class="token punctuation">)</span>//<span class="token punctuation">(</span><span class="token number">1,1</span><span class="token punctuation">)</span>-<span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token number">2,1</span><span class="token punctuation">)</span>-<span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token number">2,2</span><span class="token punctuation">)</span>-<span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token number">2,3</span><span class="token punctuation">)</span>-<span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token number">3,3</span><span class="token punctuation">)</span>-<span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token number">4,3</span><span class="token punctuation">)</span>-<span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token number">4,4</span><span class="token punctuation">)</span>-<span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token number">3,4</span><span class="token punctuation">)</span>-<span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token number">3,5</span><span class="token punctuation">)</span>-<span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token number">4,5</span><span class="token punctuation">)</span>-<span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token number">5,5</span><span class="token punctuation">)</span>-<span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token number">5,6</span><span class="token punctuation">)</span>//<span class="token punctuation">(</span><span class="token number">1,1</span><span class="token punctuation">)</span>-<span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token number">2,1</span><span class="token punctuation">)</span>-<span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token number">2,2</span><span class="token punctuation">)</span>-<span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token number">2,3</span><span class="token punctuation">)</span>-<span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token number">3,3</span><span class="token punctuation">)</span>-<span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token number">4,3</span><span class="token punctuation">)</span>-<span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token number">4,4</span><span class="token punctuation">)</span>-<span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token number">4,5</span><span class="token punctuation">)</span>-<span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token number">5,5</span><span class="token punctuation">)</span>-<span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token number">5,6</span><span class="token punctuation">)</span> <span class="token comment">#include&lt;bits/stdc++.h&gt;</span>using namespace std<span class="token punctuation">;</span>int m,n<span class="token punctuation">;</span>const int <span class="token assign-left variable">N</span><span class="token operator">=</span><span class="token number">100</span><span class="token punctuation">;</span>int a<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">[</span>N<span class="token punctuation">]</span>,p<span class="token punctuation">[</span>N<span class="token punctuation">]</span>,p1<span class="token punctuation">[</span>N<span class="token punctuation">]</span>,step<span class="token operator">=</span><span class="token number">0</span>,ax,ay,flag<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>bool v<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span>//typedef pair<span class="token operator">&lt;</span>int,int<span class="token operator">&gt;</span> pii<span class="token punctuation">;</span>//pii q<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span>void dfs<span class="token punctuation">(</span>int x,int y<span class="token punctuation">)</span><span class="token punctuation">{</span>if<span class="token punctuation">(</span>x<span class="token operator">==</span>ax<span class="token operator">&amp;&amp;</span><span class="token assign-left variable">y</span><span class="token operator">==</span>ay<span class="token punctuation">)</span><span class="token punctuation">{</span>for<span class="token punctuation">(</span>int <span class="token assign-left variable">i</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>step<span class="token punctuation">;</span>i++<span class="token punctuation">)</span>cout<span class="token operator">&lt;&lt;</span><span class="token string">"("</span><span class="token operator">&lt;&lt;</span>p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">&lt;&lt;</span><span class="token string">","</span><span class="token operator">&lt;&lt;</span>p1<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">&lt;&lt;</span><span class="token string">")"</span><span class="token operator">&lt;&lt;</span><span class="token string">"-&gt;"</span><span class="token punctuation">;</span> //输出中途步骤；    cout<span class="token operator">&lt;&lt;</span><span class="token string">"("</span><span class="token operator">&lt;&lt;</span>ax<span class="token operator">&lt;&lt;</span><span class="token string">","</span><span class="token operator">&lt;&lt;</span>ay<span class="token operator">&lt;&lt;</span><span class="token string">")"</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span><span class="token assign-left variable">flag</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token builtin class-name">return</span><span class="token punctuation">;</span><span class="token punctuation">}</span>int dx<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">{</span>-1,0,1,0<span class="token punctuation">}</span><span class="token punctuation">;</span>int dy<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">{</span><span class="token number">0,1</span>,0,-1<span class="token punctuation">}</span><span class="token punctuation">;</span>for<span class="token punctuation">(</span>int <span class="token assign-left variable">k</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>k<span class="token operator">&lt;</span><span class="token number">4</span><span class="token punctuation">;</span>k++<span class="token punctuation">)</span><span class="token punctuation">{</span>if<span class="token punctuation">(</span><span class="token operator">!</span>v<span class="token punctuation">[</span>x+dx<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">[</span>y+dy<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">&amp;&amp;</span>a<span class="token punctuation">[</span>x+dx<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">[</span>y+dy<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>p<span class="token punctuation">[</span>step<span class="token punctuation">]</span><span class="token operator">=</span>x<span class="token punctuation">;</span> p1<span class="token punctuation">[</span>step<span class="token punctuation">]</span><span class="token operator">=</span>y<span class="token punctuation">;</span>step++<span class="token punctuation">;</span>//cout<span class="token operator">&lt;&lt;</span>p<span class="token punctuation">[</span>step<span class="token punctuation">]</span><span class="token operator">&lt;&lt;</span><span class="token string">" "</span><span class="token punctuation">;</span>v<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token operator">=</span>true<span class="token punctuation">;</span>dfs<span class="token punctuation">(</span>x+dx<span class="token punctuation">[</span>k<span class="token punctuation">]</span>,y+dy<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>v<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token operator">=</span>false<span class="token punctuation">;</span>step--<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span>int <span class="token function-name function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>cin<span class="token operator">&gt;&gt;</span>m<span class="token operator">&gt;&gt;</span>n<span class="token punctuation">;</span>for<span class="token punctuation">(</span>int <span class="token assign-left variable">i</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>m<span class="token punctuation">;</span>i++<span class="token punctuation">)</span>for<span class="token punctuation">(</span>int <span class="token assign-left variable">j</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>j++<span class="token punctuation">)</span>cin<span class="token operator">&gt;&gt;</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>int x,y<span class="token punctuation">;</span>cin<span class="token operator">&gt;&gt;</span>x<span class="token operator">&gt;&gt;</span>y<span class="token punctuation">;</span>cin<span class="token operator">&gt;&gt;</span>ax<span class="token operator">&gt;&gt;</span>ay<span class="token punctuation">;</span>v<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token operator">=</span>true<span class="token punctuation">;</span>dfs<span class="token punctuation">(</span>x,y<span class="token punctuation">)</span><span class="token punctuation">;</span>if<span class="token punctuation">(</span>flag<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>cout<span class="token operator">&lt;&lt;</span><span class="token string">"-1"</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token builtin class-name">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>树的重心Dfs遍历</title>
      <link href="/2022/03/21/shu-de-chong-xin-dfs-bian-li/"/>
      <url>/2022/03/21/shu-de-chong-xin-dfs-bian-li/</url>
      
        <content type="html"><![CDATA[<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">输入<span class="token number">9</span><span class="token number">1</span> <span class="token number">2</span><span class="token number">1</span> <span class="token number">7</span><span class="token number">1</span> <span class="token number">4</span><span class="token number">2</span> <span class="token number">8</span><span class="token number">2</span> <span class="token number">5</span><span class="token number">4</span> <span class="token number">3</span><span class="token number">3</span> <span class="token number">9</span><span class="token number">4</span> <span class="token number">6</span>输出<span class="token number">4</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#include&lt;bits/stdc++.h&gt; </span>using namespace std<span class="token punctuation">;</span>const int <span class="token assign-left variable">N</span><span class="token operator">=</span><span class="token number">100010</span><span class="token punctuation">;</span>int q,n<span class="token punctuation">;</span>//邻接表int h<span class="token punctuation">[</span>N<span class="token punctuation">]</span>,e<span class="token punctuation">[</span>N<span class="token punctuation">]</span>,ne<span class="token punctuation">[</span>N<span class="token punctuation">]</span>,idx<span class="token operator">=</span><span class="token number">0</span>,ans<span class="token operator">=</span>N<span class="token punctuation">;</span>bool st<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span>void add<span class="token punctuation">(</span>int a,int b<span class="token punctuation">)</span><span class="token punctuation">{</span>//添加一条a-<span class="token operator">&gt;</span>b的边 e<span class="token punctuation">[</span>idx<span class="token punctuation">]</span><span class="token operator">=</span>b<span class="token punctuation">;</span>ne<span class="token punctuation">[</span>idx<span class="token punctuation">]</span><span class="token operator">=</span>h<span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token punctuation">;</span>h<span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token operator">=</span>idx++<span class="token punctuation">;</span> <span class="token punctuation">}</span> int dfs<span class="token punctuation">(</span>int u<span class="token punctuation">)</span><span class="token punctuation">{</span>//用邻接表存储树，每个链表代表一个节点的子树 ，每次递归就是遍历下一个新的链表 st<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token operator">=</span>true<span class="token punctuation">;</span>//标记一下表示当前链表已经搜过 int <span class="token assign-left variable">res</span><span class="token operator">=</span><span class="token number">0</span>,sum<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>//sum为包括当前节点的的子树的节点个数 //首先要想好要求的是去掉当前节点后最大连通分块的节点个数的最小值//由此可知得有一变量存最小值ans，一变量存最大连通分块节点个数res，一个变量存所有子树节点个数sum，还得有一个变量存每个子树节点个数sfor<span class="token punctuation">(</span>int <span class="token assign-left variable">i</span><span class="token operator">=</span>h<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">;</span>i<span class="token operator">!=</span>-1<span class="token punctuation">;</span><span class="token assign-left variable">i</span><span class="token operator">=</span>ne<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>//从h<span class="token punctuation">[</span>u<span class="token punctuation">]</span>开始遍历当前链表的每个节点 int <span class="token assign-left variable">j</span><span class="token operator">=</span>e<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>//第几个节点  if<span class="token punctuation">(</span><span class="token operator">!</span>st<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>//如果这个节点没有被遍历过得话 int <span class="token assign-left variable">s</span><span class="token operator">=</span>dfs<span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">;</span>//sum<span class="token operator">=</span><span class="token number">1</span>,每搜到一个子节点加一个数，并开始下一个链表的遍历 <span class="token assign-left variable">res</span><span class="token operator">=</span>max<span class="token punctuation">(</span>res,s<span class="token punctuation">)</span><span class="token punctuation">;</span>//s为当前节点一个子树最大数量 <span class="token assign-left variable">sum</span><span class="token operator">+=</span>s<span class="token punctuation">;</span>//cout<span class="token operator">&lt;&lt;</span>sum<span class="token operator">&lt;&lt;</span><span class="token string">" "</span><span class="token punctuation">;</span>//cout<span class="token operator">&lt;&lt;</span>s<span class="token operator">&lt;&lt;</span><span class="token string">" "</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token assign-left variable">res</span><span class="token operator">=</span>max<span class="token punctuation">(</span>res,n-sum<span class="token punctuation">)</span><span class="token punctuation">;</span>//n-sum为剩余的连通分块节点数量和 //cout<span class="token operator">&lt;&lt;</span>res<span class="token operator">&lt;&lt;</span><span class="token string">" "</span><span class="token punctuation">;</span>//res有和sum比又和n比即为去掉当前节点后最大的连通分块的节点个数 <span class="token assign-left variable">ans</span><span class="token operator">=</span>min<span class="token punctuation">(</span>ans,res<span class="token punctuation">)</span><span class="token punctuation">;</span>//ans为去掉当前节点后最大的连通分块的节点个数的最小值//cout<span class="token operator">&lt;&lt;</span>ans<span class="token operator">&lt;&lt;</span><span class="token string">" "</span><span class="token punctuation">;</span> <span class="token builtin class-name">return</span> <span class="token function">sum</span><span class="token punctuation">;</span><span class="token punctuation">}</span>int <span class="token function-name function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>memset<span class="token punctuation">(</span>h,-1,sizeof h<span class="token punctuation">)</span><span class="token punctuation">;</span>cin<span class="token operator">&gt;&gt;</span>n<span class="token punctuation">;</span>for<span class="token punctuation">(</span>int <span class="token assign-left variable">i</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n-1<span class="token punctuation">;</span>i++<span class="token punctuation">)</span><span class="token punctuation">{</span>int a,b<span class="token punctuation">;</span>cin<span class="token operator">&gt;&gt;</span>a<span class="token operator">&gt;&gt;</span>b<span class="token punctuation">;</span>add<span class="token punctuation">(</span>a,b<span class="token punctuation">)</span><span class="token punctuation">;</span>add<span class="token punctuation">(</span>b,a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>dfs<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>cout<span class="token operator">&lt;&lt;</span>ans<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span> <span class="token builtin class-name">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>邻接表</title>
      <link href="/2022/03/21/lin-jie-biao/"/>
      <url>/2022/03/21/lin-jie-biao/</url>
      
        <content type="html"><![CDATA[<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#include&lt;bits/stdc++.h&gt; </span>//邻接表int h<span class="token punctuation">[</span>N<span class="token punctuation">]</span>,e<span class="token punctuation">[</span>N<span class="token punctuation">]</span>,ne<span class="token punctuation">[</span>N<span class="token punctuation">]</span>,idx<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>void add<span class="token punctuation">(</span>int a,int b<span class="token punctuation">)</span><span class="token punctuation">{</span>//添加一条a-<span class="token operator">&gt;</span>b的变； e<span class="token punctuation">[</span>idx<span class="token punctuation">]</span><span class="token operator">=</span>b<span class="token punctuation">;</span>ne<span class="token punctuation">[</span>idx<span class="token punctuation">]</span><span class="token operator">=</span>h<span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token punctuation">;</span>h<span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token operator">=</span>idx++<span class="token punctuation">;</span> <span class="token punctuation">}</span> int <span class="token function-name function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>memset<span class="token punctuation">(</span>h,-1,sizeof h<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> 图论 </tag>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>单调队列</title>
      <link href="/2022/03/20/dan-diao-dui-lie/"/>
      <url>/2022/03/20/dan-diao-dui-lie/</url>
      
        <content type="html"><![CDATA[<p>给定一个大小为 n≤106的数组。</p><p>有一个大小为 k的滑动窗口，它从数组的最左边移动到最右边。</p><p>你只能在窗口中看到 k个数字。</p><p>每次滑动窗口向右移动一个位置。</p><p>以下是一个例子：</p><p>该数组为 <code>[1 3 -1 -3 5 3 6 7]</code>，kk 为 33。</p><table><thead><tr><th>窗口位置</th><th>最小值</th><th>最大值</th></tr></thead><tbody><tr><td>[1 3 -1] -3 5 3 6 7</td><td>-1</td><td>3</td></tr><tr><td>1 [3 -1 -3] 5 3 6 7</td><td>-3</td><td>3</td></tr><tr><td>1 3 [-1 -3 5] 3 6 7</td><td>-3</td><td>5</td></tr><tr><td>1 3 -1 [-3 5 3] 6 7</td><td>-3</td><td>5</td></tr><tr><td>1 3 -1 -3 [5 3 6] 7</td><td>3</td><td>6</td></tr><tr><td>1 3 -1 -3 5 [3 6 7]</td><td>3</td><td>7</td></tr></tbody></table><p>你的任务是确定滑动窗口位于每个位置时，窗口中的最大值和最小值。</p><h4 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h4><p>输入包含两行。</p><p>第一行包含两个整数 n 和 k，分别代表数组长度和滑动窗口的长度。</p><p>第二行有 n 个整数，代表数组的具体数值。</p><p>同行数据之间用空格隔开。</p><h4 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h4><p>输出包含两个。</p><p>第一行输出，从左至右，每个位置滑动窗口中的最小值。</p><p>第二行输出，从左至右，每个位置滑动窗口中的最大值。</p><h4 id="输入样例："><a href="#输入样例：" class="headerlink" title="输入样例："></a>输入样例：</h4><pre class="line-numbers language-none"><code class="language-none">8 31 3 -1 -3 5 3 6 7<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="输出样例："><a href="#输出样例：" class="headerlink" title="输出样例："></a>输出样例：</h4><pre class="line-numbers language-none"><code class="language-none">-1 -3 -3 -3 3 33 3 5 5 6 7<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#include&lt;bits/stdc++.h&gt; </span>using namespace std<span class="token punctuation">;</span>const int N <span class="token operator">=</span> 1e6 + <span class="token number">10</span><span class="token punctuation">;</span>int n, k, q<span class="token punctuation">[</span>N<span class="token punctuation">]</span>, a<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span>//q<span class="token punctuation">[</span>N<span class="token punctuation">]</span>存的是数组下标int <span class="token function-name function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    int tt <span class="token operator">=</span> -1, <span class="token assign-left variable">hh</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>//hh队列头 tt队列尾        cin.tie<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ios::sync_with_stdio<span class="token punctuation">(</span>false<span class="token punctuation">)</span><span class="token punctuation">;</span>    //是因为先把要输出的东西存入缓冲区，再输出，导致效率降低，而这段语句可以来打消iostream的输入和输出缓存，可节省时间，使效率能达到scanf与printf效率     cin<span class="token operator">&gt;&gt;</span>n<span class="token operator">&gt;&gt;</span>k<span class="token punctuation">;</span>    for<span class="token punctuation">(</span>int i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span>n<span class="token punctuation">;</span> i ++<span class="token punctuation">)</span> cin<span class="token operator">&gt;&gt;</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    for<span class="token punctuation">(</span>int i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i ++<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        //维持滑动窗口的大小        //当队列不为空<span class="token punctuation">(</span>hh <span class="token operator">&lt;=</span> tt<span class="token punctuation">)</span> 且 当当前滑动窗口的大小<span class="token punctuation">(</span>i - q<span class="token punctuation">[</span>hh<span class="token punctuation">]</span> + <span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">&gt;</span>我们设定的        //滑动窗口的大小<span class="token punctuation">(</span>k<span class="token punctuation">)</span>,队列弹出队列头元素以维持滑动窗口的大小        if<span class="token punctuation">(</span>hh <span class="token operator">&lt;=</span> tt <span class="token operator">&amp;&amp;</span> k <span class="token operator">&lt;</span> i - q<span class="token punctuation">[</span>hh<span class="token punctuation">]</span> + <span class="token number">1</span><span class="token punctuation">)</span> hh ++<span class="token punctuation">;</span>        //构造单调递增队列        //当队列不为空<span class="token punctuation">(</span>hh <span class="token operator">&lt;=</span> tt<span class="token punctuation">)</span> 且 当队列队尾元素<span class="token operator">&gt;=</span>当前元素<span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>时,那么队尾元素        //就一定不是当前窗口最小值,删去队尾元素,加入当前元素<span class="token punctuation">(</span>q<span class="token punctuation">[</span> ++ tt<span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">)</span>        while<span class="token punctuation">(</span>hh <span class="token operator">&lt;=</span> tt <span class="token operator">&amp;&amp;</span> a<span class="token punctuation">[</span>q<span class="token punctuation">[</span>tt<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">&gt;=</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> tt --<span class="token punctuation">;</span>        q<span class="token punctuation">[</span> ++ tt<span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span>        if<span class="token punctuation">(</span>i + <span class="token number">1</span> <span class="token operator">&gt;=</span> k<span class="token punctuation">)</span> printf<span class="token punctuation">(</span><span class="token string">"%d "</span>, a<span class="token punctuation">[</span>q<span class="token punctuation">[</span>hh<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    puts<span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    hh <span class="token operator">=</span> <span class="token number">0</span>,tt <span class="token operator">=</span> -1<span class="token punctuation">;</span>    for<span class="token punctuation">(</span>int i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i ++<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        if<span class="token punctuation">(</span>hh <span class="token operator">&lt;=</span> tt <span class="token operator">&amp;&amp;</span> k <span class="token operator">&lt;</span> i - q<span class="token punctuation">[</span>hh<span class="token punctuation">]</span> + <span class="token number">1</span><span class="token punctuation">)</span> hh ++<span class="token punctuation">;</span>        while<span class="token punctuation">(</span>hh <span class="token operator">&lt;=</span> tt <span class="token operator">&amp;&amp;</span> a<span class="token punctuation">[</span>q<span class="token punctuation">[</span>tt<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">&lt;=</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> tt --<span class="token punctuation">;</span>        q<span class="token punctuation">[</span> ++ tt<span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span>        if<span class="token punctuation">(</span>i + <span class="token number">1</span> <span class="token operator">&gt;=</span> k <span class="token punctuation">)</span> printf<span class="token punctuation">(</span><span class="token string">"%d "</span>, a<span class="token punctuation">[</span>q<span class="token punctuation">[</span>hh<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token builtin class-name">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Dfs组合型枚举</title>
      <link href="/2022/03/20/dfs-zu-he-xing-mei-ju/"/>
      <url>/2022/03/20/dfs-zu-he-xing-mei-ju/</url>
      
        <content type="html"><![CDATA[<p>从 1∼n 这 n 个整数中随机选出 m个，输出所有可能的选择方案。</p><h4 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h4><p>两个整数 n,m在同一行用空格隔开。</p><h4 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h4><p>按照从小到大的顺序输出所有方案，每行 1个。</p><p>首先，同一行内的数升序排列，相邻两个数用一个空格隔开。</p><p>其次，对于两个不同的行，对应下标的数一一比较，字典序较小的排在前面（例如 <code>1 3 5 7</code> 排在 <code>1 3 6 8</code> 前面）。</p><h4 id="数据范围"><a href="#数据范围" class="headerlink" title="数据范围"></a>数据范围</h4><p>n&gt;0<br>0≤m≤n<br>n+(n−m)≤25</p><h4 id="输入样例："><a href="#输入样例：" class="headerlink" title="输入样例："></a>输入样例：</h4><pre class="line-numbers language-none"><code class="language-none">5 3<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="输出样例："><a href="#输出样例：" class="headerlink" title="输出样例："></a>输出样例：</h4><pre class="line-numbers language-none"><code class="language-none">1 2 3 1 2 4 1 2 5 1 3 4 1 3 5 1 4 5 2 3 4 2 3 5 2 4 5 3 4 5 <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#include&lt;bits/stdc++.h&gt;</span>using namespace std<span class="token punctuation">;</span>const int <span class="token assign-left variable">N</span><span class="token operator">=</span><span class="token number">100010</span><span class="token punctuation">;</span>int n,m,p<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span>bool v<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span>void dfs<span class="token punctuation">(</span>int u,int state<span class="token punctuation">)</span><span class="token punctuation">{</span>if<span class="token punctuation">(</span>u<span class="token operator">&gt;</span>m<span class="token punctuation">)</span><span class="token punctuation">{</span>for<span class="token punctuation">(</span>int <span class="token assign-left variable">i</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>m<span class="token punctuation">;</span>i++<span class="token punctuation">)</span><span class="token punctuation">{</span>         cout<span class="token operator">&lt;&lt;</span>p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">&lt;&lt;</span><span class="token string">" "</span><span class="token punctuation">;</span><span class="token punctuation">}</span>cout<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span><span class="token builtin class-name">return</span><span class="token punctuation">;</span><span class="token punctuation">}</span>for<span class="token punctuation">(</span>int <span class="token assign-left variable">i</span><span class="token operator">=</span>state<span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i++<span class="token punctuation">)</span><span class="token punctuation">{</span>if<span class="token punctuation">(</span><span class="token operator">!</span>v<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>v<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>p<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token operator">=</span>i<span class="token punctuation">;</span>dfs<span class="token punctuation">(</span>u+1,i<span class="token punctuation">)</span><span class="token punctuation">;</span>v<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span>int <span class="token function-name function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>cin<span class="token operator">&gt;&gt;</span>n<span class="token operator">&gt;&gt;</span>m<span class="token punctuation">;</span>dfs<span class="token punctuation">(</span><span class="token number">1,1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token builtin class-name">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">给定一个长度为 n 的可包含重复数字的序列，从中随机选取 m 个数字，输出所有可能的选择方案。输入格式第一行包含两个整数 n,m。第二行包含 n 个正整数。输出格式按照从小到大的顺序输出所有方案，每行 <span class="token number">1</span> 个。首先，同一行内的数升序排列，相邻两个数用一个空格隔开。其次，对于两个不同的行，对应下标的数一一比较，字典序较小的排在前面（例如1 <span class="token number">3</span> <span class="token number">5</span> <span class="token number">7</span>排在1 <span class="token number">3</span> <span class="token number">6</span> <span class="token number">8</span>前面）。数据范围n<span class="token operator">&gt;</span><span class="token number">0</span>,<span class="token number">0</span>≤m≤n,n+<span class="token punctuation">(</span>n−m<span class="token punctuation">)</span>≤25,序列内所有元素均不大于 n。输入样例：<span class="token number">5</span> <span class="token number">3</span><span class="token number">1</span> <span class="token number">2</span> <span class="token number">2</span> <span class="token number">3</span> <span class="token number">3</span>输出样例：<span class="token number">1</span> <span class="token number">2</span> <span class="token number">2</span><span class="token number">1</span> <span class="token number">2</span> <span class="token number">3</span><span class="token number">1</span> <span class="token number">3</span> <span class="token number">3</span><span class="token number">2</span> <span class="token number">2</span> <span class="token number">3</span><span class="token number">2</span> <span class="token number">3</span> <span class="token number">3</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#include&lt;bits/stdc++.h&gt;</span>using namespace std<span class="token punctuation">;</span>const int <span class="token assign-left variable">N</span><span class="token operator">=</span><span class="token number">100010</span><span class="token punctuation">;</span>int n,p<span class="token punctuation">[</span>N<span class="token punctuation">]</span>,m,a<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span>bool v<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span>void dfs<span class="token punctuation">(</span>int u,int state<span class="token punctuation">)</span><span class="token punctuation">{</span>if<span class="token punctuation">(</span>u<span class="token operator">&gt;</span>m<span class="token punctuation">)</span><span class="token punctuation">{</span>for<span class="token punctuation">(</span>int <span class="token assign-left variable">i</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>m<span class="token punctuation">;</span>i++<span class="token punctuation">)</span>cout<span class="token operator">&lt;&lt;</span>p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">&lt;&lt;</span><span class="token string">" "</span><span class="token punctuation">;</span>cout<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span><span class="token builtin class-name">return</span><span class="token punctuation">;</span><span class="token punctuation">}</span>for<span class="token punctuation">(</span>int <span class="token assign-left variable">i</span><span class="token operator">=</span>state<span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i++<span class="token punctuation">)</span><span class="token punctuation">{</span>//排序if<span class="token punctuation">(</span><span class="token operator">!</span>v<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>p<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token operator">=</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>v<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>dfs<span class="token punctuation">(</span>u+1,i<span class="token punctuation">)</span><span class="token punctuation">;</span>v<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> while<span class="token punctuation">(</span>i<span class="token operator">&lt;=</span>n<span class="token operator">&amp;&amp;</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span>a<span class="token punctuation">[</span>i+1<span class="token punctuation">]</span><span class="token punctuation">)</span>i++<span class="token punctuation">;</span>//去重<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span>int <span class="token function-name function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>cin<span class="token operator">&gt;&gt;</span>n<span class="token operator">&gt;&gt;</span>m<span class="token punctuation">;</span>for<span class="token punctuation">(</span>int <span class="token assign-left variable">i</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i++<span class="token punctuation">)</span>cin<span class="token operator">&gt;&gt;</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>sort<span class="token punctuation">(</span>a+1,a+n+1<span class="token punctuation">)</span><span class="token punctuation">;</span>dfs<span class="token punctuation">(</span><span class="token number">1,1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token builtin class-name">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Dfs排列型枚举</title>
      <link href="/2022/03/20/dfs-pai-lie-xing-mei-ju/"/>
      <url>/2022/03/20/dfs-pai-lie-xing-mei-ju/</url>
      
        <content type="html"><![CDATA[<p>题目描述<br>把 1~&nbsp;n 这 nn个整数排成一行后随机打乱顺序，输出所有可能的次序。</p><p>输入格式<br>一个整数n。</p><p>输出格式<br>按照从小到大的顺序输出所有方案，每行1个。</p><p>首先，同一行相邻两个数用一个空格隔开。</p><p>其次，对于两个不同的行，对应下标的数一一比较，字典序较小的排在前面。</p><p>数据范围<br>1≤n≤9<br>输入样例：</p><p>3<br>输出样例：</p><p>1 2 3<br>1 3 2<br>2 1 3<br>2 3 1<br>3 1 2<br>3 2 1</p><p><img src="/2022/03/20/dfs-pai-lie-xing-mei-ju/%E6%B7%B1%E5%BA%A6%E4%BC%98%E5%85%88%E9%81%8D%E5%8E%86.png" alt="深度优先遍历"></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#include&lt;iostream&gt;</span>using namespace std<span class="token punctuation">;</span>const int N <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>int p<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span>//保存序列int v<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span>//数字是否被用过int n<span class="token punctuation">;</span>void dfs<span class="token punctuation">(</span>int u<span class="token punctuation">)</span><span class="token punctuation">{</span>    if<span class="token punctuation">(</span>u <span class="token operator">&gt;</span> n<span class="token punctuation">)</span>//数字填完了，输出    <span class="token punctuation">{</span>        for<span class="token punctuation">(</span>int i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i++<span class="token punctuation">)</span>//输出方案            cout <span class="token operator">&lt;&lt;</span> p<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span>        cout <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    for<span class="token punctuation">(</span>int i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i++<span class="token punctuation">)</span>//空位上可以选择的数字为:1 ~ n    <span class="token punctuation">{</span>        if<span class="token punctuation">(</span><span class="token operator">!</span>v<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>//如果数字 i 没有被用过        <span class="token punctuation">{</span>            p<span class="token punctuation">[</span>u<span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span>//放入空位            v<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>//数字被用，修改状态            dfs<span class="token punctuation">(</span>u + <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>//填下一个位            v<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>//回溯，取出 i        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>int <span class="token function-name function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    cin <span class="token operator">&gt;&gt;</span> n<span class="token punctuation">;</span>    dfs<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token builtin class-name">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">给定一个长度为 n 的可包含重复数字的序列，请你求出其所有不重复的全排列。输入格式第一行包含整数 n。第二行包含 n 个整数。输出格式输出所有的不同排列，每种排列占一行。在确定每种排列的输出顺序时，第一个数较小的先输出，第一个数相同时，第二个数较小的先输出，以此类推。数据范围<span class="token number">1</span>≤n≤9,数组中包含的元素的取值范围 <span class="token punctuation">[</span><span class="token number">1,9</span><span class="token punctuation">]</span>输入样例：<span class="token number">3</span><span class="token number">1</span> <span class="token number">1</span> <span class="token number">2</span>输出样例：<span class="token number">1</span> <span class="token number">1</span> <span class="token number">2</span><span class="token number">1</span> <span class="token number">2</span> <span class="token number">1</span><span class="token number">2</span> <span class="token number">1</span> <span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#include&lt;bits/stdc++.h&gt;</span>using namespace std<span class="token punctuation">;</span>const int <span class="token assign-left variable">N</span><span class="token operator">=</span><span class="token number">100010</span><span class="token punctuation">;</span>int n,p<span class="token punctuation">[</span>N<span class="token punctuation">]</span>,a<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span>bool v<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span>void dfs<span class="token punctuation">(</span>int u<span class="token punctuation">)</span><span class="token punctuation">{</span>if<span class="token punctuation">(</span>u<span class="token operator">&gt;</span>n<span class="token punctuation">)</span><span class="token punctuation">{</span>for<span class="token punctuation">(</span>int <span class="token assign-left variable">i</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i++<span class="token punctuation">)</span>cout<span class="token operator">&lt;&lt;</span>p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">&lt;&lt;</span><span class="token string">" "</span><span class="token punctuation">;</span>cout<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span><span class="token builtin class-name">return</span><span class="token punctuation">;</span><span class="token punctuation">}</span>for<span class="token punctuation">(</span>int <span class="token assign-left variable">i</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i++<span class="token punctuation">)</span><span class="token punctuation">{</span>if<span class="token punctuation">(</span><span class="token operator">!</span>v<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>p<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token operator">=</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>v<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>dfs<span class="token punctuation">(</span>u+1<span class="token punctuation">)</span><span class="token punctuation">;</span>v<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> while<span class="token punctuation">(</span>i<span class="token operator">&lt;=</span>n<span class="token operator">&amp;&amp;</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span>a<span class="token punctuation">[</span>i+1<span class="token punctuation">]</span><span class="token punctuation">)</span>i++<span class="token punctuation">;</span>//去重这步很关键<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span>int <span class="token function-name function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>cin<span class="token operator">&gt;&gt;</span>n<span class="token punctuation">;</span>for<span class="token punctuation">(</span>int <span class="token assign-left variable">i</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i++<span class="token punctuation">)</span>cin<span class="token operator">&gt;&gt;</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>sort<span class="token punctuation">(</span>a+1,a+n+1<span class="token punctuation">)</span><span class="token punctuation">;</span>dfs<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token builtin class-name">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Dfs指数型枚举</title>
      <link href="/2022/03/20/dfs-zhi-shu-xing-mei-ju/"/>
      <url>/2022/03/20/dfs-zhi-shu-xing-mei-ju/</url>
      
        <content type="html"><![CDATA[<p>从 1∼n这 n 个整数中随机选取任意多个，输出所有可能的选择方案。</p><h4 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h4><p>输入一个整数 n。</p><h4 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h4><p>每行输出一种方案。</p><p>同一行内的数必须升序排列，相邻两个数用恰好 11 个空格隔开。</p><p>对于没有选任何数的方案，输出空行。</p><p>本题有自定义校验器（SPJ），各行（不同方案）之间的顺序任意。</p><h4 id="数据范围"><a href="#数据范围" class="headerlink" title="数据范围"></a>数据范围</h4><p>1≤n≤15</p><h4 id="输入样例："><a href="#输入样例：" class="headerlink" title="输入样例："></a>输入样例：</h4><pre class="line-numbers language-none"><code class="language-none">3<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="输出样例："><a href="#输出样例：" class="headerlink" title="输出样例："></a>输出样例：</h4><pre class="line-numbers language-none"><code class="language-none">322 311 31 21 2 3<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2022/03/20/dfs-zhi-shu-xing-mei-ju/866.png" alt="866"></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#include &lt;iostream&gt;</span>using namespace std<span class="token punctuation">;</span>const int <span class="token assign-left variable">N</span><span class="token operator">=</span><span class="token number">20</span><span class="token punctuation">;</span>int n<span class="token punctuation">;</span>bool vis<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span> //判断选还是不选void DFS<span class="token punctuation">(</span>int u<span class="token punctuation">)</span> //第几层就是筛选第几个数字<span class="token punctuation">{</span>    if<span class="token punctuation">(</span>u<span class="token operator">&gt;</span>n<span class="token punctuation">)</span> //不可以有等号，如果有等号会少一层递归，即最后一层无法递归     <span class="token punctuation">{</span>        for<span class="token punctuation">(</span>int <span class="token assign-left variable">i</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i++<span class="token punctuation">)</span>//从1到n选择        if<span class="token punctuation">(</span>vis<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>  //把选择的数打印出来            cout<span class="token operator">&lt;&lt;</span>i<span class="token operator">&lt;&lt;</span><span class="token string">" "</span><span class="token punctuation">;</span>        cout<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>        <span class="token builtin class-name">return</span> <span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span> <span class="token punctuation">{</span>        vis<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token operator">=</span>true<span class="token punctuation">;</span>//选这个数字        DFS<span class="token punctuation">(</span>u+1<span class="token punctuation">)</span><span class="token punctuation">;</span>        vis<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token operator">=</span>false<span class="token punctuation">;</span>//不选这个数字        DFS<span class="token punctuation">(</span>u+1<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>int <span class="token function-name function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    cin<span class="token operator">&gt;&gt;</span>n<span class="token punctuation">;</span>    DFS<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  //从1开始选择，到n结束，所以不能从0开始；    <span class="token builtin class-name">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-bah" data-language="bah"><code class="language-bah">给定一个长度为 n 的可包含重复数字的序列，从中随机选取任意多个数字，输出所有可能的选择方案。输入格式第一行包含一个整数 n，表示序列长度。第二行包含 n 个正整数。输出格式每行输出一种方案。同一行内的数必须升序排列，相邻两个数用恰好1个空格隔开。对于没有选任何数的方案，输出空行。本题有自定义校验器（SPJ），各行（不同方案）之间的顺序任意。数据范围1≤n≤15,序列内所有元素均不大于 n。输入样例：31 2 2输出样例：121 22 21 2 2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">//构建一个选个数的树<span class="token comment">#include&lt;bits/stdc++.h&gt;</span>using namespace std<span class="token punctuation">;</span>const int <span class="token assign-left variable">N</span><span class="token operator">=</span><span class="token number">100010</span><span class="token punctuation">;</span>int p<span class="token punctuation">[</span>N<span class="token punctuation">]</span>,n<span class="token punctuation">;</span>bool v<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span>void dfs<span class="token punctuation">(</span>int u<span class="token punctuation">)</span><span class="token punctuation">{</span>if<span class="token punctuation">(</span>u<span class="token operator">==</span>n<span class="token punctuation">)</span><span class="token punctuation">{</span>for<span class="token punctuation">(</span>int <span class="token assign-left variable">i</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i++<span class="token punctuation">)</span>if<span class="token punctuation">(</span><span class="token operator">!</span>v<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>cout<span class="token operator">&lt;&lt;</span>p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">&lt;&lt;</span><span class="token string">" "</span><span class="token punctuation">;</span>cout<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span><span class="token builtin class-name">return</span><span class="token punctuation">;</span><span class="token punctuation">}</span>int <span class="token assign-left variable">a</span><span class="token operator">=</span>u<span class="token punctuation">;</span>while<span class="token punctuation">(</span>a<span class="token operator">&lt;</span>n<span class="token operator">&amp;&amp;</span>p<span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token operator">==</span>p<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>a++<span class="token punctuation">;</span><span class="token punctuation">}</span>//下标必须从0开始 v<span class="token punctuation">[</span>u<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>dfs<span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>//选0个 for<span class="token punctuation">(</span>int <span class="token assign-left variable">i</span><span class="token operator">=</span>u<span class="token punctuation">;</span>i<span class="token operator">&lt;</span>a<span class="token punctuation">;</span>i++<span class="token punctuation">)</span><span class="token punctuation">{</span>v<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>dfs<span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>//选多个 <span class="token punctuation">}</span>for<span class="token punctuation">(</span>int <span class="token assign-left variable">i</span><span class="token operator">=</span>u<span class="token punctuation">;</span>i<span class="token operator">&lt;</span>a<span class="token punctuation">;</span>i++<span class="token punctuation">)</span>v<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span>int <span class="token function-name function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>cin<span class="token operator">&gt;&gt;</span>n<span class="token punctuation">;</span>for<span class="token punctuation">(</span>int <span class="token assign-left variable">i</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i++<span class="token punctuation">)</span><span class="token punctuation">{</span>cin<span class="token operator">&gt;&gt;</span>p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span>sort<span class="token punctuation">(</span>p,p+n<span class="token punctuation">)</span><span class="token punctuation">;</span>dfs<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token builtin class-name">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>树状数组</title>
      <link href="/2022/03/19/shu-zhuang-shu-zu/"/>
      <url>/2022/03/19/shu-zhuang-shu-zu/</url>
      
        <content type="html"><![CDATA[<p>n 个小朋友站成一排。现在要把他们按身高从低到高的顺序排列，但是每次只能交换位置相邻的两个小朋友。<br>每个小朋友都有一个不高兴的程度。开始的时候，所有小朋友的不高兴程度都是0。<br>如果某个小朋友第一次被要求交换，则他的不高兴程度增加1，如果第二次要求他交换，则他的不高兴程度增加2（即不高兴程度为3），依次类推。<br>当要求某个小朋友第k次交换时，他的不高兴程度增加k。<br>请问，要让所有小朋友按从低到高排队，他们的不高兴程度之和最小是多少。<br>如果有两个小朋友身高一样，则他们谁站在谁前面是没有关系的。</p><h4 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h4><p>输入的第一行包含一个整数n，表示小朋友的个数。<br>第二行包含 n 个整数 H1 H2 … Hn，分别表示每个小朋友的身高。<br>1&lt;=n&lt;=100000，0&lt;=Hi&lt;=1000000。</p><h4 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h4><p>输出一行，包含一个整数，表示小朋友的不高兴程度和的最小值。</p><h4 id="输入样例-复制"><a href="#输入样例-复制" class="headerlink" title="输入样例 复制"></a>输入样例 复制</h4><pre class="line-numbers language-none"><code class="language-none">33 2 1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="输出样例-复制"><a href="#输出样例-复制" class="headerlink" title="输出样例 复制"></a>输出样例 复制</h4><pre class="line-numbers language-none"><code class="language-none">9<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#include&lt;bits/stdc++.h&gt; </span>using namespace std<span class="token punctuation">;</span>//树状数组是解决动态前缀和的数据结构 //区间加单点查询也可利用树枝数组采用差分思想解决//单点修改和区间查询时间复杂度均为ologn，1e6次数是logn极限 const int <span class="token assign-left variable">N</span><span class="token operator">=</span><span class="token number">1000010</span><span class="token punctuation">;</span>typedef long long ll<span class="token punctuation">;</span>int n<span class="token punctuation">;</span>int h<span class="token punctuation">[</span>N<span class="token punctuation">]</span>,tr<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span>//tr是树状数组 int sum<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span>//对于每个小朋友，他的前面比他小的和后以及后面比他大的数量之和 int lowbit<span class="token punctuation">(</span>int x<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token builtin class-name">return</span> x <span class="token operator">&amp;</span> -x<span class="token punctuation">;</span><span class="token punctuation">}</span>//单点更新 void add<span class="token punctuation">(</span>int x, int <span class="token function">v</span><span class="token punctuation">)</span>//更新，对下标为x的数组+v <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>int i <span class="token operator">=</span> x<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> N<span class="token punctuation">;</span> i <span class="token operator">+=</span> lowbit<span class="token punctuation">(</span>i<span class="token punctuation">))</span> tr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+=</span> <span class="token function">v</span><span class="token punctuation">;</span><span class="token punctuation">}</span>//区间查询 int query<span class="token punctuation">(</span>int x<span class="token punctuation">)</span>//求下标1到x的树状数组的和 <span class="token punctuation">{</span>    int res <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>int i <span class="token operator">=</span> x<span class="token punctuation">;</span> i<span class="token operator">&gt;</span><span class="token number">0</span><span class="token punctuation">;</span> i -<span class="token operator">=</span> lowbit<span class="token punctuation">(</span>i<span class="token punctuation">))</span> res <span class="token operator">+=</span> tr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token builtin class-name">return</span> res<span class="token punctuation">;</span><span class="token punctuation">}</span>int <span class="token function-name function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>   scanf<span class="token punctuation">(</span><span class="token string">"%d"</span>, <span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>int i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i ++ <span class="token punctuation">)</span> cin<span class="token operator">&gt;&gt;</span>h<span class="token punctuation">[</span>i<span class="token punctuation">]</span>,h<span class="token punctuation">[</span>i<span class="token punctuation">]</span>++<span class="token punctuation">;</span>//scanf<span class="token punctuation">(</span><span class="token string">"%d"</span>, <span class="token operator">&amp;</span>h<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>, h<span class="token punctuation">[</span>i<span class="token punctuation">]</span> ++<span class="token punctuation">;</span>    for<span class="token punctuation">(</span>int <span class="token assign-left variable">i</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i++<span class="token punctuation">)</span>    <span class="token punctuation">{</span>sum<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>query<span class="token punctuation">(</span>N-1<span class="token punctuation">)</span>-query<span class="token punctuation">(</span>h<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    add<span class="token punctuation">(</span>h<span class="token punctuation">[</span>i<span class="token punctuation">]</span>,1<span class="token punctuation">)</span><span class="token punctuation">;</span>//把当前数的1个数量投入到树状数组 <span class="token punctuation">}</span>    memset<span class="token punctuation">(</span>tr,0,sizeof <span class="token function">tr</span><span class="token punctuation">)</span><span class="token punctuation">;</span>//每次操作都要重置一次因为这里的tr是必须存在全局变量的     for<span class="token punctuation">(</span>int <span class="token assign-left variable">i</span><span class="token operator">=</span>n<span class="token punctuation">;</span>i<span class="token operator">&gt;</span><span class="token number">0</span><span class="token punctuation">;</span>i--<span class="token punctuation">)</span>//~i代表i<span class="token operator">&gt;=</span><span class="token number">0</span><span class="token punctuation">;</span>i代表i<span class="token operator">&gt;=</span><span class="token number">1</span><span class="token punctuation">;</span>     <span class="token punctuation">{</span>sum<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">+=</span>query<span class="token punctuation">(</span>h<span class="token punctuation">[</span>i<span class="token punctuation">]</span>-1<span class="token punctuation">)</span><span class="token punctuation">;</span>     add<span class="token punctuation">(</span>h<span class="token punctuation">[</span>i<span class="token punctuation">]</span>,1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>    ll <span class="token assign-left variable">res</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        for<span class="token punctuation">(</span>int <span class="token assign-left variable">i</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i++<span class="token punctuation">)</span><span class="token assign-left variable">res</span><span class="token operator">+=</span><span class="token punctuation">(</span>ll<span class="token punctuation">)</span>sum<span class="token punctuation">[</span>i<span class="token punctuation">]</span>*<span class="token punctuation">(</span>sum<span class="token punctuation">[</span>i<span class="token punctuation">]</span>+1<span class="token punctuation">)</span>/2<span class="token punctuation">;</span>    cout<span class="token operator">&lt;&lt;</span>res<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>    //第i个人的总交换次数等于i前个人比其大的和i后比其小的和的总和         <span class="token builtin class-name">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">树状数组求逆序对个数<span class="token comment">#include&lt;bits/stdc++.h&gt;</span>using namespace std<span class="token punctuation">;</span>const int <span class="token assign-left variable">N</span><span class="token operator">=</span><span class="token number">10010</span><span class="token punctuation">;</span>int tr<span class="token punctuation">[</span>N<span class="token punctuation">]</span>,a<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span>int n<span class="token punctuation">;</span>int lowbit<span class="token punctuation">(</span>int x<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token builtin class-name">return</span> x<span class="token operator">&amp;</span>-x<span class="token punctuation">;</span><span class="token punctuation">}</span>void add<span class="token punctuation">(</span>int x,int <span class="token function">v</span><span class="token punctuation">)</span><span class="token punctuation">{</span>for<span class="token punctuation">(</span>int <span class="token assign-left variable">i</span><span class="token operator">=</span>x<span class="token punctuation">;</span>i<span class="token operator">&lt;</span>N<span class="token punctuation">;</span><span class="token assign-left variable">i</span><span class="token operator">+=</span>lowbit<span class="token punctuation">(</span>i<span class="token punctuation">))</span>tr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">+=</span>v<span class="token punctuation">;</span><span class="token punctuation">}</span> int query<span class="token punctuation">(</span>int x<span class="token punctuation">)</span><span class="token punctuation">{</span>//统计小于等于x下标的区间和 int <span class="token assign-left variable">res</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>for<span class="token punctuation">(</span>int <span class="token assign-left variable">i</span><span class="token operator">=</span>x<span class="token punctuation">;</span>i<span class="token operator">&gt;</span><span class="token number">0</span><span class="token punctuation">;</span>i-<span class="token operator">=</span>lowbit<span class="token punctuation">(</span>i<span class="token punctuation">))</span><span class="token punctuation">{</span><span class="token assign-left variable">res</span><span class="token operator">+=</span>tr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token builtin class-name">return</span> res<span class="token punctuation">;</span><span class="token punctuation">}</span>int cmp<span class="token punctuation">(</span>int x,int y<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token builtin class-name">return</span> x<span class="token operator">&gt;</span>y<span class="token punctuation">;</span><span class="token punctuation">}</span>int <span class="token function-name function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>cin<span class="token operator">&gt;&gt;</span>n<span class="token punctuation">;</span>memset<span class="token punctuation">(</span>tr,0,sizeof <span class="token function">tr</span><span class="token punctuation">)</span><span class="token punctuation">;</span>for<span class="token punctuation">(</span>int <span class="token assign-left variable">i</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i++<span class="token punctuation">)</span><span class="token punctuation">{</span>cin<span class="token operator">&gt;&gt;</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span>sort<span class="token punctuation">(</span>a+1,a+n+1,cmp<span class="token punctuation">)</span><span class="token punctuation">;</span>int <span class="token assign-left variable">res</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>for<span class="token punctuation">(</span>int <span class="token assign-left variable">i</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i++<span class="token punctuation">)</span><span class="token punctuation">{</span>int <span class="token assign-left variable">b</span><span class="token operator">=</span>query<span class="token punctuation">(</span>N-1<span class="token punctuation">)</span>-query<span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>add<span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span>,1<span class="token punctuation">)</span><span class="token punctuation">;</span>//要放在后面 <span class="token assign-left variable">res</span><span class="token operator">+=</span>b<span class="token punctuation">;</span><span class="token punctuation">}</span>cout<span class="token operator">&lt;&lt;</span>res<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span><span class="token builtin class-name">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
            <tag> 树状数组 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>并查集</title>
      <link href="/2022/03/17/bing-cha-ji/"/>
      <url>/2022/03/17/bing-cha-ji/</url>
      
        <content type="html"><![CDATA[<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#include&lt;bits/stdc++.h&gt;</span>using namespace std<span class="token punctuation">;</span>const int <span class="token assign-left variable">N</span><span class="token operator">=</span><span class="token number">100010</span><span class="token punctuation">;</span> int fa<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span> void init<span class="token punctuation">(</span>int n<span class="token punctuation">)</span><span class="token punctuation">{</span>    for<span class="token punctuation">(</span>int <span class="token assign-left variable">i</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i++<span class="token punctuation">)</span>        fa<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>i<span class="token punctuation">;</span><span class="token punctuation">}</span>int find<span class="token punctuation">(</span>int x<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token builtin class-name">return</span> fa<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">==</span>x?x:fa<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token operator">=</span>find<span class="token punctuation">(</span>fa<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>//递归出口是x的父亲等于x，路径压缩是将x的父亲指向递归x的父亲，即x的祖宗，防止链式结构,<span class="token operator">=</span>优先级高于三目运算符?和： <span class="token punctuation">}</span>void merge<span class="token punctuation">(</span>int x,int y<span class="token punctuation">)</span><span class="token punctuation">{</span>    fa<span class="token punctuation">[</span>find<span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token operator">=</span>find<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>//左边一个大括号代表集合让y集合的根节点指向x的根节点 <span class="token punctuation">}</span>int <span class="token function-name function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>int n<span class="token punctuation">;</span>init<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>merge<span class="token punctuation">(</span><span class="token number">1,2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>merge<span class="token punctuation">(</span><span class="token number">3,5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>merge<span class="token punctuation">(</span><span class="token number">2,3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token assign-left variable">n</span><span class="token operator">=</span>find<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>cout<span class="token operator">&lt;&lt;</span>n<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span><span class="token builtin class-name">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
            <tag> 并查集 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数组模拟静态链表</title>
      <link href="/2022/03/17/shu-zu-mo-ni-jing-tai-lian-biao/"/>
      <url>/2022/03/17/shu-zu-mo-ni-jing-tai-lian-biao/</url>
      
        <content type="html"><![CDATA[<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#include&lt;bits/stdc++.h&gt;</span>using namespace std<span class="token punctuation">;</span>const int <span class="token assign-left variable">N</span><span class="token operator">=</span><span class="token number">100010</span><span class="token punctuation">;</span>int <span class="token assign-left variable">head</span><span class="token operator">=</span>-1,e<span class="token punctuation">[</span>N<span class="token punctuation">]</span>,ne<span class="token punctuation">[</span>N<span class="token punctuation">]</span>,idx<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>void add_to_head<span class="token punctuation">(</span>int x<span class="token punctuation">)</span><span class="token punctuation">{</span>e<span class="token punctuation">[</span>idx<span class="token punctuation">]</span><span class="token operator">=</span>x<span class="token punctuation">;</span>//创建一个空节点 ne<span class="token punctuation">[</span>idx<span class="token punctuation">]</span><span class="token operator">=</span>head<span class="token punctuation">;</span>//使得这个节点指向头节点下一个节点 <span class="token assign-left variable">head</span><span class="token operator">=</span>idx++<span class="token punctuation">;</span>//使得头节点指向新节点并更新当前位置 <span class="token punctuation">}</span>void add<span class="token punctuation">(</span>int k,int x<span class="token punctuation">)</span><span class="token punctuation">{</span>e<span class="token punctuation">[</span>idx<span class="token punctuation">]</span><span class="token operator">=</span>x<span class="token punctuation">;</span>//创建一个空节点 ne<span class="token punctuation">[</span>idx<span class="token punctuation">]</span><span class="token operator">=</span>ne<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">;</span>//使得这个空节点指向节点的下一个节点 ne<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token operator">=</span>idx++<span class="token punctuation">;</span>//使得k节点指向新节点并更新当前位置 <span class="token punctuation">}</span>void remove<span class="token punctuation">(</span>int k<span class="token punctuation">)</span><span class="token punctuation">{</span>ne<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token operator">=</span>ne<span class="token punctuation">[</span>ne<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span>int <span class="token function-name function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>add_to_head<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>add<span class="token punctuation">(</span><span class="token number">0,2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>add<span class="token punctuation">(</span><span class="token number">1,3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>remove<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>for<span class="token punctuation">(</span>int <span class="token assign-left variable">i</span><span class="token operator">=</span>head<span class="token punctuation">;</span>i<span class="token operator">!=</span>-1<span class="token punctuation">;</span><span class="token assign-left variable">i</span><span class="token operator">=</span>ne<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>cout<span class="token operator">&lt;&lt;</span>e<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">&lt;&lt;</span><span class="token string">" "</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token builtin class-name">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
            <tag> 链表 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>线性Dp</title>
      <link href="/2022/03/16/xian-xing-dp/"/>
      <url>/2022/03/16/xian-xing-dp/</url>
      
        <content type="html"><![CDATA[<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">给定一个如下图所示的数字三角形，从顶部出发，在每一结点可以选择移动至其左下方的结点或移动至其右下方的结点，一直走到底层，要求找出一条路径，使路径上的数字的和最大。        <span class="token number">7</span>      <span class="token number">3</span>   <span class="token number">8</span>    <span class="token number">8</span>   <span class="token number">1</span>   <span class="token number">0</span>  <span class="token number">2</span>   <span class="token number">7</span>   <span class="token number">4</span>   <span class="token number">4</span><span class="token number">4</span>   <span class="token number">5</span>   <span class="token number">2</span>   <span class="token number">6</span>   <span class="token number">5</span>输入格式第一行包含整数 n，表示数字三角形的层数。接下来 n 行，每行包含若干整数，其中第 i 行表示数字三角形第 i 层包含的整数。输出格式输出一个整数，表示最大的路径数字和。数据范围<span class="token number">1</span>≤n≤500,−10000≤三角形中的整数≤10000输入样例：<span class="token number">5</span><span class="token number">7</span><span class="token number">3</span> <span class="token number">8</span><span class="token number">8</span> <span class="token number">1</span> <span class="token number">0</span> <span class="token number">2</span> <span class="token number">7</span> <span class="token number">4</span> <span class="token number">4</span><span class="token number">4</span> <span class="token number">5</span> <span class="token number">2</span> <span class="token number">6</span> <span class="token number">5</span>输出样例：<span class="token number">30</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#include&lt;bits/stdc++.h&gt;</span>using namespace std<span class="token punctuation">;</span>int <span class="token function-name function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>int i,j,n,f<span class="token punctuation">[</span><span class="token number">1000</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1000</span><span class="token punctuation">]</span><span class="token punctuation">;</span>cin<span class="token operator">&gt;&gt;</span>n<span class="token punctuation">;</span>for<span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i++<span class="token punctuation">)</span>for<span class="token punctuation">(</span>j<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;=</span>i<span class="token punctuation">;</span>j++<span class="token punctuation">)</span>cin<span class="token operator">&gt;&gt;</span>f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>for<span class="token punctuation">(</span>i<span class="token operator">=</span>n<span class="token punctuation">;</span>i<span class="token operator">&gt;=</span><span class="token number">1</span><span class="token punctuation">;</span>i--<span class="token punctuation">)</span>for<span class="token punctuation">(</span>j<span class="token operator">=</span>i<span class="token punctuation">;</span>j<span class="token operator">&gt;=</span><span class="token number">1</span><span class="token punctuation">;</span>j--<span class="token punctuation">)</span><span class="token punctuation">{</span>f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span>max<span class="token punctuation">(</span>f<span class="token punctuation">[</span>i+1<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span>+f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span>,f<span class="token punctuation">[</span>i+1<span class="token punctuation">]</span><span class="token punctuation">[</span>j+1<span class="token punctuation">]</span>+f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>cout<span class="token operator">&lt;&lt;</span>f<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span><span class="token builtin class-name">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">给定一个长度为N的数列<span class="token punctuation">(</span>w<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">)</span>，求数值严格单调递增的子序列的长度最长是多少。样例输入格式第一行包含整数N。第二行包含N个整数，表示完整序列。输出格式输出一个整数，表示最大长度。数据范围<span class="token number">1</span> ≤ N ≤ <span class="token number">1000</span>，−1e9 ≤ 数列中的数 ≤ 1e9输入样例：<span class="token number">7</span><span class="token number">3</span> <span class="token number">1</span> <span class="token number">2</span> <span class="token number">1</span> <span class="token number">8</span> <span class="token number">5</span> <span class="token number">6</span>输出样例：<span class="token number">4</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">(</span>动态规划<span class="token punctuation">)</span> O<span class="token punctuation">(</span>n2<span class="token punctuation">)</span>O<span class="token punctuation">(</span>n2<span class="token punctuation">)</span>状态表示：f<span class="token punctuation">[</span>i<span class="token punctuation">]</span>表示从第一个数字开始算，以w<span class="token punctuation">[</span>i<span class="token punctuation">]</span>结尾的最大的上升序列。<span class="token punctuation">(</span>以w<span class="token punctuation">[</span>i<span class="token punctuation">]</span>结尾的所有上升序列中属性为最大值的那一个<span class="token punctuation">)</span>状态计算（集合划分）：j∈<span class="token punctuation">(</span><span class="token number">0,1</span>,2,<span class="token punctuation">..</span>,i-1<span class="token punctuation">)</span>, 在w<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&gt;</span> w<span class="token punctuation">[</span>j<span class="token punctuation">]</span>时，f<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> max<span class="token punctuation">(</span>f<span class="token punctuation">[</span>i<span class="token punctuation">]</span>, f<span class="token punctuation">[</span>j<span class="token punctuation">]</span> + <span class="token number">1</span><span class="token punctuation">)</span>。有一个边界，若前面没有比i小的，f<span class="token punctuation">[</span>i<span class="token punctuation">]</span>为1（自己为结尾）。最后在找f<span class="token punctuation">[</span>i<span class="token punctuation">]</span>的最大值。时间复杂度O<span class="token punctuation">(</span>n2<span class="token punctuation">)</span>O<span class="token punctuation">(</span>n2<span class="token punctuation">)</span> 状态数<span class="token punctuation">(</span>nn<span class="token punctuation">)</span> * 转移数<span class="token punctuation">(</span>nn<span class="token punctuation">)</span>C++ 代码<span class="token comment">#include &lt;iostream&gt;</span>using namespace std<span class="token punctuation">;</span>const int N <span class="token operator">=</span> <span class="token number">1010</span><span class="token punctuation">;</span>int n<span class="token punctuation">;</span>int w<span class="token punctuation">[</span>N<span class="token punctuation">]</span>, f<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span>int <span class="token function-name function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    cin <span class="token operator">&gt;&gt;</span> n<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>int i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i++<span class="token punctuation">)</span> cin <span class="token operator">&gt;&gt;</span> w<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    int mx <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    // 找出所计算的f<span class="token punctuation">[</span>i<span class="token punctuation">]</span>之中的最大值，边算边找    <span class="token keyword">for</span> <span class="token punctuation">(</span>int i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i++<span class="token punctuation">)</span> <span class="token punctuation">{</span>        f<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    // 设f<span class="token punctuation">[</span>i<span class="token punctuation">]</span>默认为1，找不到前面数字小于自己的时候就为1        <span class="token keyword">for</span> <span class="token punctuation">(</span>int j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> i<span class="token punctuation">;</span> j++<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>w<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&gt;</span> w<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> f<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> max<span class="token punctuation">(</span>f<span class="token punctuation">[</span>i<span class="token punctuation">]</span>, f<span class="token punctuation">[</span>j<span class="token punctuation">]</span> + <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    // 前一个小于自己的数结尾的最大上升子序列加上自己，即+1        <span class="token punctuation">}</span>        mx <span class="token operator">=</span> max<span class="token punctuation">(</span>mx, f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    cout <span class="token operator">&lt;&lt;</span> mx <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token builtin class-name">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">出两个长度为 n 的整数序列，求它们的最长公共子序列（LCS）的长度，保证第一个序列中所有元素都不重复。注意：第一个序列中的所有元素均不重复。第二个序列中可能有重复元素。一个序列中的某些元素可能不在另一个序列中出现。输入格式第一行包含一个整数 n。接下来两行，每行包含 n 个整数，表示一个整数序列。输出格式输出一个整数，表示最长公共子序列的长度。数据范围<span class="token number">1</span>≤n≤1061≤n≤106,序列内元素取值范围 <span class="token punctuation">[</span><span class="token number">1,106</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1,106</span><span class="token punctuation">]</span>。样例输入样例1：<span class="token number">5</span><span class="token number">1</span> <span class="token number">2</span> <span class="token number">3</span> <span class="token number">4</span> <span class="token number">5</span><span class="token number">1</span> <span class="token number">2</span> <span class="token number">3</span> <span class="token number">4</span> <span class="token number">5</span>输出样例1：<span class="token number">5</span>输入样例2：<span class="token number">5</span><span class="token number">1</span> <span class="token number">2</span> <span class="token number">3</span> <span class="token number">5</span> <span class="token number">4</span><span class="token number">1</span> <span class="token number">2</span> <span class="token number">3</span> <span class="token number">4</span> <span class="token number">5</span>输出样例2：<span class="token number">4</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#include &lt;iostream&gt;</span>using namespace std<span class="token punctuation">;</span>const int N <span class="token operator">=</span> <span class="token number">1010</span><span class="token punctuation">;</span>int n, m<span class="token punctuation">;</span>char a<span class="token punctuation">[</span>N<span class="token punctuation">]</span>, b<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span>int f<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span>int <span class="token function-name function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  cin <span class="token operator">&gt;&gt;</span> n <span class="token operator">&gt;&gt;</span> m <span class="token operator">&gt;&gt;</span> a + <span class="token number">1</span> <span class="token operator">&gt;&gt;</span> b + <span class="token number">1</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span>int i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i++<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>int j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> m<span class="token punctuation">;</span> j++<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> b<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> f<span class="token punctuation">[</span>i - <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j - <span class="token number">1</span><span class="token punctuation">]</span> + <span class="token number">1</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> max<span class="token punctuation">(</span>f<span class="token punctuation">[</span>i - <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span>, f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j - <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  cout <span class="token operator">&lt;&lt;</span> f<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">[</span>m<span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> <span class="token string">'\n'</span><span class="token punctuation">;</span>  <span class="token builtin class-name">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> 动态规划 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>区间Dp</title>
      <link href="/2022/03/15/qu-jian-dp/"/>
      <url>/2022/03/15/qu-jian-dp/</url>
      
        <content type="html"><![CDATA[<p><img src="/2022/03/15/qu-jian-dp/2.png" alt="2"></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#include&lt;bits/stdc++.h&gt;</span>const int <span class="token assign-left variable">N</span><span class="token operator">=</span><span class="token number">310</span><span class="token punctuation">;</span>int s<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span>int f<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span> using namespace std<span class="token punctuation">;</span>int <span class="token function-name function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>int n,i,j<span class="token punctuation">;</span>cin<span class="token operator">&gt;&gt;</span>n<span class="token punctuation">;</span>for<span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i++<span class="token punctuation">)</span>    <span class="token punctuation">{</span>cin<span class="token operator">&gt;&gt;</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">+=</span>s<span class="token punctuation">[</span>i-1<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    //区间dp枚举套路先枚举区间长度再枚举左端点     for<span class="token punctuation">(</span>int <span class="token assign-left variable">len</span><span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span>len<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>len++<span class="token punctuation">)</span>//一定要围绕集合，一堆不用合并     for<span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i+len-<span class="token operator"><span class="token file-descriptor important">1</span>&lt;</span><span class="token operator">=</span>n<span class="token punctuation">;</span>i++<span class="token punctuation">)</span>    <span class="token punctuation">{</span>    <span class="token assign-left variable">j</span><span class="token operator">=</span>i+len-1<span class="token punctuation">;</span>//自动算出右端点     f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span>1e8<span class="token punctuation">;</span> //因为要求自身最小一定要先把f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span>设成一个最大值     for<span class="token punctuation">(</span>int <span class="token assign-left variable">k</span><span class="token operator">=</span>i<span class="token punctuation">;</span>k+<span class="token operator"><span class="token file-descriptor important">1</span>&lt;</span><span class="token operator">=</span>j<span class="token punctuation">;</span>k++<span class="token punctuation">)</span>//枚举第i个元素f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span>min<span class="token punctuation">(</span>f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span>,f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span>+f<span class="token punctuation">[</span>k+1<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span>+s<span class="token punctuation">[</span>j<span class="token punctuation">]</span>-s<span class="token punctuation">[</span>i-1<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span> cout<span class="token operator">&lt;&lt;</span>f<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>    <span class="token builtin class-name">return</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2022/03/15/qu-jian-dp/3.png" alt="3"></p>]]></content>
      
      
      
        <tags>
            
            <tag> 动态规划 </tag>
            
            <tag> 区间dp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>完全背包动态规划</title>
      <link href="/2022/03/14/wan-quan-bei-bao-dong-tai-gui-hua/"/>
      <url>/2022/03/14/wan-quan-bei-bao-dong-tai-gui-hua/</url>
      
        <content type="html"><![CDATA[<p>有 N 种物品和一个容量是 V 的背包，每种物品都有无限件可用。</p><p>第 i种物品的体积是 vi，价值是 wi。</p><p>求解将哪些物品装入背包，可使这些物品的总体积不超过背包容量，且总价值最大。<br>输出最大价值。</p><h4 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h4><p>第一行两个整数，N，V用空格隔开，分别表示物品种数和背包容积。</p><p>接下来有 N行，每行两个整数 vi,wi用空格隔开，分别表示第 i种物品的体积和价值。</p><h4 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h4><p>输出一个整数，表示最大价值。</p><h4 id="数据范围"><a href="#数据范围" class="headerlink" title="数据范围"></a>数据范围</h4><p>0&lt;N,V≤1000<br>0&lt;vi,wi≤1000</p><h4 id="输入样例"><a href="#输入样例" class="headerlink" title="输入样例"></a>输入样例</h4><pre class="line-numbers language-none"><code class="language-none">4 51 22 43 44 5<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="输出样例："><a href="#输出样例：" class="headerlink" title="输出样例："></a>输出样例：</h4><pre class="line-numbers language-none"><code class="language-none">10<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>//状态转移方程</p><p><img src="/2022/03/14/wan-quan-bei-bao-dong-tai-gui-hua/2.png" alt="2"></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">//朴素方法<span class="token comment">#include&lt;bits/stdc++.h&gt;</span>using namespace std<span class="token punctuation">;</span>const int <span class="token assign-left variable">N</span><span class="token operator">=</span><span class="token number">1010</span><span class="token punctuation">;</span>int f<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span>int v<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span>int w<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span>int <span class="token function-name function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>int i,j,vm,n<span class="token punctuation">;</span>cin<span class="token operator">&gt;&gt;</span>n<span class="token operator">&gt;&gt;</span>vm<span class="token punctuation">;</span>for<span class="token punctuation">(</span> <span class="token assign-left variable">i</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i++<span class="token punctuation">)</span>cin<span class="token operator">&gt;&gt;</span>v<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">&gt;&gt;</span>w<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>for<span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i++<span class="token punctuation">)</span>for<span class="token punctuation">(</span>j<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;=</span>vm<span class="token punctuation">;</span>j++<span class="token punctuation">)</span><span class="token punctuation">{</span>f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span>f<span class="token punctuation">[</span>i-1<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>if<span class="token punctuation">(</span>j<span class="token operator">&gt;=</span>v<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span>max<span class="token punctuation">(</span>f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span>,f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j-v<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span>+w<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>//f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span>从集合的角度包含了f<span class="token punctuation">[</span>i-1<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span>且范围更大,这是这里没有判断f<span class="token punctuation">[</span>i-1<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span>的原因 //for<span class="token punctuation">(</span>int <span class="token assign-left variable">k</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j-k*v<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">&gt;=</span><span class="token number">0</span><span class="token punctuation">;</span>k++<span class="token punctuation">)</span><span class="token punctuation">{</span>//f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span>max<span class="token punctuation">(</span>f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span>,f<span class="token punctuation">[</span>i-1<span class="token punctuation">]</span><span class="token punctuation">[</span>j-k*v<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span>+k*w<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>//<span class="token punctuation">}</span><span class="token punctuation">}</span>cout<span class="token operator">&lt;&lt;</span>f<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">[</span>vm<span class="token punctuation">]</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span><span class="token builtin class-name">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">//空间优化<span class="token comment">#include&lt;bits/stdc++.h&gt;</span>using namespace std<span class="token punctuation">;</span>const int <span class="token assign-left variable">N</span><span class="token operator">=</span><span class="token number">1010</span><span class="token punctuation">;</span>int f<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span>int v<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span>int w<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span>int <span class="token function-name function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>int i,j,vm,n<span class="token punctuation">;</span>cin<span class="token operator">&gt;&gt;</span>n<span class="token operator">&gt;&gt;</span>vm<span class="token punctuation">;</span>for<span class="token punctuation">(</span> <span class="token assign-left variable">i</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i++<span class="token punctuation">)</span>cin<span class="token operator">&gt;&gt;</span>v<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">&gt;&gt;</span>w<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>for<span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i++<span class="token punctuation">)</span>for<span class="token punctuation">(</span>j<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;=</span>vm<span class="token punctuation">;</span>j++<span class="token punctuation">)</span>//这里不用动，因为v<span class="token punctuation">[</span>i<span class="token punctuation">]</span>大于0,j-v<span class="token punctuation">[</span>i<span class="token punctuation">]</span>小于j，又要求出f<span class="token punctuation">[</span>j<span class="token punctuation">]</span>必须先得求出等式右边的f<span class="token punctuation">[</span>j-v<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span>，所以这里必须 从小到大循环 <span class="token punctuation">{</span>    //f<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span>f<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>//这里可以直接取消掉，因为i从大到小循环，右边的f<span class="token punctuation">[</span>j<span class="token punctuation">]</span>必然先被算出来, 而这个f<span class="token punctuation">[</span>j<span class="token punctuation">]</span>就是上一层循环的f<span class="token punctuation">[</span>j<span class="token punctuation">]</span> //f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span>f<span class="token punctuation">[</span>i-1<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>  if<span class="token punctuation">(</span>j<span class="token operator">&gt;=</span>v<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>f<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span>max<span class="token punctuation">(</span>f<span class="token punctuation">[</span>j<span class="token punctuation">]</span>,f<span class="token punctuation">[</span>j-v<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span>+w<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>//这里的f<span class="token punctuation">[</span>j-v<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> 是小于f<span class="token punctuation">[</span>j<span class="token punctuation">]</span>的，又是从小到大循环，所以再算f<span class="token punctuation">[</span>j<span class="token punctuation">]</span>时f<span class="token punctuation">[</span>i-v<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span>已经被算出来的所以是等价的 //f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span>max<span class="token punctuation">(</span>f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span>,f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j-v<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span>+w<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>//f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span>从集合的角度包含了f<span class="token punctuation">[</span>i-1<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span>且范围更大,这是这里没有判断f<span class="token punctuation">[</span>i-1<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span>的原因 <span class="token punctuation">}</span>cout<span class="token operator">&lt;&lt;</span>f<span class="token punctuation">[</span>vm<span class="token punctuation">]</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span><span class="token builtin class-name">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> 动态规划 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>01背包动态规划</title>
      <link href="/2022/03/13/01-bei-bao-dong-tai-gui-hua/"/>
      <url>/2022/03/13/01-bei-bao-dong-tai-gui-hua/</url>
      
        <content type="html"><![CDATA[<p>动态规划的精髓是把所有的方案用一个集合表示出来，再把这个大集合分类讨论用几个小集合求出，分析出动的量与固定不动的量，题目：</p><p>有 N 件物品和一个容量是 V 的背包。每件物品只能使用一次。</p><p>第 i件物品的体积是 vi，价值是 wi。</p><p>求解将哪些物品装入背包，可使这些物品的总体积不超过背包容量，且总价值最大。<br>输出最大价值。</p><h4 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h4><p>第一行两个整数，N，V用空格隔开，分别表示物品数量和背包容积。</p><p>接下来有 N行，每行两个整数 vi,wi，用空格隔开，分别表示第 i件物品的体积和价值。</p><h4 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h4><p>输出一个整数，表示最大价值。</p><h4 id="数据范围"><a href="#数据范围" class="headerlink" title="数据范围"></a>数据范围</h4><p>0&lt;N,V≤1000<br>0&lt;vi,wi≤1000</p><h4 id="输入样例"><a href="#输入样例" class="headerlink" title="输入样例"></a>输入样例</h4><pre class="line-numbers language-none"><code class="language-none">4 51 22 43 44 5<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="输出样例："><a href="#输出样例：" class="headerlink" title="输出样例："></a>输出样例：</h4><pre class="line-numbers language-none"><code class="language-none">8<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2022/03/13/01-bei-bao-dong-tai-gui-hua/1.png" alt="1"></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#include&lt;bits/stdc++.h&gt;</span>using namespace std<span class="token punctuation">;</span>const int <span class="token assign-left variable">N</span><span class="token operator">=</span><span class="token number">1010</span><span class="token punctuation">;</span>int f<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span>int v<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span>int w<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">;</span>int <span class="token function-name function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>int n,vm<span class="token punctuation">;</span>cin<span class="token operator">&gt;&gt;</span>n<span class="token operator">&gt;&gt;</span>vm<span class="token punctuation">;</span>int i,j<span class="token punctuation">;</span>for<span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i++<span class="token punctuation">)</span>//集合是前i个物品，最值是前n个物品包含了n cin<span class="token operator">&gt;&gt;</span>v<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">&gt;&gt;</span>w<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>for<span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i++<span class="token punctuation">)</span>for<span class="token punctuation">(</span>j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;=</span>vm<span class="token punctuation">;</span>j++<span class="token punctuation">)</span>//这里j<span class="token operator">=</span><span class="token number">0</span>是因为只选前i个物品也完全可以不选<span class="token punctuation">{</span>f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span>f<span class="token punctuation">[</span>i-1<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>//这里赋值等于是因为要求出大集合，用的是两个小集合求出的，最后结果也就是大集合  if<span class="token punctuation">(</span>j<span class="token operator">&gt;=</span>v<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span>max<span class="token punctuation">(</span>f<span class="token punctuation">[</span>i-1<span class="token punctuation">]</span><span class="token punctuation">[</span>j-v<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span>+w<span class="token punctuation">[</span>i<span class="token punctuation">]</span>,f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>//这里要取最值是因为要当j<span class="token operator">&lt;</span>v<span class="token punctuation">[</span>i<span class="token punctuation">]</span>时包含i的小集合体积不够不需要考虑它的情况 <span class="token punctuation">}</span>cout<span class="token operator">&lt;&lt;</span>f<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">[</span>vm<span class="token punctuation">]</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-bah" data-language="bah"><code class="language-bah">//降维优化做等价变形#include&lt;bits/stdc++.h&gt;using namespace std;const int N=1010;int f[N];//二维f[i][j]是前i个物品总体积不超过j的集合，一维f[j]就是已经选了前i个物品总体积不超过j的选法集合 int v[N];int w[N];int main(){int n,vm;cin&gt;&gt;n&gt;&gt;vm;int i,j;for(i=1;i&lt;=n;i++)//集合是前i个物品，最值是前n个物品包含了n cin&gt;&gt;v[i]&gt;&gt;w[i];for(i=1;i&lt;=n;i++)//所谓优化空间只是对式子作等价变形时间复杂度没变 //for(j=0;j&lt;=vm;j++)//这里j=0是因为只选前i个物品也完全可以不选for(j=vm;j&gt;=0;j--)//这里要从大到小排序是因为f[i][j]的更新都必须要依赖f[i-1][j]，因此f[i-1][j]必须要不能被更新，这样只能从大到小遍历 { if(j&gt;=v[i]) f[j]=max(f[j-v[i]]+w[i],f[j]);//这里要取最值是因为要当j&lt;v[i]时包含i的小集合体积不够不需要考虑它的情况 }cout&lt;&lt;f[vm]&lt;&lt;endl;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> 动态规划 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Xr-4模拟赛</title>
      <link href="/2022/03/10/xr-4-mo-ni-sai/"/>
      <url>/2022/03/10/xr-4-mo-ni-sai/</url>
      
        <content type="html"><![CDATA[<p>X 校正在进行 CSP 前的校内集训。</p><p>一共有 nn 名 OIer 参与这次集训，教练为他们精心准备了 mm 套模拟赛题。</p><p>然而，每名 OIer 都有各自的时间安排，巧合的是，他们在接下来的 kk 天中都恰好有 mm 天有空打模拟赛。</p><p>为了方便管理，教练规定一个人必须按顺序打完 mm 套模拟赛题。</p><p>比如，小 X 在接下来的第 2,3,52,3,5 天有空打模拟赛，那么他就必须在第 22 天打第 11 套模拟赛题，第 33 天打第 22 套模拟赛题，第 55 天打第 33 套模拟赛题。</p><p>教练需要为每一个人的每一次模拟赛做准备，为了减小工作量，如果在某一天有多个人打同一套模拟赛题，那么教练只需要在这一天准备一场使用这一套题的模拟赛即可。</p><p>你作为机房大佬，教练想请你帮他计算一下，他每天需要准备多少场模拟赛。</p><h2 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h2><p>第一行三个整数 n,m,k。</p><p>接下来 n 行，每行 m个整数，第 i行第 j列的整数 a{i,j}表示第 i 个人在接下来的 k天中第 j个有空的日子为第 a{i,j}天。</p><pre class="line-numbers language-none"><code class="language-none">6 3 72 3 42 5 73 5 71 3 55 6 71 2 3<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h2><p>一行 k 个整数，第 i个整数表示接下来的第 i天教练需要准备的模拟赛场数。</p><pre class="line-numbers language-none"><code class="language-none">1 2 3 1 3 1 1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>//暴力三重循环，在输入数据量一大后时间复杂度极高,以后要尽量避免三重循环</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#include&lt;bits/stdc++.h&gt;</span>using namespace std<span class="token punctuation">;</span>int a<span class="token punctuation">[</span><span class="token number">1000</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1000</span><span class="token punctuation">]</span><span class="token punctuation">;</span>//放在main函数内就放在了栈里，栈的内存是有限的，在windows下默认2m//在linux下默认10m，或者new一个出来，二维数组int类型每个数占4个字节，256个数是1k，2048个256个数最大 //int *p<span class="token operator">=</span>new int<span class="token punctuation">[</span><span class="token number">2048</span>*256<span class="token punctuation">]</span><span class="token punctuation">;</span>//把数组开在堆上面要配合delete使用 //delete <span class="token punctuation">[</span><span class="token punctuation">]</span>p//new int p<span class="token punctuation">[</span><span class="token punctuation">]</span>配合delete <span class="token punctuation">[</span><span class="token punctuation">]</span>p,new int p配合delete p<span class="token punctuation">;</span> int <span class="token function-name function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span> int n,m,k,i,j<span class="token punctuation">;</span>cin<span class="token operator">&gt;&gt;</span>n<span class="token operator">&gt;&gt;</span>m<span class="token operator">&gt;&gt;</span>k<span class="token punctuation">;</span>for<span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i++<span class="token punctuation">)</span>for<span class="token punctuation">(</span>j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>m<span class="token punctuation">;</span>j++<span class="token punctuation">)</span>cin<span class="token operator">&gt;&gt;</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>int c<span class="token punctuation">[</span>k<span class="token punctuation">]</span>,u<span class="token punctuation">;</span>memset<span class="token punctuation">(</span>c,0,k*sizeof<span class="token punctuation">(</span>int<span class="token punctuation">))</span><span class="token punctuation">;</span>for<span class="token punctuation">(</span>u<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>u<span class="token operator">&lt;=</span>k<span class="token punctuation">;</span>u++<span class="token punctuation">)</span>for<span class="token punctuation">(</span>j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>m<span class="token punctuation">;</span>j++<span class="token punctuation">)</span>for<span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i++<span class="token punctuation">)</span>if<span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">==</span>u<span class="token punctuation">)</span><span class="token punctuation">{</span>c<span class="token punctuation">[</span>u-1<span class="token punctuation">]</span>++<span class="token punctuation">;</span><span class="token builtin class-name">break</span><span class="token punctuation">;</span><span class="token punctuation">}</span>for<span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>k<span class="token punctuation">;</span>i++<span class="token punctuation">)</span>cout<span class="token operator">&lt;&lt;</span>c<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">&lt;&lt;</span><span class="token string">" "</span><span class="token punctuation">;</span><span class="token builtin class-name">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">//利用set容器优化三重循环，使得程序on2 <span class="token comment">#include&lt;bits/stdc++.h&gt;</span>using namespace std<span class="token punctuation">;</span>int a<span class="token punctuation">[</span><span class="token number">1001</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1001</span><span class="token punctuation">]</span><span class="token punctuation">;</span>set<span class="token operator">&lt;</span>int<span class="token operator">&gt;</span> b<span class="token punctuation">[</span><span class="token number">1001</span><span class="token punctuation">]</span><span class="token punctuation">;</span>int <span class="token function-name function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>     int n,m,k,i,j<span class="token punctuation">;</span>     cin<span class="token operator">&gt;&gt;</span>n<span class="token operator">&gt;&gt;</span>m<span class="token operator">&gt;&gt;</span>k<span class="token punctuation">;</span>     for<span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>n<span class="token punctuation">;</span>i++<span class="token punctuation">)</span>     for<span class="token punctuation">(</span>j<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">&lt;=</span>m<span class="token punctuation">;</span>j++<span class="token punctuation">)</span><span class="token punctuation">{</span>     cin<span class="token operator">&gt;&gt;</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>b<span class="token punctuation">[</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">]</span>.insert<span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>//这个容器数组下标本身就是从1到k,要输出的和输入的也是1到k<span class="token punctuation">;</span>//容器数组从左到右从上到下遍历每个人的空闲时间，插入每列元素的列表也就是第j次模拟考 //因为插入的是列标如果遇到某列元素有相同的情况那么那个元素那天的考试次数不增加//就是使得在遍历每一列的时候插入的相同元素不增加输出个数     for<span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>k<span class="token punctuation">;</span>i++<span class="token punctuation">)</span> cout<span class="token operator">&lt;&lt;</span>b<span class="token punctuation">[</span>i<span class="token punctuation">]</span>.size<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span><span class="token string">" "</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>//去除每列元素重复的元素并统计所有列中同一个元素的元素个数//最后输出每个元素的个数，也就是每个学生的空闲天插入了不同列的元素的个数 <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> 数组 </tag>
            
            <tag> set容器的应用 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>字符串转数值或者数值转字符串</title>
      <link href="/2022/03/09/zi-fu-chuan-zhuan-shu-zhi/"/>
      <url>/2022/03/09/zi-fu-chuan-zhuan-shu-zhi/</url>
      
        <content type="html"><![CDATA[<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">long long strtonum<span class="token punctuation">(</span>string a<span class="token punctuation">)</span><span class="token punctuation">{</span>if<span class="token punctuation">(</span>a.size<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token builtin class-name">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">else</span><span class="token punctuation">{</span>     stringstream ssream<span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>     long long <span class="token assign-left variable">c</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>     ssream<span class="token operator">&gt;&gt;</span>c<span class="token punctuation">;</span>     <span class="token builtin class-name">return</span> c<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">string ntos<span class="token punctuation">(</span>ll a<span class="token punctuation">)</span><span class="token punctuation">{</span>stringstream b<span class="token punctuation">;</span>string c<span class="token punctuation">;</span>if<span class="token punctuation">(</span>a<span class="token operator">&lt;</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">{</span>b<span class="token operator">&lt;&lt;</span><span class="token string">"0"</span><span class="token operator">&lt;&lt;</span>a<span class="token punctuation">;</span>b<span class="token operator">&gt;&gt;</span>c<span class="token punctuation">;</span><span class="token builtin class-name">return</span> c<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>b<span class="token operator">&lt;&lt;</span>a<span class="token punctuation">;</span>b<span class="token operator">&gt;&gt;</span>c<span class="token punctuation">;</span><span class="token builtin class-name">return</span> c<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span> //若需补前导零也可以使用printf<span class="token punctuation">(</span><span class="token string">"%02d"</span>,x<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>刷题总结</title>
      <link href="/2022/03/09/shua-ti-zong-jie/"/>
      <url>/2022/03/09/shua-ti-zong-jie/</url>
      
        <content type="html"><![CDATA[<p>1.int类型变量除以int类型变量不会有小数，必须要给被除数乘上0.1才行，整形除以浮点型可以有小数</p><p>2.当题目涉及多个变量一定要仔细检查好变量是否错位</p><p>3.做完题目不要着急交，多测试几次再交</p><p>4.出错不要着急，输出所有变量看错在哪了</p><p>5.③每小时3600秒，h=n/3600；</p><p>④求分钟  m=n%3600/60</p><p>⑤求秒  s=n%3600%60</p><p>⑥越界问题     定义long long int n,只有这样才准确，即</p><p>6.暴力搜索一定要先建树</p><p>7.3221225477 (0xC0000005): 访问越界，一般是读或写了<a href="https://so.csdn.net/so/search?q=%E9%87%8E%E6%8C%87%E9%92%88&amp;spm=1001.2101.3001.7020">野指针</a>指向的内存<br>3221225725 (0xC00000FD): <a href="https://so.csdn.net/so/search?q=%E5%A0%86%E6%A0%88%E6%BA%A2%E5%87%BA&amp;spm=1001.2101.3001.7020">堆栈溢出</a>，一般是无穷递归造成的<br>3221225620 (0xC0000094): 除0错误，一般发生在<a href="https://so.csdn.net/so/search?q=%E6%95%B4%E5%9E%8B&amp;spm=1001.2101.3001.7020">整型</a>数据除了0的时候</p><p>8.必记acsall值</p><p>0的ascall值是48</p><p>字符1转数字例如’1’-‘0’,对应ascall码值分别为49,48，相减刚好变成数值1</p><p>A的ascall值的65</p><p>a的ascall值是97</p><p>9.比赛一律开LL</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/03/09/suan-fa-lu-xian/"/>
      <url>/2022/03/09/suan-fa-lu-xian/</url>
      
        <content type="html"><![CDATA[<p>title: 算法路线<br>date: 2022-03-01 18:27:30<br>categories: 算法</p><p>![f36e7fb66be943db9d4ee53987171408 (2)](算法路线/f36e7fb66be943db9d4ee53987171408 (2).png)</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>C++stl 笔记</title>
      <link href="/2022/03/03/c-stl-bi-ji/"/>
      <url>/2022/03/03/c-stl-bi-ji/</url>
      
        <content type="html"><![CDATA[<p>1.#inlude &lt; iostream &gt;:</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">cin<span class="token operator">&gt;&gt;</span>a<span class="token operator">&gt;&gt;</span>b<span class="token operator">&gt;&gt;</span>c<span class="token punctuation">;</span>cout<span class="token operator">&lt;&lt;</span>a<span class="token operator">&lt;&lt;</span><span class="token string">' '</span><span class="token operator">&lt;&lt;</span>b<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>*注意：用cin输入带空格的字符串后会截断空格前面的部分，空格后面的部分被送到缓冲区被下一个被输入的字符串读取，此时可用getline读取，geline读取一整行但要包含#include<string>头文件例如：</string></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#include &lt;iostream&gt;</span><span class="token comment">#include &lt;string&gt;</span>using namespace std<span class="token punctuation">;</span>int <span class="token function-name function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>string a<span class="token punctuation">;</span>string b<span class="token punctuation">;</span>string c<span class="token punctuation">;</span>cin<span class="token operator">&gt;&gt;</span>a<span class="token operator">&gt;&gt;</span>b<span class="token punctuation">;</span>getline<span class="token punctuation">(</span>cin,c<span class="token punctuation">)</span><span class="token punctuation">;</span>cout<span class="token operator">&lt;&lt;</span>a<span class="token operator">&lt;&lt;</span>endl<span class="token operator">&lt;&lt;</span>b<span class="token operator">&lt;&lt;</span>endl<span class="token operator">&lt;&lt;</span>c<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span><span class="token builtin class-name">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2022/03/03/c-stl-bi-ji/2022-03-03_174559.png" alt="2022-03-03_174559"></p><p>2.#include&lt; algorithm &gt;</p><p>(1):sort函数: </p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">bool compare<span class="token punctuation">(</span>int a,int b<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token builtin class-name">return</span> a<span class="token operator">&gt;</span>b<span class="token punctuation">;</span><span class="token punctuation">}</span>int a<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">{</span><span class="token number">9,6</span>,3,8,5,2,7,4,1,0<span class="token punctuation">}</span>sort<span class="token punctuation">(</span>a,a+10,compare<span class="token punctuation">)</span><span class="token punctuation">;</span>结构体外部重载比较运算符:vector<span class="token operator">&lt;</span>Student<span class="token operator">&gt;</span> V<span class="token punctuation">;</span>bool operator<span class="token operator">&lt;</span><span class="token punctuation">(</span>const Student<span class="token operator">&amp;</span> s1, const Student<span class="token operator">&amp;</span> s2<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token builtin class-name">return</span> s1.id<span class="token operator">&gt;</span>s2.id<span class="token punctuation">;</span>//降序排列    //return s1.id<span class="token operator">&lt;</span>s2.id<span class="token punctuation">;</span>//升序排列<span class="token punctuation">}</span>sort<span class="token punctuation">(</span>V.begin<span class="token punctuation">(</span><span class="token punctuation">)</span>,V.end<span class="token punctuation">(</span><span class="token punctuation">))</span><span class="token punctuation">;</span>注意:一定要重载<span class="token operator">&lt;</span>运算府，因为系统默认的是降序<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>(2)swap函数：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">swap<span class="token punctuation">(</span>a,b<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>两个相同类型的变量交换值</p><p>(3)__gcd函数:这个函数algorithm库里面有，但要注意不要忘记写前面的的两个杠</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">int <span class="token assign-left variable">k</span><span class="token operator">=</span>__gcd<span class="token punctuation">(</span>n,m<span class="token punctuation">)</span><span class="token punctuation">;</span>//最大公约数longlong gcd<span class="token punctuation">(</span>longlong a,longlong b<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token builtin class-name">return</span> <span class="token assign-left variable">b</span><span class="token operator">==</span><span class="token number">0</span>?a:gcd<span class="token punctuation">(</span>b,a%b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>//辗转相除法<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>x,y不能是浮点数</p><p>(4)max(a,b),min(a,b); </p><p>(5)abs(a)；返回该数的绝对值</p><p>(6)reverse:反转[first,last)范围内的顺序</p><pre class="line-numbers language-none"><code class="language-none">vector&lt;int&gt; v = {5,4,3,2,1};reverse(v.begin(),v.end());//v的值为1,2,3,4,5<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">string str="www.mathor.top";reverse(str.begin(),str.end());//str结果为pot.rohtam.wwww<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>（7）lcm(n,m)；求2数最小公倍数</p><p>最小公倍数等于两数乘积除以两数最大公约数，这个函数库里面没有得自己写。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">int lcm<span class="token punctuation">(</span>int a,int b<span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token builtin class-name">return</span> a/__gcd<span class="token punctuation">(</span>a,b<span class="token punctuation">)</span>*b<span class="token punctuation">;</span><span class="token punctuation">}</span>//先除再乘不容易溢出<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>(8)permutation(a,a+4)</p><p>next_permutation()会取得[first,last)所标示之序列的下一个排列组合，如果没有下一个排列组合，便返回false;否则返回true</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#include&lt;cstdio&gt;</span><span class="token comment">#include&lt;iostream&gt;</span><span class="token comment">#include&lt;algorithm&gt;</span>using namespace std<span class="token punctuation">;</span>int <span class="token function-name function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>int i<span class="token punctuation">;</span>    int a<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">{</span><span class="token number">1,2</span>,3,4<span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">do</span>    <span class="token punctuation">{</span>    for<span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">3</span><span class="token punctuation">;</span>i++<span class="token punctuation">)</span>    cout<span class="token operator">&lt;&lt;</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">&lt;&lt;</span><span class="token string">" "</span><span class="token punctuation">;</span>    cout<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>    <span class="token punctuation">}</span>while<span class="token punctuation">(</span>next_permutation<span class="token punctuation">(</span>a,a+4<span class="token punctuation">))</span><span class="token punctuation">;</span>//一定要使用dowhile结构否则会少了第一次的排列     <span class="token builtin class-name">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>3.#include&lt; bits/stdc++.h &gt;c/c++万能头文件，包含所有头文件</p><p>4.#include&lt; vector &gt;连续储存元素的变长数组</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#include&lt;bits/stdc++.h&gt;</span>using namespace std<span class="token punctuation">;</span>int <span class="token function-name function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>vector<span class="token operator">&lt;</span>int<span class="token operator">&gt;</span> a<span class="token punctuation">;</span>//创建有5个元素的数组 for<span class="token punctuation">(</span>int <span class="token assign-left variable">i</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">5</span><span class="token punctuation">;</span>i++<span class="token punctuation">)</span> <span class="token punctuation">{</span>a.push_back<span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>//容器当前最后一个元素的下一个元素赋值i ,注意若前面是a<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>则 //相当于在前五个全是0，再在第五个后面依次添加元素并赋值并且容器的size+1； <span class="token punctuation">}</span>a.pop_back<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>//删除向量最后一个元素,并且容器的size-1,注意这里的元素值并没有删除，只是改变了容器size for<span class="token punctuation">(</span>int <span class="token assign-left variable">i</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">5</span><span class="token punctuation">;</span>i++<span class="token punctuation">)</span><span class="token punctuation">{</span>cout<span class="token operator">&lt;&lt;</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span><span class="token punctuation">}</span>//输出0,1,2,3,4 for<span class="token punctuation">(</span>int <span class="token assign-left variable">i</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>a.size<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>i++<span class="token punctuation">)</span><span class="token punctuation">{</span>cout<span class="token operator">&lt;&lt;</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span><span class="token punctuation">}</span>//输出0,1,2,3 vector<span class="token operator">&lt;</span>int<span class="token operator">&gt;</span> b<span class="token punctuation">(</span><span class="token number">10,1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>//b中有10个元素,且每个元素都为1vector<span class="token operator">&lt;</span>int<span class="token operator">&gt;</span> c<span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>//复制b容器给c，这个b必需得是容器int d<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">{</span><span class="token number">1,2</span>,3<span class="token punctuation">}</span><span class="token punctuation">;</span>vector<span class="token operator">&lt;</span>int<span class="token operator">&gt;</span> e<span class="token punctuation">(</span>d,d+3<span class="token punctuation">)</span><span class="token punctuation">;</span>//复制d数组给e，这个d必需得是数组int <span class="token assign-left variable">f</span><span class="token operator">=</span>a.size<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>// 返回a中的元素个数int <span class="token assign-left variable">g</span><span class="token operator">=</span>a.back<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>//返回a中最后一个元素int <span class="token assign-left variable">r</span><span class="token operator">=</span>a.front<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>//返回a中第一个元素 int <span class="token assign-left variable">s</span><span class="token operator">=</span>a.empty<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>//判断a是否为空，空则返回truevector<span class="token operator">&lt;</span>int<span class="token operator">&gt;</span> w<span class="token punctuation">;</span> w.resize<span class="token punctuation">(</span><span class="token number">2,2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>//这个d必须的是容器，若是直接定义的数组会报错，重置数组长度且值全为2； c.swap<span class="token punctuation">(</span>w<span class="token punctuation">)</span><span class="token punctuation">;</span> for<span class="token punctuation">(</span>int <span class="token assign-left variable">i</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">9</span><span class="token punctuation">;</span>i++<span class="token punctuation">)</span><span class="token punctuation">{</span>//cout<span class="token operator">&lt;&lt;</span>c<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">&lt;&lt;</span><span class="token string">" "</span><span class="token operator">&lt;&lt;</span>w<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span><span class="token punctuation">}</span>//可变长数组，交换的同时长度也交换w.clear<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>//清除w中的元素w.resize<span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>//因为前面 swap交换了长度，不用这句会造成数组越界 w.insert<span class="token punctuation">(</span>w.begin<span class="token punctuation">(</span><span class="token punctuation">)</span>+1,5<span class="token punctuation">)</span><span class="token punctuation">;</span>//在w的第一个元素后面插入5，并且返回这个元素的迭代器 w.insert<span class="token punctuation">(</span>w.begin<span class="token punctuation">(</span><span class="token punctuation">)</span>+2,3,4<span class="token punctuation">)</span><span class="token punctuation">;</span>//在w的第2个元素的三个元素插入4 int z<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">{</span><span class="token number">7,8</span>,9<span class="token punctuation">}</span><span class="token punctuation">;</span>w.insert<span class="token punctuation">(</span>w.begin<span class="token punctuation">(</span><span class="token punctuation">)</span>+5,z,z+3<span class="token punctuation">)</span> <span class="token punctuation">;</span>//在w的第五个元素后插入z的前三个元素 //注意这个z必须得是数组不能是容器 for<span class="token punctuation">(</span>vector<span class="token operator">&lt;</span>int<span class="token operator">&gt;</span> :: iterator <span class="token assign-left variable">it</span><span class="token operator">=</span>w.begin<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>it<span class="token operator">&lt;</span>w.begin<span class="token punctuation">(</span><span class="token punctuation">)</span>+8<span class="token punctuation">;</span>it++<span class="token punctuation">)</span><span class="token punctuation">{</span>cout<span class="token operator">&lt;&lt;</span><span class="token punctuation">(</span>*it<span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span><span class="token string">" "</span><span class="token punctuation">;</span><span class="token punctuation">}</span>w.erase<span class="token punctuation">(</span>w.begin<span class="token punctuation">(</span><span class="token punctuation">)</span>,w.begin<span class="token punctuation">(</span><span class="token punctuation">)</span>+9<span class="token punctuation">)</span><span class="token punctuation">;</span>//删除第一个到第9个元素，左开右闭,会改变容器大小 vector<span class="token operator">&lt;</span> vector<span class="token operator">&lt;</span>int<span class="token operator">&gt;</span> <span class="token operator">&gt;</span> <span class="token function">v</span><span class="token punctuation">;</span> //大容器 vector<span class="token operator">&lt;</span> vector<span class="token operator">&lt;</span>int<span class="token operator">&gt;</span> <span class="token operator">&gt;</span> :: iterator it<span class="token punctuation">;</span>vector<span class="token operator">&lt;</span>int<span class="token operator">&gt;</span> :: iterator vit<span class="token punctuation">;</span>vector<span class="token operator">&lt;</span>int<span class="token operator">&gt;</span> v1<span class="token punctuation">;</span>//小容器 vector<span class="token operator">&lt;</span>int<span class="token operator">&gt;</span> v2<span class="token punctuation">;</span>vector<span class="token operator">&lt;</span>int<span class="token operator">&gt;</span> v3<span class="token punctuation">;</span>vector<span class="token operator">&lt;</span>int<span class="token operator">&gt;</span> v4<span class="token punctuation">;</span>for<span class="token punctuation">(</span>int <span class="token assign-left variable">i</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">4</span><span class="token punctuation">;</span>i++<span class="token punctuation">)</span><span class="token punctuation">{</span>v1.push_back<span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>//每个小容器代表一行 v2.push_back<span class="token punctuation">(</span>i+3<span class="token punctuation">)</span><span class="token punctuation">;</span>v3.push_back<span class="token punctuation">(</span>i+6<span class="token punctuation">)</span><span class="token punctuation">;</span>v4.push_back<span class="token punctuation">(</span>i+9<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>v.push_back<span class="token punctuation">(</span>v1<span class="token punctuation">)</span><span class="token punctuation">;</span>//把小容器放入大容器内 v.push_back<span class="token punctuation">(</span>v2<span class="token punctuation">)</span><span class="token punctuation">;</span>v.push_back<span class="token punctuation">(</span>v3<span class="token punctuation">)</span><span class="token punctuation">;</span>v.push_back<span class="token punctuation">(</span>v4<span class="token punctuation">)</span><span class="token punctuation">;</span>for<span class="token punctuation">(</span>it<span class="token operator">=</span>v.begin<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>it<span class="token operator">&lt;</span>v.end<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>it++<span class="token punctuation">)</span> <span class="token punctuation">{</span>//循环外面用大容器并且用大容器的下标表示 for<span class="token punctuation">(</span>vit <span class="token operator">=</span> <span class="token punctuation">(</span>*it<span class="token punctuation">)</span>.begin<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>vit <span class="token operator">&lt;</span> <span class="token punctuation">(</span>*it<span class="token punctuation">)</span>.end<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>vit++<span class="token punctuation">)</span><span class="token punctuation">{</span>//循环里面用小容器并且用大容器的迭代器的下标表示 cout<span class="token operator">&lt;&lt;</span>*vit<span class="token operator">&lt;&lt;</span><span class="token string">" "</span><span class="token punctuation">;</span><span class="token punctuation">}</span>cout<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span><span class="token punctuation">}</span>    <span class="token builtin class-name">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span>unique函数用法:<span class="token comment">#include&lt;bits/stdc++.h&gt;</span>using namespace std<span class="token punctuation">;</span> int <span class="token function-name function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        int b<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">{</span><span class="token number">1,3</span>,3,3,4,5,5,6,6,7<span class="token punctuation">}</span><span class="token punctuation">;</span>    vector<span class="token operator">&lt;</span>int<span class="token operator">&gt;</span> a <span class="token punctuation">(</span>b,b+10<span class="token punctuation">)</span><span class="token punctuation">;</span>    vector<span class="token operator">&lt;</span>int<span class="token operator">&gt;</span>::iterator new_end<span class="token punctuation">;</span>    new_end <span class="token operator">=</span> unique<span class="token punctuation">(</span>a.begin<span class="token punctuation">(</span><span class="token punctuation">)</span>,a.end<span class="token punctuation">(</span><span class="token punctuation">))</span><span class="token punctuation">;</span> //unique把不重复的元素移到前面去 ，返回不重复元素序列末尾        for<span class="token punctuation">(</span>int i <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">;</span> i <span class="token operator">&lt;</span> a.size<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i++<span class="token punctuation">)</span>        cout<span class="token operator">&lt;&lt;</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        cout<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>    a.erase<span class="token punctuation">(</span>new_end,a.end<span class="token punctuation">(</span><span class="token punctuation">))</span><span class="token punctuation">;</span>//真正删除重复元素     for<span class="token punctuation">(</span>int i <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">;</span> i <span class="token operator">&lt;</span> a.size<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i++<span class="token punctuation">)</span>        cout<span class="token operator">&lt;&lt;</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    cout<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span> <span class="token builtin class-name">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span>//int n <span class="token operator">=</span> unique<span class="token punctuation">(</span>nums.begin<span class="token punctuation">(</span><span class="token punctuation">)</span>, nums.end<span class="token punctuation">(</span><span class="token punctuation">))</span>-nums.begin<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>//vector和string特殊在两个迭代器相加返回其闭区间元素个数<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>5.#include &lt; list &gt;</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#include &lt;list&gt;</span><span class="token comment">#include &lt;iostream&gt; </span>using namespace std<span class="token punctuation">;</span> bool xiaoyu2<span class="token punctuation">(</span>const int<span class="token operator">&amp;</span> x<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token builtin class-name">return</span> <span class="token punctuation">(</span>x<span class="token operator">&lt;=</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> bool compare<span class="token punctuation">(</span>int a,int b<span class="token punctuation">)</span><span class="token punctuation">{</span>return a<span class="token operator">&gt;</span>b<span class="token punctuation">;</span><span class="token punctuation">}</span>int <span class="token function-name function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>int a<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">{</span><span class="token number">1,2</span>,3,4,5<span class="token punctuation">}</span><span class="token punctuation">;</span>list<span class="token operator">&lt;</span>int<span class="token operator">&gt;</span> l<span class="token punctuation">(</span>a,a+5<span class="token punctuation">)</span><span class="token punctuation">;</span>//左开右闭     cout<span class="token operator">&lt;&lt;</span>l.front<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span>endl<span class="token operator">&lt;&lt;</span>l.back<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>    l.push_front<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    l.pop_front<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        cout<span class="token operator">&lt;&lt;</span>l.front<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>        l.push_back<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               l.pop_back<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        cout<span class="token operator">&lt;&lt;</span>l.back<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>        l.remove<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>//会改变长度         l.remove_if<span class="token punctuation">(</span>xiaoyu2<span class="token punctuation">)</span><span class="token punctuation">;</span>//按条件删除，return true时删除 for<span class="token punctuation">(</span>list<span class="token operator">&lt;</span>int<span class="token operator">&gt;</span> :: iterator <span class="token assign-left variable">it</span><span class="token operator">=</span>l.begin<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>it<span class="token operator">!=</span>l.end<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>it++<span class="token punctuation">)</span><span class="token punctuation">{</span>cout<span class="token operator">&lt;&lt;</span>*it<span class="token operator">&lt;&lt;</span><span class="token string">" "</span><span class="token punctuation">;</span><span class="token punctuation">}</span>cout<span class="token operator">&lt;&lt;</span>endl<span class="token operator">&lt;&lt;</span>l.size<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>//输出4,5int b<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">{</span><span class="token number">8,9</span><span class="token punctuation">}</span><span class="token punctuation">;</span>list<span class="token operator">&lt;</span>int<span class="token operator">&gt;</span> d<span class="token punctuation">(</span>b,b+2<span class="token punctuation">)</span><span class="token punctuation">;</span>d.merge<span class="token punctuation">(</span>l<span class="token punctuation">)</span><span class="token punctuation">;</span>//从小到大按字典排序好输出for<span class="token punctuation">(</span>list<span class="token operator">&lt;</span>int<span class="token operator">&gt;</span>::iterator <span class="token assign-left variable">it</span><span class="token operator">=</span>d.begin<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>it<span class="token operator">!=</span>d.end<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>++it<span class="token punctuation">)</span>//++it的效率比it++的效率高 cout<span class="token operator">&lt;&lt;</span><span class="token punctuation">(</span>*it<span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span><span class="token string">" "</span><span class="token punctuation">;</span>//输出4,5,8,9 cout<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>d.push_back<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> d.sort<span class="token punctuation">(</span>compare<span class="token punctuation">)</span><span class="token punctuation">;</span>for<span class="token punctuation">(</span>list<span class="token operator">&lt;</span>int<span class="token operator">&gt;</span>::iterator <span class="token assign-left variable">it</span><span class="token operator">=</span>d.begin<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>it<span class="token operator">!=</span>d.end<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>++it<span class="token punctuation">)</span>//++it的效率比it++的效率高 cout<span class="token operator">&lt;&lt;</span><span class="token punctuation">(</span>*it<span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span><span class="token string">" "</span><span class="token punctuation">;</span>//输出9,8,5,4,1cout<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span> <span class="token builtin class-name">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>6.#include&lt; string &gt;</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#include &lt;string&gt;</span><span class="token comment">#include &lt;iostream&gt; </span>using namespace std<span class="token punctuation">;</span>int <span class="token function-name function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>string <span class="token assign-left variable">a</span><span class="token operator">=</span><span class="token string">"hello world"</span><span class="token punctuation">;</span>cout<span class="token operator">&lt;&lt;</span>a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">&lt;&lt;</span><span class="token string">" "</span><span class="token operator">&lt;&lt;</span>a<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>cout<span class="token operator">&lt;&lt;</span>a.at<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>int <span class="token assign-left variable">b</span><span class="token operator">=</span>a.size<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>cout<span class="token operator">&lt;&lt;</span>b<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>string c<span class="token punctuation">(</span><span class="token string">"my heart"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token assign-left variable">c</span><span class="token operator">+=</span>a<span class="token punctuation">;</span> <span class="token assign-left variable">c</span><span class="token operator">+=</span><span class="token string">'s'</span><span class="token punctuation">;</span> <span class="token assign-left variable">c</span><span class="token operator">+=</span><span class="token string">"aaaaa"</span><span class="token punctuation">;</span>  cout<span class="token operator">&lt;&lt;</span>c<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>int <span class="token assign-left variable">pos</span><span class="token operator">=</span>c.find<span class="token punctuation">(</span><span class="token string">"aa"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>//查找第一次出现位置 int <span class="token assign-left variable">rpos</span><span class="token operator">=</span>c.rfind<span class="token punctuation">(</span><span class="token string">"aa"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>//查找最后一次出现位置 cout<span class="token operator">&lt;&lt;</span>pos<span class="token operator">&lt;&lt;</span>rpos<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>if<span class="token punctuation">(</span>c.compare<span class="token punctuation">(</span><span class="token string">"aa"</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span>cout<span class="token operator">&lt;&lt;</span><span class="token string">"yes"</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span><span class="token keyword">else</span>cout<span class="token operator">&lt;&lt;</span><span class="token string">"no"</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>c.insert<span class="token punctuation">(</span><span class="token number">2</span>,<span class="token string">"askjh"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>//第2个位置后插入c.erase<span class="token punctuation">(</span><span class="token number">2,5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>//第2个位置后删除5个字符 cout<span class="token operator">&lt;&lt;</span>c<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>string str<span class="token punctuation">(</span><span class="token string">"1027827497@qq.com"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>int <span class="token assign-left variable">post</span><span class="token operator">=</span>str.find<span class="token punctuation">(</span><span class="token string">"@"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>string <span class="token assign-left variable">qqnum</span><span class="token operator">=</span>str.substr<span class="token punctuation">(</span><span class="token number">0</span>,post<span class="token punctuation">)</span><span class="token punctuation">;</span>//返回第0个位置到第n个位置的字串 cout<span class="token operator">&lt;&lt;</span>qqnum<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span> <span class="token builtin class-name">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">#include&lt;bits/stdc++.h&gt;</span>using namespace std<span class="token punctuation">;</span>string s<span class="token punctuation">;</span>int <span class="token function-name function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>cin<span class="token operator">&gt;&gt;</span>s<span class="token punctuation">;</span>//int <span class="token assign-left variable">idx</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>//for<span class="token punctuation">(</span>auto <span class="token operator">&amp;</span>it:s<span class="token punctuation">)</span><span class="token punctuation">{</span>//if<span class="token punctuation">(</span>it<span class="token operator">==</span><span class="token string">'/'</span><span class="token punctuation">)</span>//s.erase<span class="token punctuation">(</span>idx,1<span class="token punctuation">)</span><span class="token punctuation">;</span>//第几个位置删除 //idx++<span class="token punctuation">;</span>//<span class="token punctuation">}</span>for<span class="token punctuation">(</span>string:: iterator <span class="token assign-left variable">it</span><span class="token operator">=</span>s.begin<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>it<span class="token operator">!=</span>s.end<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>++it<span class="token punctuation">)</span><span class="token punctuation">{</span>if<span class="token punctuation">(</span>*it<span class="token operator">==</span><span class="token string">'/'</span><span class="token punctuation">)</span><span class="token punctuation">{</span>s.erase<span class="token punctuation">(</span>it<span class="token punctuation">)</span><span class="token punctuation">;</span>//迭代器位置删除 <span class="token punctuation">}</span><span class="token punctuation">}</span>cout<span class="token operator">&lt;&lt;</span>s<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span><span class="token builtin class-name">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>7.#include &lt; deque &gt;</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#include&lt;bits/stdc++.h&gt;</span>using namespace std<span class="token punctuation">;</span>int <span class="token function-name function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>int b<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">{</span><span class="token number">1,2</span>,3<span class="token punctuation">}</span><span class="token punctuation">;</span>deque<span class="token operator">&lt;</span>int<span class="token operator">&gt;</span> a<span class="token punctuation">;</span>//a.assign<span class="token punctuation">(</span><span class="token number">5,1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>//输出1 <span class="token number">1</span> <span class="token number">1</span> <span class="token number">1</span> <span class="token number">1</span> a.assign<span class="token punctuation">(</span>b,b+3<span class="token punctuation">)</span><span class="token punctuation">;</span>//输出 <span class="token number">1</span> <span class="token number">2</span> <span class="token number">3</span> deque<span class="token operator">&lt;</span>int<span class="token operator">&gt;</span>::iterator it<span class="token punctuation">;</span>a.push_back<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>//多输出个5    a.pop_back<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>//去掉5    a.push_front<span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">;</span>//开头添加7     a.push_back<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>//末尾添加8     <span class="token assign-left variable">it</span><span class="token operator">=</span>a.begin<span class="token punctuation">(</span><span class="token punctuation">)</span>+1<span class="token punctuation">;</span>    a.erase<span class="token punctuation">(</span>it,it+1<span class="token punctuation">)</span><span class="token punctuation">;</span>//左开右闭，删除了2，参数必须是迭代器     int c<span class="token punctuation">;</span> //a.clear<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>//清零容器值和长度 <span class="token assign-left variable">c</span><span class="token operator">=</span>a.size<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>int d,e<span class="token punctuation">;</span><span class="token assign-left variable">d</span><span class="token operator">=</span>a.back<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>//获取容器末尾值<span class="token assign-left variable">e</span><span class="token operator">=</span>a.front<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>//获取容器头端值 for<span class="token punctuation">(</span>it<span class="token operator">=</span>a.begin<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>it<span class="token operator">!=</span>a.end<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>++it<span class="token punctuation">)</span>cout<span class="token operator">&lt;&lt;</span>*it<span class="token operator">&lt;&lt;</span><span class="token string">" "</span><span class="token punctuation">;</span>cout<span class="token operator">&lt;&lt;</span>endl<span class="token operator">&lt;&lt;</span>c<span class="token operator">&lt;&lt;</span>d<span class="token operator">&lt;&lt;</span>e<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span><span class="token builtin class-name">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>8.#include &lt; stack &gt;</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#include&lt;bits/stdc++.h&gt;</span>using namespace std<span class="token punctuation">;</span>int <span class="token function-name function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>stack <span class="token operator">&lt;</span>int<span class="token operator">&gt;</span> a<span class="token punctuation">;</span>a.push<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>a.push<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>int e<span class="token punctuation">;</span><span class="token assign-left variable">e</span><span class="token operator">=</span>a.top<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>a.pop<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>int b,c,d<span class="token punctuation">;</span><span class="token assign-left variable">b</span><span class="token operator">=</span>a.size<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token assign-left variable">c</span><span class="token operator">=</span>a.empty<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>//返回true/false，即空的返回1，不空返回0 <span class="token assign-left variable">d</span><span class="token operator">=</span>a.top<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>cout<span class="token operator">&lt;&lt;</span>e<span class="token operator">&lt;&lt;</span><span class="token string">" "</span><span class="token operator">&lt;&lt;</span>b<span class="token operator">&lt;&lt;</span><span class="token string">" "</span><span class="token operator">&lt;&lt;</span>c<span class="token operator">&lt;&lt;</span><span class="token string">" "</span><span class="token operator">&lt;&lt;</span>d<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span> //输出 <span class="token number">2</span> <span class="token number">1</span> <span class="token number">0</span> <span class="token number">1</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>9.#include &lt; queue &gt;</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">//普通queue<span class="token comment">#include&lt;bits/stdc++.h&gt;</span>using namespace std<span class="token punctuation">;</span>int <span class="token function-name function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>queue <span class="token operator">&lt;</span>int<span class="token operator">&gt;</span> a<span class="token punctuation">;</span>a.push<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>a.push<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>//元素往右边进 int e<span class="token punctuation">;</span><span class="token assign-left variable">e</span><span class="token operator">=</span>a.front<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>//最开始的是最先加进去，队列最右边的元素，队列的头是右边 a.pop<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>//先进先出，元素往右边出，即最右边的出去 int b,c,d<span class="token punctuation">;</span><span class="token assign-left variable">b</span><span class="token operator">=</span>a.size<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token assign-left variable">c</span><span class="token operator">=</span>a.empty<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>//返回true/false，即空的返回1，不空返回0    a.push<span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token assign-left variable">d</span><span class="token operator">=</span>a.back<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>//队列最左边的元素 cout<span class="token operator">&lt;&lt;</span>e<span class="token operator">&lt;&lt;</span><span class="token string">" "</span><span class="token operator">&lt;&lt;</span>b<span class="token operator">&lt;&lt;</span><span class="token string">" "</span><span class="token operator">&lt;&lt;</span>c<span class="token operator">&lt;&lt;</span><span class="token string">" "</span><span class="token operator">&lt;&lt;</span>d<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span> //输出 <span class="token number">1</span> <span class="token number">1</span> <span class="token number">0</span> <span class="token number">9</span> <span class="token punctuation">}</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">//priority_queue<span class="token comment">#include&lt;bits/stdc++.h&gt;</span>using namespace std<span class="token punctuation">;</span>class student<span class="token punctuation">{</span>public:int  y<span class="token punctuation">;</span> int age<span class="token punctuation">;</span> <span class="token function-name function">student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>//无参数的构造函数，若有有参构造函数有这个才能无参创建一个对象  student<span class="token punctuation">(</span>int x<span class="token punctuation">)</span>:age<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>//有参的构造函数，只要有这个若没有无参构造函数就必须要有参构造  //friend bool operator <span class="token operator">&lt;</span><span class="token punctuation">(</span>const student a,const student b<span class="token punctuation">)</span><span class="token punctuation">{</span>//<span class="token builtin class-name">return</span> a.age <span class="token operator">&gt;</span> b.age<span class="token punctuation">;</span><span class="token punctuation">}</span>//重载小于号使得优先队列变成小根堆 //这种方法因为你创建对象时必须得定义成大根堆，并且不能重载小于号，输出5 friend bool operator <span class="token operator">&gt;</span><span class="token punctuation">(</span>const student a,const student b<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token builtin class-name">return</span> a.age <span class="token operator">&lt;</span> b.age<span class="token punctuation">;</span>//重载大于号使得优先队列变成大根堆 <span class="token punctuation">}</span>//这种方法因为你创建对象时必须得定义成小根堆，并且不能重载大于号 ，输出9 <span class="token punctuation">}</span><span class="token punctuation">;</span>int <span class="token function-name function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>student bb<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>student cc<span class="token punctuation">;</span>cc.age<span class="token operator">=</span><span class="token number">9</span><span class="token punctuation">;</span>//priority_queue<span class="token operator">&lt;</span>student<span class="token operator">&gt;</span> aa<span class="token punctuation">;</span>//定义默认的大根堆 priority_queue<span class="token operator">&lt;</span>student,vector<span class="token operator">&lt;</span>student<span class="token operator">&gt;</span>,greater<span class="token operator">&lt;</span>student<span class="token operator">&gt;</span> <span class="token operator">&gt;</span> aa<span class="token punctuation">;</span>//定义默认的小根堆 aa.push<span class="token punctuation">(</span>bb<span class="token punctuation">)</span><span class="token punctuation">;</span>aa.push<span class="token punctuation">(</span>cc<span class="token punctuation">)</span><span class="token punctuation">;</span>cout<span class="token operator">&lt;&lt;</span>aa.top<span class="token punctuation">(</span><span class="token punctuation">)</span>.age<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>priority_queue <span class="token operator">&lt;</span>int<span class="token operator">&gt;</span> a<span class="token punctuation">;</span>//默认大根堆 //priority_queue <span class="token operator">&lt;</span>int,vector<span class="token operator">&lt;</span>int<span class="token operator">&gt;</span>,greater<span class="token operator">&lt;</span>int<span class="token operator">&gt;</span> <span class="token operator">&gt;</span> a<span class="token punctuation">;</span>//输出1 <span class="token number">1</span> <span class="token number">0</span> <span class="token number">2</span>变成小根堆，这个greater是从大到小 a.push<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>a.push<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>//元素往右边进 int e<span class="token punctuation">;</span><span class="token assign-left variable">e</span><span class="token operator">=</span>a.top<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>//默认大根堆，先从大到小的优先级再按找队列顺序 a.pop<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>//先进先出，元素往右边出，即最右边的出去 int b,c,d<span class="token punctuation">;</span><span class="token assign-left variable">b</span><span class="token operator">=</span>a.size<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token assign-left variable">c</span><span class="token operator">=</span>a.empty<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>//返回true/false，即空的返回1，不空返回0    a.push<span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token assign-left variable">d</span><span class="token operator">=</span>a.top<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>//队列最右边的元素 ，即最大的元素 cout<span class="token operator">&lt;&lt;</span>e<span class="token operator">&lt;&lt;</span><span class="token string">" "</span><span class="token operator">&lt;&lt;</span>b<span class="token operator">&lt;&lt;</span><span class="token string">" "</span><span class="token operator">&lt;&lt;</span>c<span class="token operator">&lt;&lt;</span><span class="token string">" "</span><span class="token operator">&lt;&lt;</span>d<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span> //输出 <span class="token number">2</span> <span class="token number">1</span> <span class="token number">0</span> <span class="token number">9</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>10.#include &lt; set &gt; 由节点组成的红黑树（二分查找树），集合的元素不重复，集合内部的值是默认排好序的，可以插入或删除但不能更改</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#include&lt;set&gt;</span><span class="token comment">#include&lt;bits/stdc++.h&gt;</span>using namespace std<span class="token punctuation">;</span>int <span class="token function-name function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>set<span class="token operator">&lt;</span>int <span class="token operator">&gt;</span> a<span class="token punctuation">;</span>//这样子写默认小于为真，集合内元素从小到大排序 //set<span class="token operator">&lt;</span>int,greater<span class="token operator">&lt;</span>int<span class="token operator">&gt;</span> <span class="token operator">&gt;</span> a<span class="token punctuation">;</span>//这样子写默认大于为真 ,集合内元素从大到小排序 a.insert<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>a.insert<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>a.insert<span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">;</span>a.insert<span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">;</span>cout<span class="token operator">&lt;&lt;</span>a.count<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>//输出1 cout<span class="token operator">&lt;&lt;</span>a.count<span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>//输出1 int b,c,d<span class="token punctuation">;</span><span class="token assign-left variable">c</span><span class="token operator">=</span>a.max_size<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token assign-left variable">d</span><span class="token operator">=</span>a.empty<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>a.erase<span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token assign-left variable">b</span><span class="token operator">=</span>a.size<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     set<span class="token operator">&lt;</span>int<span class="token operator">&gt;</span>::key_compare  comp  <span class="token operator">=</span>  a <span class="token builtin class-name">.</span> key_comp <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>//比较给定元素值大小，默认小于为真 //上面也等价于auto comp <span class="token operator">=</span>  a <span class="token builtin class-name">.</span> key_comp <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>//set<span class="token operator">&lt;</span>int,greater<span class="token operator">&lt;</span>int<span class="token operator">&gt;</span> <span class="token operator">&gt;</span>::key_compare  comp  <span class="token operator">=</span>  a <span class="token builtin class-name">.</span> key_comp <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>//和上面大于对应     cout<span class="token operator">&lt;&lt;</span>comp<span class="token punctuation">(</span><span class="token number">1,2</span><span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token operator">&lt;&lt;</span>b<span class="token operator">&lt;&lt;</span><span class="token string">" "</span><span class="token operator">&lt;&lt;</span>c<span class="token operator">&lt;&lt;</span><span class="token string">" "</span><span class="token operator">&lt;&lt;</span>d<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>//输出1 <span class="token number">2</span> 很大的数 <span class="token number">0</span>         //set<span class="token operator">&lt;</span>int<span class="token operator">&gt;</span>::iterator it<span class="token punctuation">;</span>//it<span class="token operator">=</span>a.find<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>//find返回的是一个迭代器 auto <span class="token assign-left variable">it</span><span class="token operator">=</span>a.find<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>//用需要在编译器添加-std<span class="token operator">=</span>c++11，//自动推导类型必须给赋初值,auto加上<span class="token operator">&amp;</span>为才为数组类型，auto永远不会给你生成引用，你必须自己加才行 //除了const都不能推导只有基本类型，剩下前缀自己加 decltype<span class="token punctuation">(</span>it<span class="token punctuation">)</span> <span class="token assign-left variable">it2</span><span class="token operator">=</span>a.find<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> for<span class="token punctuation">(</span><span class="token punctuation">;</span>it2<span class="token operator">!=</span>a.end<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>++it2<span class="token punctuation">)</span>cout<span class="token operator">&lt;&lt;</span>*it<span class="token operator"><span class="token file-descriptor important">2</span>&lt;</span><span class="token operator">&lt;</span><span class="token string">" "</span><span class="token punctuation">;</span>//for<span class="token punctuation">(</span>auto it3:a<span class="token punctuation">)</span> //cout<span class="token operator">&lt;&lt;</span>it<span class="token operator"><span class="token file-descriptor important">3</span>&lt;</span><span class="token operator">&lt;</span><span class="token string">" "</span><span class="token punctuation">;</span>//输出1 <span class="token number">2</span> <span class="token builtin class-name">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">//multiset的使用<span class="token comment">#include&lt;set&gt;</span><span class="token comment">#include&lt;bits/stdc++.h&gt;</span>using namespace std<span class="token punctuation">;</span>int <span class="token function-name function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>multiset<span class="token operator">&lt;</span>int <span class="token operator">&gt;</span> a<span class="token punctuation">;</span>//这样子写默认小于为真，集合内元素从小到大排序 //set<span class="token operator">&lt;</span>int,greater<span class="token operator">&lt;</span>int<span class="token operator">&gt;</span> <span class="token operator">&gt;</span> a<span class="token punctuation">;</span>//这样子写默认大于为真 ,集合内元素从大到小排序 a.insert<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>a.insert<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>a.insert<span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">;</span>a.insert<span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">;</span>a.insert<span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">;</span>cout<span class="token operator">&lt;&lt;</span>a.count<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>//.count是输出集合里出现的元素个数输出1 cout<span class="token operator">&lt;&lt;</span>a.count<span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>//输出3int b,c,d<span class="token punctuation">;</span><span class="token assign-left variable">c</span><span class="token operator">=</span>a.max_size<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token assign-left variable">d</span><span class="token operator">=</span>a.empty<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>//a.erase<span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">;</span>//注意这个去除元素是直接去除全部的这个元素a.erase<span class="token punctuation">(</span>a.find<span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">))</span><span class="token punctuation">;</span>//这样就只删除了一个9 <span class="token assign-left variable">b</span><span class="token operator">=</span>a.size<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     set<span class="token operator">&lt;</span>int<span class="token operator">&gt;</span>::key_compare  comp  <span class="token operator">=</span>  a <span class="token builtin class-name">.</span> key_comp <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>//比较给定元素值大小，默认小于为真 //上面也等价于auto comp <span class="token operator">=</span>  a <span class="token builtin class-name">.</span> key_comp <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>//set<span class="token operator">&lt;</span>int,greater<span class="token operator">&lt;</span>int<span class="token operator">&gt;</span> <span class="token operator">&gt;</span>::key_compare  comp  <span class="token operator">=</span>  a <span class="token builtin class-name">.</span> key_comp <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>//和上面大于对应     cout<span class="token operator">&lt;&lt;</span>comp<span class="token punctuation">(</span><span class="token number">1,2</span><span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token operator">&lt;&lt;</span>b<span class="token operator">&lt;&lt;</span><span class="token string">" "</span><span class="token operator">&lt;&lt;</span>c<span class="token operator">&lt;&lt;</span><span class="token string">" "</span><span class="token operator">&lt;&lt;</span>d<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>//输出1 <span class="token number">4</span> 很大的数 <span class="token number">0</span> for<span class="token punctuation">(</span>auto it3:a<span class="token punctuation">)</span> cout<span class="token operator">&lt;&lt;</span>it<span class="token operator"><span class="token file-descriptor important">3</span>&lt;</span><span class="token operator">&lt;</span><span class="token string">" "</span><span class="token punctuation">;</span>//输出1 <span class="token number">2</span> <span class="token number">9</span> <span class="token number">9</span><span class="token builtin class-name">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>11.#include&lt; utility &gt;</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#include&lt;bits/stdc++.h&gt;</span><span class="token comment">#include&lt;utility&gt;</span>using namespace std<span class="token punctuation">;</span>pair<span class="token operator">&lt;</span>string,int<span class="token operator">&gt;</span> <span class="token function-name function">printworld</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token builtin class-name">return</span>  make_pair<span class="token operator">&lt;</span>string,int<span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token string">"world"</span>,9<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>int <span class="token function-name function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>pair<span class="token operator">&lt;</span>string,int<span class="token operator">&gt;</span> a<span class="token punctuation">(</span><span class="token string">"hello"</span>,3<span class="token punctuation">)</span><span class="token punctuation">;</span>//将2个数据合成一组数据或者函数需要返回2个数据//pair<span class="token operator">&lt;</span>string,int<span class="token operator">&gt;</span> a<span class="token punctuation">;</span>//a<span class="token operator">=</span>make_pair<span class="token punctuation">(</span><span class="token string">"world"</span>,3<span class="token punctuation">)</span><span class="token punctuation">;</span>string c<span class="token punctuation">;</span>int d<span class="token punctuation">;</span> tie<span class="token punctuation">(</span>c,d<span class="token punctuation">)</span><span class="token operator">=</span>printworld<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>cout<span class="token operator">&lt;&lt;</span>a.second<span class="token operator">&lt;&lt;</span><span class="token string">" "</span><span class="token operator">&lt;&lt;</span>d<span class="token operator">&lt;&lt;</span>a.first<span class="token operator">&lt;&lt;</span>c<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>   //输出3 9hello world <span class="token builtin class-name">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>12.#include&lt; map &gt;关联式容器，提供1对1的哈希，内部会自建一个红黑树，对数据自动排序，由键集合和值集合构成的映射，其中多个键可以对应一个值，例如小明和张三都在2班</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#include&lt;map&gt;</span><span class="token comment">#include&lt;utility&gt;</span><span class="token comment">#include&lt;iostream&gt;</span>using namespace std<span class="token punctuation">;</span>int <span class="token function-name function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>map<span class="token operator">&lt;</span>string,int<span class="token operator">&gt;</span> a<span class="token punctuation">;</span>a.insert<span class="token punctuation">(</span>pair<span class="token operator">&lt;</span>string,int<span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token string">"xiaoming"</span>,99<span class="token punctuation">))</span><span class="token punctuation">;</span>a.insert<span class="token punctuation">(</span>make_pair<span class="token punctuation">(</span><span class="token string">"zhangsan"</span>,100<span class="token punctuation">))</span><span class="token punctuation">;</span>///以上两种方法若map中已经有键就不能再插入了 a<span class="token punctuation">[</span><span class="token string">"xiaoming"</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">95</span><span class="token punctuation">;</span>//使用数组赋值会直接覆盖掉map键对应的值auto <span class="token assign-left variable">it</span><span class="token operator">=</span>a.find<span class="token punctuation">(</span><span class="token string">"xiaoming"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>//只能直接用键找值，若想用值找键得自己循环查找 //map<span class="token operator">&lt;</span>string,int<span class="token operator">&gt;</span> ::iterator <span class="token assign-left variable">it</span><span class="token operator">=</span>a.find<span class="token punctuation">(</span><span class="token string">"xiaoming"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>map<span class="token operator">&lt;</span>string,int<span class="token operator">&gt;</span> ::iterator it2<span class="token punctuation">;</span>for<span class="token punctuation">(</span>it2<span class="token operator">=</span>a.begin<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>it2<span class="token operator">!=</span>a.end<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>++it2<span class="token punctuation">)</span><span class="token punctuation">{</span>if<span class="token punctuation">(</span>it2-<span class="token operator">&gt;</span>second<span class="token operator">==</span><span class="token number">100</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>cout<span class="token operator">&lt;&lt;</span>it2-<span class="token operator">&gt;</span>first<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span><span class="token builtin class-name">break</span><span class="token punctuation">;</span><span class="token punctuation">}</span>//输出zhangsan <span class="token punctuation">}</span>//用值查键 cout<span class="token operator">&lt;&lt;</span>it-<span class="token operator">&gt;</span>second<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span> //输出95    auto <span class="token assign-left variable">it3</span><span class="token operator">=</span>a.find<span class="token punctuation">(</span><span class="token string">"zhangsan"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   a.erase<span class="token punctuation">(</span>it3<span class="token punctuation">)</span><span class="token punctuation">;</span>   map<span class="token operator">&lt;</span>string,int<span class="token operator">&gt;</span> ::iterator it4<span class="token punctuation">;</span>   for<span class="token punctuation">(</span>it4<span class="token operator">=</span>a.begin<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>it4<span class="token operator">!=</span>a.end<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>++it4<span class="token punctuation">)</span>   <span class="token punctuation">{</span>cout<span class="token operator">&lt;&lt;</span>it4-<span class="token operator">&gt;</span>first<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span> <span class="token punctuation">}</span>//输出小明  //  for<span class="token punctuation">(</span> auto it4:a<span class="token punctuation">)</span>//   <span class="token punctuation">{</span>//   cout<span class="token operator">&lt;&lt;</span>it4.first<span class="token operator">&lt;&lt;</span><span class="token string">" "</span><span class="token punctuation">;</span>//   <span class="token builtin class-name">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>使用auto必须注意的事:即auto永远不会给你生成引用，你必须自己加才行</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#include&lt;bits/stdc++.h&gt;</span>using namespace std<span class="token punctuation">;</span> class Container<span class="token punctuation">{</span>public:    std::vector<span class="token operator">&lt;</span>int<span class="token operator">&gt;&amp;</span> <span class="token function-name function">GetData</span><span class="token punctuation">(</span><span class="token punctuation">)</span>   <span class="token punctuation">{</span>        <span class="token builtin class-name">return</span> data_<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    std::vector<span class="token operator">&lt;</span>int<span class="token operator">&gt;</span> data_<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>int <span class="token function-name function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    Container c<span class="token punctuation">;</span>    c.data_ <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token number">0,1</span>,2,3 <span class="token punctuation">}</span><span class="token punctuation">;</span>    auto data <span class="token operator">=</span> c.GetData<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>//这里data实际上是一个std::vector<span class="token operator">&lt;</span>int<span class="token operator">&gt;</span>而非 std::vector<span class="token operator">&lt;</span>int<span class="token operator">&gt;&amp;</span>,//引用使得data和c.data_共地址,不管程序在任何时候，只要c.data_变，data就得变     c.data_.push_back<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>auto<span class="token operator">&amp;</span> it <span class="token builtin class-name">:</span> data<span class="token punctuation">)</span>  //若不加<span class="token operator">&amp;</span>不会输出10         std::cout <span class="token operator">&lt;&lt;</span> it <span class="token operator">&lt;&lt;</span> std::endl<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>auto it2 <span class="token builtin class-name">:</span> c.data_<span class="token punctuation">)</span>          std::cout <span class="token operator">&lt;&lt;</span> it2 <span class="token operator">&lt;&lt;</span> std::endl<span class="token punctuation">;</span>//    <span class="token builtin class-name">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>const的用法：</p><p>指针常量 const  int *p, *p的值不能改变</p><p>常量指针int *const p，p不能变</p><p> void function(const Class&amp; Var); //引用参数在函数内不可以改变</p>]]></content>
      
      
      <categories>
          
          <category> c++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> c++ </tag>
            
            <tag> stl </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>双指针算法</title>
      <link href="/2022/03/03/shuang-zhi-zhen-suan-fa/"/>
      <url>/2022/03/03/shuang-zhi-zhen-suan-fa/</url>
      
        <content type="html"><![CDATA[<p>输入：nums = [-4,-1,0,3,10]<br>输出：[0,1,9,16,100]<br>解释：平方后，数组变为 [16,1,0,9,100]<br>排序后，数组变为 [0,1,9,16,100]</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">class Solution<span class="token punctuation">{</span>public:vector<span class="token operator">&lt;</span>int<span class="token operator">&gt;</span> sortedSquares<span class="token punctuation">(</span>vector<span class="token operator">&lt;</span>int<span class="token operator">&gt;</span> <span class="token operator">&amp;</span>nums<span class="token punctuation">)</span><span class="token punctuation">{</span>int <span class="token assign-left variable">l</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>int <span class="token assign-left variable">r</span><span class="token operator">=</span>nums.size<span class="token punctuation">(</span><span class="token punctuation">)</span>-1,k<span class="token operator">=</span>r<span class="token punctuation">;</span>//一个指针在左边一个指针在最右边，但需要求出来的是另一个数组，因此需要多设立一个变量来遍历另一个数组vector<span class="token operator">&lt;</span>int<span class="token operator">&gt;</span> result<span class="token punctuation">(</span>nums.size<span class="token punctuation">(</span><span class="token punctuation">)</span>,0<span class="token punctuation">)</span><span class="token punctuation">;</span> while<span class="token punctuation">(</span>l<span class="token operator">&lt;=</span>r<span class="token punctuation">)</span>//这里加等于是排序的是数组，当双指针指向同一个数组时即剩下最后一个数停止<span class="token punctuation">{</span>if<span class="token punctuation">(</span>nums<span class="token punctuation">[</span>l<span class="token punctuation">]</span>*nums<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token operator">&gt;</span>nums<span class="token punctuation">[</span>r<span class="token punctuation">]</span>*nums<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>result<span class="token punctuation">[</span>k--<span class="token punctuation">]</span><span class="token operator">=</span>nums<span class="token punctuation">[</span>l<span class="token punctuation">]</span>*nums<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">;</span>l++<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>result<span class="token punctuation">[</span>k--<span class="token punctuation">]</span><span class="token operator">=</span>nums<span class="token punctuation">[</span>r<span class="token punctuation">]</span>*nums<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">;</span>r--<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token builtin class-name">return</span> result<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这题运用双指针就是把数组的下标变为指针，一个在最左边，一个在最右边，因为数组本身是有序的，所以最大的要不在最左边要不在最右边，每次最左和最右比较后选出一个最大的放在所求数组的最右边</p>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> 双指针 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>二分查找</title>
      <link href="/2022/03/01/er-fen-cha-zhao/"/>
      <url>/2022/03/01/er-fen-cha-zhao/</url>
      
        <content type="html"><![CDATA[<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">// 在<span class="token punctuation">[</span>l, r<span class="token punctuation">]</span>范围内查找值 v，返回下标// 假设 a 数组已经按从小到大排序// 失败返回-1 int bs<span class="token punctuation">(</span>int a<span class="token punctuation">[</span><span class="token punctuation">]</span>, int l, int r, int <span class="token function">v</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  int m<span class="token punctuation">;</span>  <span class="token keyword">while</span> <span class="token punctuation">(</span> l <span class="token operator">&lt;=</span> r <span class="token punctuation">)</span> <span class="token punctuation">{</span>  m <span class="token operator">=</span> <span class="token punctuation">(</span> l + r <span class="token punctuation">)</span> <span class="token operator">&gt;&gt;</span> <span class="token number">1</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>a<span class="token punctuation">[</span>m<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token function">v</span><span class="token punctuation">)</span>  <span class="token builtin class-name">return</span> m<span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>a<span class="token punctuation">[</span>m<span class="token punctuation">]</span> <span class="token operator">&lt;</span> <span class="token function">v</span><span class="token punctuation">)</span>  <span class="token assign-left variable">l</span><span class="token operator">=</span>m+1<span class="token punctuation">;</span>  <span class="token keyword">else</span> <span class="token assign-left variable">r</span><span class="token operator">=</span>m<span class="token punctuation">;</span>  /*计算机整除直接舍弃小数部分，若要找数 在最右边，让左边界限到m时和右边界限相加永远不可能是最右边数，l要多加1  在左边时，最左边界限和m相加，因为整除去掉小数部分，所以可以是最右边数 */ <span class="token punctuation">}</span>  <span class="token builtin class-name">return</span> -1<span class="token punctuation">;</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>-5 / 2 = -2，5 / 2 = 2。这表明除二是向零取整<br>-5 &gt;&gt; 1 = -3，5 &gt;&gt; 1 = 2。这表明右移一位是向下取整</p><p>一定要注意m=r+l是否会超出定义的m的范围，若超过可以使得m=l+(r-l)/2;</p>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> 查找 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
